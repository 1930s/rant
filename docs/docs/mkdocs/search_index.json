{
    "docs": [
        {
            "location": "/",
            "text": "Rant Documentation\n[link]\n\n\n\n\nInfo\n\n\nThis documentation is a \nwork-in-progress\n. Some pages may be blank, incomplete, or nonexistant.\nAll content on this site is subject to change without notice.\n\n\nYour feedback is welcome. Feel free to post a comment with your feedback and suggestions so that\nI can make this documentation as helpful as it can possibly be.\n\n\n\n\nThank you for your interest in Rant! We hope you find it useful in your text generation endeavors.\n\n\nHere you will find all the resources you need to learn about the Rant language and API.\n\n\nGetting Started\n[link]\n\n\nIf you're new to Rant and want to jump right in, this documentation provides\ntwo separate quick-start guides, depending on how you plan on using Rant.\n\n\n\n\nQuick-Start for Developers\n\n\nQuick-Start for Writers\n\n\n\n\nResources\n[link]\n\n\n\n\nRant on GitHub\n\n\nRant Website\n\n\nRant Standard Dictionary\n\n\n@RantLang on Twitter",
            "title": "Home"
        },
        {
            "location": "/#rant-documentation",
            "text": "Info  This documentation is a  work-in-progress . Some pages may be blank, incomplete, or nonexistant.\nAll content on this site is subject to change without notice.  Your feedback is welcome. Feel free to post a comment with your feedback and suggestions so that\nI can make this documentation as helpful as it can possibly be.   Thank you for your interest in Rant! We hope you find it useful in your text generation endeavors.  Here you will find all the resources you need to learn about the Rant language and API.",
            "title": "Rant Documentation"
        },
        {
            "location": "/#getting-started",
            "text": "If you're new to Rant and want to jump right in, this documentation provides\ntwo separate quick-start guides, depending on how you plan on using Rant.   Quick-Start for Developers  Quick-Start for Writers",
            "title": "Getting Started"
        },
        {
            "location": "/#resources",
            "text": "Rant on GitHub  Rant Website  Rant Standard Dictionary  @RantLang on Twitter",
            "title": "Resources"
        },
        {
            "location": "/getting-started/developers/",
            "text": "If you are a developer who would like to integrate Rant into your C# project with as little effort as possible, this guide is for you.\n\n\nInstalling Rant\n[link]\n\n\nYou can easily install Rant in your project by adding \nRant.dll\n as a reference.\nRant has no external dependencies, so don't worry about that.\n\n\nHowever, if you don't want to manually mess around with DLLs, you can use NuGet instead.\nTo install the NuGet package for Rant, enter this command into your Package Manager console:\n\n\nPM> Install-Package Rant\n\n\n\n\n\nKaboom! Rant is installed.\n\n\nCreating an engine context\n[link]\n\n\nBefore you can use Rant, you must create a \nRantEngine\n instance. \nThe \nRantEngine\n class is the main class in Rant, and provides access to the runtime.\n\n\nvar\n \nrant\n \n=\n \nnew\n \nRantEngine\n();\n\n\n\n\n\n\nNow that you have an instance of \nRantEngine\n, you can compile and run patterns.\n\n\nRunning a pattern\n[link]\n\n\nLet's start with a very simple program that counts to ten:\n\n\n[numfmt:verbal][rep:10][sep:,\\s]{[rn]}\n\n\n\n\n\nTo run this pattern, you will first need to compile it to a \nRantProgram\n and then use the \nRantEngine.Do\n method to run it.\n\n\n// Create the program\n\n\nvar\n \npgm\n \n=\n \nRantProgram\n.\nCompileString\n(\n@\"[numfmt:verbal][rep:10][sep:,\\s]{[rn]}\"\n);\n\n\n// Run the program\n\n\nvar\n \noutput\n \n=\n \nrant\n.\nDo\n(\npgm\n);\n\n\n// Display the output in the console\n\n\nConsole\n.\nWriteLine\n(\noutput\n.\nMain\n);\n\n\n\n\n\n\nIf everything went well, you should see this in the console:\n\n\none, two, three, four, five, six, seven, eight, nine, ten\n\n\n\n\n\nHandling multiple outputs\n[link]\n\n\nRantEngine.Do()\n can also return multiple strings at once, which are stored in a \nRantOutput\n object.\nThe main output is stored in the \nMain\n property, which might be most often what you'll be using.\nHowever, when multiple channel outputs are returned, they must be accessed using either an iterator\nor by indexing the entry you're interested in.\n\n\nSuppose we run the following:\n\n\nvar\n \nrant\n \n=\n \nnew\n \nRantEngine\n();\n\n\nvar\n \nprogram\n \n=\n \nRantProgram\n.\nCompileString\n(\n@\"[chan:a;private;Value A][chan:b;private;Value B]\"\n);\n\n\nvar\n \noutput\n \n=\n \nrant\n.\nDo\n(\nprogram\n);\n\n\nforeach\n \n(\nRantOutputEntry\n \nentry\n \nin\n \noutput\n)\n\n\n{\n\n    \nConsole\n.\nWriteLine\n(\n\"{0}: '{1}'\"\n,\n \nentry\n.\nName\n,\n \nentry\n.\nValue\n);\n\n\n}\n\n\n\n\n\n\nThis creates a new Rant context, compiles a pattern that writes to two channels: \na\n and \nb\n, \nthen runs it and prints the name and value of each channel's output.\n\n\nIf the program runs successfully, it will show the following output in the console:\n\n\na: 'Value A'\nb: 'Value B'\n\n\n\n\n\nIf you would rather retrieve the channel outputs by name, simply use the \nRantOutput\n indexer instead:\n\n\nstring\n \na\n \n=\n \noutput\n[\n\"a\"\n]?.\nValue\n;\n \n// \"Value A\"\n\n\nstring\n \nb\n \n=\n \noutput\n[\n\"b\"\n]?.\nValue\n;\n \n// \"Value B\"\n\n\n\n\n\n\nSerial programs\n[link]\n\n\nBut wait, there's more. Rant has \ntwo\n ways of providing us with multiple outputs:\n\n\nThe first way, shown above, is to write to multiple channels and return them in a single \nRantOutput\n object.\n\n\nThe second way can also write to multiple channels, but it has the added ability of returning multiple \nRantOutput\n objects from a single program execution.\nThis is quite useful if you need to return a series of outputs in a specific order. \nPatterns that do this are called \nserial patterns\n. Likewise, programs compiled from serial patterns are called \nserial programs\n.\n\n\nSerial programs work by using the \n[yield]\n function to dump the current output into a \nRantOutput\n object, which is then provided to the user code via an iterator.\nThe program can then continue to run and generate more outputs, and this process can be repeated as many times as needed.\n\n\nRunning a serial program requires slightly different code. You can technically run a serial program with \nRantEngine.Do\n, but the outputs will be merged into one.\nTo properly use a serial program, you must use the \nRantEngine.DoSerial\n method instead.\n\n\nvar\n \nrant\n \n=\n \nnew\n \nRantEngine\n();\n\n\nvar\n \nprogram\n \n=\n \nRantProgram\n.\nCompileString\n(\n@\"[rep:10]{[rn][yield]}\"\n);\n\n\nforeach\n \n(\nRantOutput\n \noutput\n \nin\n \nrant\n.\nDoSerial\n(\nprogram\n))\n\n\n{\n\n    \nConsole\n.\nWriteLine\n(\noutput\n.\nMain\n);\n\n\n}\n\n\n\n\n\n\nRunning this code will generate ten \nRantOutput\n instances.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10",
            "title": "Quick-Start for Developers"
        },
        {
            "location": "/getting-started/developers/#installing-rant",
            "text": "You can easily install Rant in your project by adding  Rant.dll  as a reference.\nRant has no external dependencies, so don't worry about that.  However, if you don't want to manually mess around with DLLs, you can use NuGet instead.\nTo install the NuGet package for Rant, enter this command into your Package Manager console:  PM> Install-Package Rant  Kaboom! Rant is installed.",
            "title": "Installing Rant"
        },
        {
            "location": "/getting-started/developers/#creating-an-engine-context",
            "text": "Before you can use Rant, you must create a  RantEngine  instance. \nThe  RantEngine  class is the main class in Rant, and provides access to the runtime.  var   rant   =   new   RantEngine ();   Now that you have an instance of  RantEngine , you can compile and run patterns.",
            "title": "Creating an engine context"
        },
        {
            "location": "/getting-started/developers/#running-a-pattern",
            "text": "Let's start with a very simple program that counts to ten:  [numfmt:verbal][rep:10][sep:,\\s]{[rn]}  To run this pattern, you will first need to compile it to a  RantProgram  and then use the  RantEngine.Do  method to run it.  // Create the program  var   pgm   =   RantProgram . CompileString ( @\"[numfmt:verbal][rep:10][sep:,\\s]{[rn]}\" );  // Run the program  var   output   =   rant . Do ( pgm );  // Display the output in the console  Console . WriteLine ( output . Main );   If everything went well, you should see this in the console:  one, two, three, four, five, six, seven, eight, nine, ten",
            "title": "Running a pattern"
        },
        {
            "location": "/getting-started/developers/#handling-multiple-outputs",
            "text": "RantEngine.Do()  can also return multiple strings at once, which are stored in a  RantOutput  object.\nThe main output is stored in the  Main  property, which might be most often what you'll be using.\nHowever, when multiple channel outputs are returned, they must be accessed using either an iterator\nor by indexing the entry you're interested in.  Suppose we run the following:  var   rant   =   new   RantEngine ();  var   program   =   RantProgram . CompileString ( @\"[chan:a;private;Value A][chan:b;private;Value B]\" );  var   output   =   rant . Do ( program );  foreach   ( RantOutputEntry   entry   in   output )  { \n     Console . WriteLine ( \"{0}: '{1}'\" ,   entry . Name ,   entry . Value );  }   This creates a new Rant context, compiles a pattern that writes to two channels:  a  and  b , \nthen runs it and prints the name and value of each channel's output.  If the program runs successfully, it will show the following output in the console:  a: 'Value A'\nb: 'Value B'  If you would rather retrieve the channel outputs by name, simply use the  RantOutput  indexer instead:  string   a   =   output [ \"a\" ]?. Value ;   // \"Value A\"  string   b   =   output [ \"b\" ]?. Value ;   // \"Value B\"",
            "title": "Handling multiple outputs"
        },
        {
            "location": "/getting-started/developers/#serial-programs",
            "text": "But wait, there's more. Rant has  two  ways of providing us with multiple outputs:  The first way, shown above, is to write to multiple channels and return them in a single  RantOutput  object.  The second way can also write to multiple channels, but it has the added ability of returning multiple  RantOutput  objects from a single program execution.\nThis is quite useful if you need to return a series of outputs in a specific order. \nPatterns that do this are called  serial patterns . Likewise, programs compiled from serial patterns are called  serial programs .  Serial programs work by using the  [yield]  function to dump the current output into a  RantOutput  object, which is then provided to the user code via an iterator.\nThe program can then continue to run and generate more outputs, and this process can be repeated as many times as needed.  Running a serial program requires slightly different code. You can technically run a serial program with  RantEngine.Do , but the outputs will be merged into one.\nTo properly use a serial program, you must use the  RantEngine.DoSerial  method instead.  var   rant   =   new   RantEngine ();  var   program   =   RantProgram . CompileString ( @\"[rep:10]{[rn][yield]}\" );  foreach   ( RantOutput   output   in   rant . DoSerial ( program ))  { \n     Console . WriteLine ( output . Main );  }   Running this code will generate ten  RantOutput  instances.  1\n2\n3\n4\n5\n6\n7\n8\n9\n10",
            "title": "Serial programs"
        },
        {
            "location": "/getting-started/writers/",
            "text": "If you're a writer working inside software that already integrates Rant, you're in the right place.\nLet's get you writing some neat stuff straight away.\n\n\nAutomatic formatting\n[link]\n\n\nRant can do a lot of tedious work for you.\nIt can capitalize your sentences and titles for you, format your numbers in several different bases, \ninsert primary and secondary quotation marks, intelligently insert 'a' or 'an' depending on the following word,\nand a lot more.\n\n\nCapitalize sentences\n[link]\n\n\nFor this we need the \n[case]\n function.\n\n\n[case:sentence]\nthis is a sentence. this is another sentence.\n\n\n\n\n\nWith sentence capitalization enabled, Rant will automatically fix sentence capitalization for you.\n\n\nThis is a sentence. This is another sentence.\n\n\n\n\n\nSpell out numbers\n[link]\n\n\nThe \n[numfmt]\n function controls number formatting. To spell numbers out, you need to use the \nverbal\n mode.\n\n\n[numfmt:verbal][rs:5;,\\s]{[n:1;100]}\n\n\n\n\n\nThis pattern produces a list of five numbers in English.\n\n\nsixty-five, seventy-seven, fourteen, sixty-three, thirty-three\n\n\n\n\n\nComma-separated lists\n[link]\n\n\nRant makes writing lists of things easy. It also supports generating lists both with and without an Oxford comma.\nThis feature can be accessed through two specific overloads of the \n[sep]\n function.\n\n\nList with an Oxford comma\n[link]\n\n\n[case:first][rep:3][sep:,;,;and]{\\a <animal::!a>} walk into a bar.\n\n\n\n\n\nThe output will show a very nice list of animals.\n\n\nAn octopus, a deer, and a silverback gorilla walk into a bar.\n\n\n\n\n\nList without an Oxford comma\n[link]\n\n\n[case:first][rep:3][sep:,;and]{\\a <animal::!a>} walk into a bar.\n\n\n\n\n\nAssuming the same seed is used, the output is only slightly different; the Oxford comma is not there.\n\n\nAn octopus, a deer and a silverback gorilla walk into a bar.\n\n\n\n\n\nReusing a word from a query\n[link]\n\n\nQueries are useful for fetching random words under specific search criteria, but sometimes you may want to use that word more than once.\nRant has a feature specifically for doing this: the \nmatch carrier\n.\nCarriers are a query feature that allows you to make query results depend on previous queries; you can read more about them \nhere\n.\n\n\nWith a dictionary like \nRantionary\n loaded, try running this pattern:\n\n\nOne <noun-animal::=a>! Two <noun.pl::=a>! THREE <noun.pl::=a>!\n\n\n\n\n\nAll three queries will always provide the same word.\n\n\nOne donkey! Two donkeys! THREE donkeys!\n\n\n\n\n\nYou only need to specify your filters on the first query.\nThe subtype can be changed without consequence.",
            "title": "Quick-Start for Writers"
        },
        {
            "location": "/getting-started/writers/#automatic-formatting",
            "text": "Rant can do a lot of tedious work for you.\nIt can capitalize your sentences and titles for you, format your numbers in several different bases, \ninsert primary and secondary quotation marks, intelligently insert 'a' or 'an' depending on the following word,\nand a lot more.",
            "title": "Automatic formatting"
        },
        {
            "location": "/getting-started/writers/#capitalize-sentences",
            "text": "For this we need the  [case]  function.  [case:sentence]\nthis is a sentence. this is another sentence.  With sentence capitalization enabled, Rant will automatically fix sentence capitalization for you.  This is a sentence. This is another sentence.",
            "title": "Capitalize sentences"
        },
        {
            "location": "/getting-started/writers/#spell-out-numbers",
            "text": "The  [numfmt]  function controls number formatting. To spell numbers out, you need to use the  verbal  mode.  [numfmt:verbal][rs:5;,\\s]{[n:1;100]}  This pattern produces a list of five numbers in English.  sixty-five, seventy-seven, fourteen, sixty-three, thirty-three",
            "title": "Spell out numbers"
        },
        {
            "location": "/getting-started/writers/#comma-separated-lists",
            "text": "Rant makes writing lists of things easy. It also supports generating lists both with and without an Oxford comma.\nThis feature can be accessed through two specific overloads of the  [sep]  function.",
            "title": "Comma-separated lists"
        },
        {
            "location": "/getting-started/writers/#list-with-an-oxford-comma",
            "text": "[case:first][rep:3][sep:,;,;and]{\\a <animal::!a>} walk into a bar.  The output will show a very nice list of animals.  An octopus, a deer, and a silverback gorilla walk into a bar.",
            "title": "List with an Oxford comma"
        },
        {
            "location": "/getting-started/writers/#list-without-an-oxford-comma",
            "text": "[case:first][rep:3][sep:,;and]{\\a <animal::!a>} walk into a bar.  Assuming the same seed is used, the output is only slightly different; the Oxford comma is not there.  An octopus, a deer and a silverback gorilla walk into a bar.",
            "title": "List without an Oxford comma"
        },
        {
            "location": "/getting-started/writers/#reusing-a-word-from-a-query",
            "text": "Queries are useful for fetching random words under specific search criteria, but sometimes you may want to use that word more than once.\nRant has a feature specifically for doing this: the  match carrier .\nCarriers are a query feature that allows you to make query results depend on previous queries; you can read more about them  here .  With a dictionary like  Rantionary  loaded, try running this pattern:  One <noun-animal::=a>! Two <noun.pl::=a>! THREE <noun.pl::=a>!  All three queries will always provide the same word.  One donkey! Two donkeys! THREE donkeys!  You only need to specify your filters on the first query.\nThe subtype can be changed without consequence.",
            "title": "Reusing a word from a query"
        },
        {
            "location": "/howto/errors/",
            "text": "There are two types of errors that can occur when using Rant programs:\n\n\nCompiler errors\n[link]\n\n\nCompiler errors are raised by the compiler when it finds something in a pattern\nthat it is unable to make any sense of. It will return a message explaining the\nproblem, as well as where in the code (line, col, index) it found it.\n\n\nIn Rant, compiler errors are represented by the \nRantCompilerException\n class,\nand this exception can be thrown by any method where compilation takes place.\nTo handle these errors, you will need to use a try/catch clause and examine\nthe exception's properties.\n\n\ntry\n\n\n{\n\n    \nvar\n \nrant\n \n=\n \nnew\n \nRantEngine\n();\n\n    \nvar\n \nprogram\n \n=\n \nRantProgram\n.\nCompileString\n(\n@\"[rep:10;10;10][sep:,\\s]]{<noun->}\"\n);\n\n    \nConsole\n.\nWriteLine\n(\nrant\n.\nDo\n(\nprogram\n));\n\n\n}\n\n\ncatch\n \n(\nRantCompilerException\n \nex\n)\n\n\n{\n\n    \nConsole\n.\nWriteLine\n(\nex\n.\nMessage\n);\n\n\n}\n\n\n\n\n\n\nThe \nMessage\n property of \nRantCompilerException\n contains every single error\nfound in the pattern, as well as where each is located.\n\n\n3 compiler errors found:\n    1. (Pattern: Ln 1, Col 2) Function 'rep' has no overload that takes 3 argument(s).\n    2. (Pattern: Ln 1, Col 24) Unexpected token found: ']'\n    3. (Pattern: Ln 1, Col 32) Expected class filter rule.\n\n\n\n\n\nAdditionally, if you would rather examine each error message individually,\nthe \nRantCompilerException\n class also provides a \nGetErrors()\n method,\nwhich enumerates the \nRantCompilerMessage\n objects stored in the instance.\n\n\ntry\n\n\n{\n\n    \n// ...\n\n\n}\n\n\ncatch\n \n(\nRantCompilerException\n \nex\n)\n\n\n{\n\n    \nConsole\n.\nWriteLine\n(\n\"Compilation failed!\"\n);\n\n    \nforeach\n(\nRantCompilerMessage\n \nmsg\n \nin\n \nex\n.\nGetErrors\n())\n\n    \n{\n\n        \nConsole\n.\nWriteLine\n(\nmsg\n.\nMessage\n);\n\n        \nConsole\n.\nWriteLine\n(\n\"  - Line: {0}\"\n,\n \nmsg\n.\nLine\n);\n\n        \nConsole\n.\nWriteLine\n(\n\"  - Column: {0}\"\n,\n \nmsg\n.\nColumn\n);\n\n        \nConsole\n.\nWriteLine\n(\n\"  - Index: {0}\"\n,\n \nmsg\n.\nIndex\n);\n\n    \n}\n\n\n}\n\n\n\n\n\n\nRuntime errors\n[link]\n\n\nA runtime error occurs when a Rant program encounters a problem while it is running,\nwhich makes further execution impossible. It will then throw a \nRantRuntimeException\n.\n\n\nOne example of a runtime error is a stack overflow, demonstrated below.\n\n\ntry\n\n\n{\n\n    \nvar\n \nrant\n \n=\n \nnew\n \nRantEngine\n();\n\n    \n// This pattern creates a subroutine that continuously calls itself\n\n    \nvar\n \nprogram\n \n=\n \nRantProgram\n.\nCompileString\n(\n@\"[$[recurse]:[$recurse]][$recurse]\"\n);\n\n    \nrant\n.\nDo\n(\nprogram\n);\n \n// No output is generated, so don't even bother capturing it\n\n\n}\n\n\ncatch\n \n(\nRantRuntimeException\n \nex\n)\n\n\n{\n\n    \nConsole\n.\nWriteLine\n(\nex\n.\nMessage\n);\n\n\n}\n\n\n\n\n\n\nThe exception message will contain a string explaining what caused the runtime error.\n\n\n(Pattern: Ln 1, Col 15) Exceeded the maximum stack size (64).",
            "title": "Handling Errors"
        },
        {
            "location": "/howto/errors/#compiler-errors",
            "text": "Compiler errors are raised by the compiler when it finds something in a pattern\nthat it is unable to make any sense of. It will return a message explaining the\nproblem, as well as where in the code (line, col, index) it found it.  In Rant, compiler errors are represented by the  RantCompilerException  class,\nand this exception can be thrown by any method where compilation takes place.\nTo handle these errors, you will need to use a try/catch clause and examine\nthe exception's properties.  try  { \n     var   rant   =   new   RantEngine (); \n     var   program   =   RantProgram . CompileString ( @\"[rep:10;10;10][sep:,\\s]]{<noun->}\" ); \n     Console . WriteLine ( rant . Do ( program ));  }  catch   ( RantCompilerException   ex )  { \n     Console . WriteLine ( ex . Message );  }   The  Message  property of  RantCompilerException  contains every single error\nfound in the pattern, as well as where each is located.  3 compiler errors found:\n    1. (Pattern: Ln 1, Col 2) Function 'rep' has no overload that takes 3 argument(s).\n    2. (Pattern: Ln 1, Col 24) Unexpected token found: ']'\n    3. (Pattern: Ln 1, Col 32) Expected class filter rule.  Additionally, if you would rather examine each error message individually,\nthe  RantCompilerException  class also provides a  GetErrors()  method,\nwhich enumerates the  RantCompilerMessage  objects stored in the instance.  try  { \n     // ...  }  catch   ( RantCompilerException   ex )  { \n     Console . WriteLine ( \"Compilation failed!\" ); \n     foreach ( RantCompilerMessage   msg   in   ex . GetErrors ()) \n     { \n         Console . WriteLine ( msg . Message ); \n         Console . WriteLine ( \"  - Line: {0}\" ,   msg . Line ); \n         Console . WriteLine ( \"  - Column: {0}\" ,   msg . Column ); \n         Console . WriteLine ( \"  - Index: {0}\" ,   msg . Index ); \n     }  }",
            "title": "Compiler errors"
        },
        {
            "location": "/howto/errors/#runtime-errors",
            "text": "A runtime error occurs when a Rant program encounters a problem while it is running,\nwhich makes further execution impossible. It will then throw a  RantRuntimeException .  One example of a runtime error is a stack overflow, demonstrated below.  try  { \n     var   rant   =   new   RantEngine (); \n     // This pattern creates a subroutine that continuously calls itself \n     var   program   =   RantProgram . CompileString ( @\"[$[recurse]:[$recurse]][$recurse]\" ); \n     rant . Do ( program );   // No output is generated, so don't even bother capturing it  }  catch   ( RantRuntimeException   ex )  { \n     Console . WriteLine ( ex . Message );  }   The exception message will contain a string explaining what caused the runtime error.  (Pattern: Ln 1, Col 15) Exceeded the maximum stack size (64).",
            "title": "Runtime errors"
        },
        {
            "location": "/howto/writing-dictionaries/",
            "text": "A Rant dictionary is a collection of lists called \ntables\n, which separate words by their type.\nEach table contains a list of \nentries\n, which consist of equal numbers of \nterms\n. Terms are the actual strings\nthat Rant queries fetch.\n\n\nA dictionary is contained within a folder and consists of two major components:\nthe first is the tables files, which have the extension \n.table\n. The second is a file\ncalled \nrantpkg.json\n which contains information that allows Rant to create\na package from the dictionary.\n\n\nThis page will discuss the .table format. To learn more about rantpkg.json and creating packages,\nsee the \npackages\n page.\n\n\nTerminology\n[link]\n\n\nTables are split into two main sections: the \nheader\n and the \nlexicon\n.\n\n\nThe header comes first and describes the table's name, layout, and any special properties it may have.\nIt consists of a number of \ndirectives\n. Directives are one-line instructions that start with an \n@\n symbol.\nDirectives can also appear in the lexicon, but we'll discuss header directives first.\n\n\nDirectives can take arguments, which are separated by commas. You may also use escape sequences like \n\\n\n, \n\\uxxxx\n, and \n\\Uxxxxxxx\n.\n\n\nComments\n[link]\n\n\nTable comments are just like Rant comments, starting with \n#\n and taking up the rest of the line. They may not appear within a quoted argument.\n\n\n@name adj\n@sub regular    # Normal form\n@sub com        # Comparative form\n@sub sup        # Superlative form\n\n\n\n\n\nHeader structure\n[link]\n\n\nName\n[link]\n\n\nAt minimum, a table expects a name. This is specified with the \n@name\n directive.\n\n\n@name noun\n\n# ...\n\n\n\n\n\nSubtypes\n[link]\n\n\nSubtypes are strings that point to specific term numbers within an entry and can be used to access different variants of a word, such as\nverb conjugations, noun forms, adjective forms, and other useful information.\n\n\nYou can add a subtype using the \n@sub\n directive. By default, Rant adds one subtype to your table, so you don't need one if your entries\nonly have one form.\n\n\n@name noun\n\n@sub singular, sg\n\n@sub plural, pl\n\n\n\n\n\nEach @sub directive assigns subtypes to a specific term, which corresponds to the number of the \n@sub\n directive.\nIn the above case, the first term has the subtypes \nsingular\n and \nsg\n, while the second term has the subtypes \nplural\n and \npl\n.\nA term can have as many subtypes as you want, as long as it has at least one.\n\n\nIf you'd like to sort your \n@sub\n directives independent of the term order, you can indicate the term index before the subtype name\nto override the default behavior.\n\n\nThis header is equivalent to the one above:\n\n\n@name noun\n@sub 1, plural, pl\n@sub 0, singular, sg\n\n\n\n\n\nHidden classes\n[link]\n\n\nIf you want specific classes to be excluded from the query results unless explicitly requested, you can indicate these classes\nusing the \n@hide\n directive. Rant always implicitly hides the \nnsfw\n class for you.\n\n\n@name verb\n@sub present, imperative\n@sub gerund, ing\n@sub simple_past, ed\n@sub third_person, third_person_present, s\n@sub agent, er\n@sub past_participle, pp\n@sub nominalization, nom\n@sub plural_nominalization, noms\n\n\n@hide visual, speech\n\n\n\n\n\nCorpus structure\n[link]\n\n\nThe main component of the corpus is, of course, its entries.\nAn entry occupies a single line and starts with the \n>\n symbol, followed by comma-separated terms.\nEscape sequences are permitted in the terms, and boundary whitespace is ignored.\n\n\nEntries\n[link]\n\n\nTerms should be written in the order of the subtypes. In the below example,\nsingular comes first, and then plural.\n\n\n@name noun\n@sub singular, sg\n@sub plural, pl\n\n\n> chickadee, chickadees\n\n> chicken, chickens\n\n> crow, crows\n\n> dove, doves\n\n> eagle, eagles\n\n> finch, finches\n\n> flamingo, flamingos\n\n\n# ...\n\n\n\n\n\nTemplates\n[link]\n\n\nYou can reuse other entries to create new entries that expand on that information.\nEntries used in this way are called \ntemplates\n.\n\n\nThere are two kinds of templates: \nentry templates\n and \ndummy templates\n.\n\n\nEntry templates\n[link]\n\n\nEntry templates exist as actual entries in the table and are assigned an identifier by which they can\nbe referred to by other entries looking to expand on them.\n\n\nThis identifier is assigned using the \n@id\n directive just before the entry.\n\n\n@id penguin\n> penguin, penguins\n    - class bird, penguin, flightless\n\n\n\n\n\nDummy templates\n[link]\n\n\nDummy templates do not exist as entries, and only serve as a basis on which to build other entries.\nTo mark an entry template as a dummy, insert the \n@dummy\n directive before the entry.\n\n\n@id penguin\n@dummy\n> penguin, penguins\n    - class bird, penguin, flightless\n\n\n\n\n\nUsing templates\n[link]\n\n\nTo use a template in another entry, one of two methods can be used.\nThe first is to use the \n@using\n directive before the entry, passing in the name of the template.\n\n\n@using penguin\n> erect-crested [], erect-crested []\n\n\n\n\n\nYou will notice something strange going on in the terms: a pair of brackets has appeared after the term text.\nThis pair of brackets inserts the text from the template's corresponding term into the new term. \n\n\nThe above is equivalent to the following entry:\n\n\n> erect-created penguin, erect-created penguins\n    - class bird, penguin, flightless\n\n\n\n\n\n\n\nNote\n\n\nWhen you use \n@using\n, the new entry also inherits all of the template's properties.\n\n\n\n\nOther ways to use templates\n[link]\n\n\nThe other way to use templates is to reference them by name from inside the terms. This is useful especially\nif you need more than one template, or you want to use a term that doesn't correspond with the inheriting term's\nsubtype. You don't need a \n@using\n directive to do this.\n\n\nThe following template reference structures may be used anywhere inside a term:\n\n\n[template-id]           # Inserts template's corresponding term\n[template-id.index]     # Inserts tempalte's term corresponding with the index\n[template-id.subtype]   # Inserts template's term corresponding with the subtype\n\n\n\n\n\nPhrasals\n[link]\n\n\nThe position of the phrasal complement can be indicated using the \n+\n symbol in a term.\n\n\n> set + on fire, setting + on fire, set + on fire, sets + on fire, ...\n\n\n\n\n\nEntry properties\n[link]\n\n\nEntries can be assigned properties by creating a line below the entry starting with \n-\n, followed\nby a key-value pair separated with a space. There are several properties you can assign to entries.\nA simple property that adds a class looks like this:\n\n\n> dog, dogs\n    - class mammal\n\n\n\n\n\nclass\n[link]\n\n\nThe \nclass\n property assigns classes to an entry. You can assign multiple classes separated by commas;\nfor example, the noun \nspear\n might have an entry that looks like this:\n\n\n> spear, spears\n    - class weapon, sharp, long\n\n\n\n\n\n\n\nNote\n\n\nClass names may only contain letters, numbers, and underscores.\n\n\n\n\nThere is another way to assign classes using a special directive, which is discussed further on.\n\n\nweight\n[link]\n\n\nThe \nweight\n property affects the weight of an entry, such that higher weight values make the entry\nmore likely to be chosen by a query (as long as the entry passes all filters on the query).\nThe weight value must be a decimal number greater than zero.\n\n\nAn entry with no \nweight\n property is given a weight of 1 by default.\n\n\n@name name\n\n> John\n> Bob\n> Paul\n> Gary\n> David\n    - weight 0.1 #Appears 10% as often as the others\n\n\n\n\n\npron\n[link]\n\n\nThe \npron\n property assigns pronunciation data to the terms and requires the same number of values as terms.\nThis data is used by the rhyming engine.\n\n\nPronunciation data is expected in X-SAMPA format.\n\n\n> baseball, baseballs\n    - class ball\n    - pron b\\\"eIs b\\\"Ol, b\\\"eIs b\\\"Olz\n\n\n\n\n\nMetadata properties\n[link]\n\n\nYou can also assign a property of any name to add special metadata not covered by the built-in properties.\nRant will store this information as a key/value pair in the entry. Multiple values are stored as an array.\n\n\n> dog, dogs\n    - class mammal\n    - species Canis lupus\n> cat, cats\n    - class mammal\n    - species Felis catus\n\n\n\n\n\nClass ranges\n[link]\n\n\nIt is possible to assign one or more classes to a section of entries using the \n@class\n and \n@endclass\n directives to create a \nclass range\n.\n\n\nThe \n@class\n directive begins a class range and is passed the classes you want to apply to the entries within the range.\n\n\nThe \n@endclass\n directive takes no arguments and marks the end of the range.\n\n\n@class penguin, bird, flightless\n    > adelie penguin, adelie penguins\n    > African penguin, African penguins\n    > chinstrap penguin, chinstrap penguins\n    > emperor penguin, emperor penguins\n    > erect-crested penguin, erect-crested penguins\n    > fairy penguin, fairy penguins\n    > gentoo penguin, gentoo penguins\n    > Humboldt penguin, Humboldt penguins\n    > king penguin, king penguins\n    > macaroni penguin, macaroni penguins\n    > Magellanic penguin, Magellanic penguins\n    > penguin, penguins\n    > rockhopper penguin, rockhopper penguins\n    > yellow-eyed penguin, yellow-eyed penguins\n@endclass\n\n\n\n\n\n\n\nTip\n\n\nClass ranges can also be nested to create even more specific classifications.",
            "title": "Writing Dictionaries"
        },
        {
            "location": "/howto/writing-dictionaries/#terminology",
            "text": "Tables are split into two main sections: the  header  and the  lexicon .  The header comes first and describes the table's name, layout, and any special properties it may have.\nIt consists of a number of  directives . Directives are one-line instructions that start with an  @  symbol.\nDirectives can also appear in the lexicon, but we'll discuss header directives first.  Directives can take arguments, which are separated by commas. You may also use escape sequences like  \\n ,  \\uxxxx , and  \\Uxxxxxxx .",
            "title": "Terminology"
        },
        {
            "location": "/howto/writing-dictionaries/#comments",
            "text": "Table comments are just like Rant comments, starting with  #  and taking up the rest of the line. They may not appear within a quoted argument.  @name adj\n@sub regular    # Normal form\n@sub com        # Comparative form\n@sub sup        # Superlative form",
            "title": "Comments"
        },
        {
            "location": "/howto/writing-dictionaries/#header-structure",
            "text": "",
            "title": "Header structure"
        },
        {
            "location": "/howto/writing-dictionaries/#name",
            "text": "At minimum, a table expects a name. This is specified with the  @name  directive.  @name noun\n\n# ...",
            "title": "Name"
        },
        {
            "location": "/howto/writing-dictionaries/#subtypes",
            "text": "Subtypes are strings that point to specific term numbers within an entry and can be used to access different variants of a word, such as\nverb conjugations, noun forms, adjective forms, and other useful information.  You can add a subtype using the  @sub  directive. By default, Rant adds one subtype to your table, so you don't need one if your entries\nonly have one form.  @name noun @sub singular, sg @sub plural, pl  Each @sub directive assigns subtypes to a specific term, which corresponds to the number of the  @sub  directive.\nIn the above case, the first term has the subtypes  singular  and  sg , while the second term has the subtypes  plural  and  pl .\nA term can have as many subtypes as you want, as long as it has at least one.  If you'd like to sort your  @sub  directives independent of the term order, you can indicate the term index before the subtype name\nto override the default behavior.  This header is equivalent to the one above:  @name noun\n@sub 1, plural, pl\n@sub 0, singular, sg",
            "title": "Subtypes"
        },
        {
            "location": "/howto/writing-dictionaries/#hidden-classes",
            "text": "If you want specific classes to be excluded from the query results unless explicitly requested, you can indicate these classes\nusing the  @hide  directive. Rant always implicitly hides the  nsfw  class for you.  @name verb\n@sub present, imperative\n@sub gerund, ing\n@sub simple_past, ed\n@sub third_person, third_person_present, s\n@sub agent, er\n@sub past_participle, pp\n@sub nominalization, nom\n@sub plural_nominalization, noms @hide visual, speech",
            "title": "Hidden classes"
        },
        {
            "location": "/howto/writing-dictionaries/#corpus-structure",
            "text": "The main component of the corpus is, of course, its entries.\nAn entry occupies a single line and starts with the  >  symbol, followed by comma-separated terms.\nEscape sequences are permitted in the terms, and boundary whitespace is ignored.",
            "title": "Corpus structure"
        },
        {
            "location": "/howto/writing-dictionaries/#entries",
            "text": "Terms should be written in the order of the subtypes. In the below example,\nsingular comes first, and then plural.  @name noun\n@sub singular, sg\n@sub plural, pl > chickadee, chickadees > chicken, chickens > crow, crows > dove, doves > eagle, eagles > finch, finches > flamingo, flamingos \n# ...",
            "title": "Entries"
        },
        {
            "location": "/howto/writing-dictionaries/#templates",
            "text": "You can reuse other entries to create new entries that expand on that information.\nEntries used in this way are called  templates .  There are two kinds of templates:  entry templates  and  dummy templates .",
            "title": "Templates"
        },
        {
            "location": "/howto/writing-dictionaries/#entry-templates",
            "text": "Entry templates exist as actual entries in the table and are assigned an identifier by which they can\nbe referred to by other entries looking to expand on them.  This identifier is assigned using the  @id  directive just before the entry.  @id penguin\n> penguin, penguins\n    - class bird, penguin, flightless",
            "title": "Entry templates"
        },
        {
            "location": "/howto/writing-dictionaries/#dummy-templates",
            "text": "Dummy templates do not exist as entries, and only serve as a basis on which to build other entries.\nTo mark an entry template as a dummy, insert the  @dummy  directive before the entry.  @id penguin\n@dummy\n> penguin, penguins\n    - class bird, penguin, flightless",
            "title": "Dummy templates"
        },
        {
            "location": "/howto/writing-dictionaries/#using-templates",
            "text": "To use a template in another entry, one of two methods can be used.\nThe first is to use the  @using  directive before the entry, passing in the name of the template.  @using penguin\n> erect-crested [], erect-crested []  You will notice something strange going on in the terms: a pair of brackets has appeared after the term text.\nThis pair of brackets inserts the text from the template's corresponding term into the new term.   The above is equivalent to the following entry:  > erect-created penguin, erect-created penguins\n    - class bird, penguin, flightless   Note  When you use  @using , the new entry also inherits all of the template's properties.",
            "title": "Using templates"
        },
        {
            "location": "/howto/writing-dictionaries/#other-ways-to-use-templates",
            "text": "The other way to use templates is to reference them by name from inside the terms. This is useful especially\nif you need more than one template, or you want to use a term that doesn't correspond with the inheriting term's\nsubtype. You don't need a  @using  directive to do this.  The following template reference structures may be used anywhere inside a term:  [template-id]           # Inserts template's corresponding term\n[template-id.index]     # Inserts tempalte's term corresponding with the index\n[template-id.subtype]   # Inserts template's term corresponding with the subtype",
            "title": "Other ways to use templates"
        },
        {
            "location": "/howto/writing-dictionaries/#phrasals",
            "text": "The position of the phrasal complement can be indicated using the  +  symbol in a term.  > set + on fire, setting + on fire, set + on fire, sets + on fire, ...",
            "title": "Phrasals"
        },
        {
            "location": "/howto/writing-dictionaries/#entry-properties",
            "text": "Entries can be assigned properties by creating a line below the entry starting with  - , followed\nby a key-value pair separated with a space. There are several properties you can assign to entries.\nA simple property that adds a class looks like this:  > dog, dogs\n    - class mammal",
            "title": "Entry properties"
        },
        {
            "location": "/howto/writing-dictionaries/#class",
            "text": "The  class  property assigns classes to an entry. You can assign multiple classes separated by commas;\nfor example, the noun  spear  might have an entry that looks like this:  > spear, spears\n    - class weapon, sharp, long   Note  Class names may only contain letters, numbers, and underscores.   There is another way to assign classes using a special directive, which is discussed further on.",
            "title": "class"
        },
        {
            "location": "/howto/writing-dictionaries/#weight",
            "text": "The  weight  property affects the weight of an entry, such that higher weight values make the entry\nmore likely to be chosen by a query (as long as the entry passes all filters on the query).\nThe weight value must be a decimal number greater than zero.  An entry with no  weight  property is given a weight of 1 by default.  @name name\n\n> John\n> Bob\n> Paul\n> Gary\n> David\n    - weight 0.1 #Appears 10% as often as the others",
            "title": "weight"
        },
        {
            "location": "/howto/writing-dictionaries/#pron",
            "text": "The  pron  property assigns pronunciation data to the terms and requires the same number of values as terms.\nThis data is used by the rhyming engine.  Pronunciation data is expected in X-SAMPA format.  > baseball, baseballs\n    - class ball\n    - pron b\\\"eIs b\\\"Ol, b\\\"eIs b\\\"Olz",
            "title": "pron"
        },
        {
            "location": "/howto/writing-dictionaries/#metadata-properties",
            "text": "You can also assign a property of any name to add special metadata not covered by the built-in properties.\nRant will store this information as a key/value pair in the entry. Multiple values are stored as an array.  > dog, dogs\n    - class mammal\n    - species Canis lupus\n> cat, cats\n    - class mammal\n    - species Felis catus",
            "title": "Metadata properties"
        },
        {
            "location": "/howto/writing-dictionaries/#class-ranges",
            "text": "It is possible to assign one or more classes to a section of entries using the  @class  and  @endclass  directives to create a  class range .  The  @class  directive begins a class range and is passed the classes you want to apply to the entries within the range.  The  @endclass  directive takes no arguments and marks the end of the range.  @class penguin, bird, flightless\n    > adelie penguin, adelie penguins\n    > African penguin, African penguins\n    > chinstrap penguin, chinstrap penguins\n    > emperor penguin, emperor penguins\n    > erect-crested penguin, erect-crested penguins\n    > fairy penguin, fairy penguins\n    > gentoo penguin, gentoo penguins\n    > Humboldt penguin, Humboldt penguins\n    > king penguin, king penguins\n    > macaroni penguin, macaroni penguins\n    > Magellanic penguin, Magellanic penguins\n    > penguin, penguins\n    > rockhopper penguin, rockhopper penguins\n    > yellow-eyed penguin, yellow-eyed penguins\n@endclass   Tip  Class ranges can also be nested to create even more specific classifications.",
            "title": "Class ranges"
        },
        {
            "location": "/howto/packages/",
            "text": "Packages are archives of resources, such as programs and tables, that can be packed into a single file with the extension \n.rantpkg\n.\n\n\nBy loading a package into Rant, all of the programs and tables contained within it become available for use by the associated \nRantEngine\n.\n\n\nAuthoring packages\n[link]\n\n\nA package is created by placing all of the desired resources into a common folder along with a \nrantpkg.json\n file containing\ninformation that tells the packer about metadata, dependencies, and where to place the built file.\n\n\nThe following resource filetypes are currently supported:\n\n\n\n\n.rant\n\n\n.rantpgm\n\n\n.table\n\n\n\n\nThe package metadata file\n[link]\n\n\nThe required \nrantpkg.json\n file contains a JSON object with the following information:\n\n\n{\n\n  \n\"title\"\n:\n \n\"Your Package Name\"\n,\n\n  \n\"id\"\n:\n \n\"YourPackageId\"\n,\n\n  \n\"version\"\n:\n \n\"1.0.0\"\n,\n\n  \n\"tags\"\n:\n \n[\n\"rantionary\"\n,\n \n\"official\"\n,\n \n\"dictionary\"\n],\n\n  \n\"authors\"\n:\n \n[\n\"Nicholas Fleck\"\n,\n \n\"Andrew Rogers\"\n],\n\n  \n\"description\"\n:\n \n\"Description of your package\"\n,\n\n  \n\"out\"\n:\n \n\"relative/save/path\"\n,\n\n  \n\"dependencies\"\n:\n \n[\n\n      \n{\n\n          \n\"id\"\n:\n \n\"DependencyId\"\n,\n\n          \n\"version\"\n:\n \n\"1.0.0\"\n,\n\n          \n\"allow-newer\"\n:\n \ntrue\n\n      \n}\n\n  \n]\n\n\n}\n\n\n\n\n\n\nPacking\n[link]\n\n\nTo create the package file, use the Rant Command Line Tools (included in the main repository) to run the following command in the package content folder:\n\n\nrct pack\n\n\n\n\n\nYou can override the output path specified in \nrantpkg.json\n by using the \n-out\n parameter.\n\n\nrct pack -out \"alternate/save/path\"\n\n\n\n\n\nLoading packages\n[link]\n\n\nTo load a package, use the \nRantEngine.LoadPackage\n method.\n\n\nvar\n \nrant\n \n=\n \nnew\n \nRantEngine\n();\n\n\nrant\n.\nLoadPackage\n(\n\"Rantionary.rantpkg\"\n);\n\n\n\n\n\n\nAfterwards, you may access your packed patterns by passing their relative path in the package into the \nRantEngine.DoPackaged\n method.\nNo file extension is required.\n\n\nvar\n \noutput\n \n=\n \nrant\n.\nDoPackaged\n(\n\"dialogue/greetings/hello\"\n);",
            "title": "Packages"
        },
        {
            "location": "/howto/packages/#authoring-packages",
            "text": "A package is created by placing all of the desired resources into a common folder along with a  rantpkg.json  file containing\ninformation that tells the packer about metadata, dependencies, and where to place the built file.  The following resource filetypes are currently supported:   .rant  .rantpgm  .table",
            "title": "Authoring packages"
        },
        {
            "location": "/howto/packages/#the-package-metadata-file",
            "text": "The required  rantpkg.json  file contains a JSON object with the following information:  { \n   \"title\" :   \"Your Package Name\" , \n   \"id\" :   \"YourPackageId\" , \n   \"version\" :   \"1.0.0\" , \n   \"tags\" :   [ \"rantionary\" ,   \"official\" ,   \"dictionary\" ], \n   \"authors\" :   [ \"Nicholas Fleck\" ,   \"Andrew Rogers\" ], \n   \"description\" :   \"Description of your package\" , \n   \"out\" :   \"relative/save/path\" , \n   \"dependencies\" :   [ \n       { \n           \"id\" :   \"DependencyId\" , \n           \"version\" :   \"1.0.0\" , \n           \"allow-newer\" :   true \n       } \n   ]  }",
            "title": "The package metadata file"
        },
        {
            "location": "/howto/packages/#packing",
            "text": "To create the package file, use the Rant Command Line Tools (included in the main repository) to run the following command in the package content folder:  rct pack  You can override the output path specified in  rantpkg.json  by using the  -out  parameter.  rct pack -out \"alternate/save/path\"",
            "title": "Packing"
        },
        {
            "location": "/howto/packages/#loading-packages",
            "text": "To load a package, use the  RantEngine.LoadPackage  method.  var   rant   =   new   RantEngine ();  rant . LoadPackage ( \"Rantionary.rantpkg\" );   Afterwards, you may access your packed patterns by passing their relative path in the package into the  RantEngine.DoPackaged  method.\nNo file extension is required.  var   output   =   rant . DoPackaged ( \"dialogue/greetings/hello\" );",
            "title": "Loading packages"
        },
        {
            "location": "/howto/formatting/",
            "text": "Rant features a robust formatting engine that includes multiple configurable options for automatically and manually formatting output.\nThese options include multilingual number verbalization, capitalization, number formatting, and conversion to other character forms like fullwidth.\n\n\nThis article gives a brief summary of each of the major features of the formatting engine, as well as examples of how to use them.\n\n\nCaptalization\n[link]\n\n\nOutput can be automatically converted to one of numerous capitalization types using the \n[case]\n function.\nWhen the function is called, all printed text after the function call will be formatted according to the specified mode.\n\n\nTo illustrate this effect, see the below example, which contains three uncapitalized sentences. The last two are separated from the first \nby a call to \n[case]\n that changes the capitalization for the second and third sentences.\n\n\nthis sentence is in lowercase and will not be formatted.\\n\n[case:sentence]\nyou can see this sentence starts with a capital letter. this one, too!\n\n\n\n\n\nThis produces the following output:\n\n\nthis sentene is in lowercase and will not be formatted.\nYou can see this sentence starts with a capital letter. This one, too!\n\n\n\n\n\nNumber formatting\n[link]\n\n\nRant is also able to automatically format numeric outputs from functions. To do this, the \n[numfmt]\n function\nis used. It can format numbers to hexadecimal, Roman numerals, binary, and more. Below is an example demonstrating just a few of the posssibilities:\n\n\n[numfmt:verbal][rs:10;,\\s]{[rn]}\\n\n[numfmt:roman-upper][rs:10;,\\s]{[rn]}\\n\n[numfmt:binary][rs:10;,\\s]{[rn]}\\n\n\n\n\n\n\nEach of these lines counts to ten in a different format, resulting in the following output:\n\n\none, two, three, four, five, six, seven, eight, nine, ten\nI, II, III, IV, V, VI, VII, VIII, IX, X\n1, 10, 11, 100, 101, 110, 111, 1000, 1001, 1010\n\n\n\n\n\nThe \n[numfmt]\n function also has another overload for manual formatting that only operates on a specified input.\n\n\n[numfmt:verbal;[n:10]] = [n:10]\n\n\n\n\n\nten = 10\n\n\n\n\n\nCharacter format\n[link]\n\n\nAlphanumeric characters can be automatically converted to other forms using the \n[txtfmt]\n function\nto change the character formatting mode. Here is an example that converts a string to fullwidth:\n\n\n[case:upper]\n[txtfmt:fullwidth]\naesthetic\n\n\n\n\n\n\uff21\uff25\uff33\uff34\uff28\uff25\uff34\uff29\uff23",
            "title": "Formatting"
        },
        {
            "location": "/howto/formatting/#captalization",
            "text": "Output can be automatically converted to one of numerous capitalization types using the  [case]  function.\nWhen the function is called, all printed text after the function call will be formatted according to the specified mode.  To illustrate this effect, see the below example, which contains three uncapitalized sentences. The last two are separated from the first \nby a call to  [case]  that changes the capitalization for the second and third sentences.  this sentence is in lowercase and will not be formatted.\\n\n[case:sentence]\nyou can see this sentence starts with a capital letter. this one, too!  This produces the following output:  this sentene is in lowercase and will not be formatted.\nYou can see this sentence starts with a capital letter. This one, too!",
            "title": "Captalization"
        },
        {
            "location": "/howto/formatting/#number-formatting",
            "text": "Rant is also able to automatically format numeric outputs from functions. To do this, the  [numfmt]  function\nis used. It can format numbers to hexadecimal, Roman numerals, binary, and more. Below is an example demonstrating just a few of the posssibilities:  [numfmt:verbal][rs:10;,\\s]{[rn]}\\n\n[numfmt:roman-upper][rs:10;,\\s]{[rn]}\\n\n[numfmt:binary][rs:10;,\\s]{[rn]}\\n  Each of these lines counts to ten in a different format, resulting in the following output:  one, two, three, four, five, six, seven, eight, nine, ten\nI, II, III, IV, V, VI, VII, VIII, IX, X\n1, 10, 11, 100, 101, 110, 111, 1000, 1001, 1010  The  [numfmt]  function also has another overload for manual formatting that only operates on a specified input.  [numfmt:verbal;[n:10]] = [n:10]  ten = 10",
            "title": "Number formatting"
        },
        {
            "location": "/howto/formatting/#character-format",
            "text": "Alphanumeric characters can be automatically converted to other forms using the  [txtfmt]  function\nto change the character formatting mode. Here is an example that converts a string to fullwidth:  [case:upper]\n[txtfmt:fullwidth]\naesthetic  \uff21\uff25\uff33\uff34\uff28\uff25\uff34\uff29\uff23",
            "title": "Character format"
        },
        {
            "location": "/howto/unity-setup/",
            "text": "This article demonstrates how to install Rant into a Unity project and get patterns\nrunning with a simple script on a UI element.\n\n\nYou will need to be using \nUnity 2017.1.0\n (beta or newer) in order for Rant to work.\n\n\nStep 1: Get Rant\n[link]\n\n\nYou can acquire Rant by downloading a pre-built binary, or by compiling it yourself.\n\n\nDownload binary\n[link]\n\n\nYou can download the latest build from \nAppVeyor\n.\n\n\nFrom source\n[link]\n\n\nTo build from source, choose the \nRelease\n build configuration within Visual Studio and build the project.\nYou can then find the built DLL at \nRant/bin/Release/Rant.dll\n.\n\n\n\n\nStep 2: Add Rant to Unity project\n[link]\n\n\nAdd Rant.Unity.dll to your Unity project's Assets folder and it will be automatically\nimported as a reference to the project. \n\n\n\n\nMake sure your \nScripting Runtime Version\n and \nApi Compatibility Level\n are set to \n.NET 4.6\n.\nOtherwise, you will encounter import errors.\n\n\n\n\nYou can find these settings in \nEdit > Project Settings > Player\n.\n\n\nAdding Rant resources\n[link]\n\n\nRant can load resources using streaming assets, which are files that are copied along with the player\ninstead of packaged with the rest of the assets. Simply drop your .rantpkg files in your StreamingAssets\nfolder and load them from the path given by \nApplication.streamingAssetsPath\n.\n\n\nAlternatively, if you want combine your .rantpkg files with the rest of your assets, \nyou can add them to your Resources folder and then load them with \nRantPackage.Load(System.Stream)\n:\n\n\nvar\n \nasset\n \n=\n \nResources\n.\nLoad\n(\n\"MyPackageName\"\n)\n \nas\n \nTextAsset\n;\n\n\nvar\n \nstream\n \n=\n \nnew\n \nMemoryStream\n(\nasset\n.\nbytes\n);\n\n\nvar\n \npackage\n \n=\n \nRantPackage\n.\nLoad\n(\nstream\n);\n\n\n\n\n\n\n\n\nNote\n\n\nIf you're importing packages into your Resources folder,\nyou must change the extension from \".rantpkg\" to \".bytes\" in order for Unity to import the asset.\n\n\n\n\nStep 3: Set up a scene\n[link]\n\n\nLet's set up a basic demo to show how Rant can be used from a GameObject.\n\n\nTo start, creates a blank 2D scene and add a UI Canvas with a Text element.\n\n\n\n\nOnce you're happy with your UI, add a new script to your Text element and \nname it \nRantText\n. Copy the following code to the script:\n\n\nusing\n \nSystem.IO\n;\n\n\nusing\n \nUnityEngine\n;\n\n\nusing\n \nUnityEngine.UI\n;\n\n\nusing\n \nRant\n;\n\n\nusing\n \nRant.Resources\n;\n\n\n\npublic\n \nclass\n \nRantText\n \n:\n \nMonoBehaviour\n \n\n{\n\n    \nprivate\n \nRantEngine\n \nrant\n;\n\n\n\n    [TextArea]\n\n    \npublic\n \nstring\n \nPattern\n \n=\n \n\"The <adj> <adj-appearance> <noun-animal> <verb.ed-walk> over the <adj> <noun-animal>.\"\n;\n\n\n    \nvoid\n \nStart\n()\n \n    \n{\n\n        \n// Load Rant and package\n\n        \nrant\n \n=\n \nnew\n \nRantEngine\n();\n\n        \nvar\n \npkgAsset\n \n=\n \nResources\n.\nLoad\n(\n\"Rant/Rantionary-3.0.0\"\n)\n \nas\n \nTextAsset\n;\n\n        \nusing\n(\nvar\n \npkgStream\n \n=\n \nnew\n \nMemoryStream\n(\npkgAsset\n.\nbytes\n))\n\n        \n{\n\n            \nrant\n.\nLoadPackage\n(\nRantPackage\n.\nLoad\n(\npkgStream\n));\n\n        \n}\n\n\n        \n// Run pattern and set UI text to output\n\n        \nvar\n \ntext\n \n=\n \nGetComponent\n<\nText\n>();\n\n        \nvar\n \npgm\n \n=\n \nRantProgram\n.\nCompileString\n(\nPattern\n);\n\n        \ntext\n.\ntext\n \n=\n \nrant\n.\nDo\n(\npgm\n).\nMain\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\nThis script assumes you have a Rant package in your Resources folder.\nReplace the package resource path with the one corresponding to your package.\nYou may simply omit the package-loading code if you don't have a package on hand to use.\n\n\nThe Inspector should now show your component with a Pattern field, which you can use to customize the pattern\npassed to Rant.\n\n\n\n\n\n\nImportant\n\n\nAlthough engine and package loading is handled in the Start() method here, this is simply for demonstration;\nyou should handle RantEngine initialization and package loading \nonly once\n and share the RantEngine between all \ncomponents that need it, rather than loading a new engine for each component like we do here.\n\n\n\n\nStep 4: Test it out\n[link]\n\n\nRun the game and you should see the UI text change to a randomized output:\n\n\n\n\nCongrats! You got Rant working in Unity. Where will you take it from here...?\n\n\nA few ideas for further experimentation:\n\n\n\n\nModify the script to run a serial pattern (using \nDoSerial\n) and have the script cycle through a number of\noutputs with a time interval.\n\n\nUse channel names to determine the component properties overwritten by the output.\n\n\nUse Rant to generate numbers, colors, and other useful properties!\n\n\n\n\nPass component field values as Rant variables and use them in a pattern to affect the output. \n\n\n(e.g. Generate a dynamic status message based on the player's current health.)",
            "title": "Running in Unity"
        },
        {
            "location": "/howto/unity-setup/#step-1-get-rant",
            "text": "You can acquire Rant by downloading a pre-built binary, or by compiling it yourself.",
            "title": "Step 1: Get Rant"
        },
        {
            "location": "/howto/unity-setup/#download-binary",
            "text": "You can download the latest build from  AppVeyor .",
            "title": "Download binary"
        },
        {
            "location": "/howto/unity-setup/#from-source",
            "text": "To build from source, choose the  Release  build configuration within Visual Studio and build the project.\nYou can then find the built DLL at  Rant/bin/Release/Rant.dll .",
            "title": "From source"
        },
        {
            "location": "/howto/unity-setup/#step-2-add-rant-to-unity-project",
            "text": "Add Rant.Unity.dll to your Unity project's Assets folder and it will be automatically\nimported as a reference to the project.    Make sure your  Scripting Runtime Version  and  Api Compatibility Level  are set to  .NET 4.6 .\nOtherwise, you will encounter import errors.   You can find these settings in  Edit > Project Settings > Player .",
            "title": "Step 2: Add Rant to Unity project"
        },
        {
            "location": "/howto/unity-setup/#adding-rant-resources",
            "text": "Rant can load resources using streaming assets, which are files that are copied along with the player\ninstead of packaged with the rest of the assets. Simply drop your .rantpkg files in your StreamingAssets\nfolder and load them from the path given by  Application.streamingAssetsPath .  Alternatively, if you want combine your .rantpkg files with the rest of your assets, \nyou can add them to your Resources folder and then load them with  RantPackage.Load(System.Stream) :  var   asset   =   Resources . Load ( \"MyPackageName\" )   as   TextAsset ;  var   stream   =   new   MemoryStream ( asset . bytes );  var   package   =   RantPackage . Load ( stream );    Note  If you're importing packages into your Resources folder,\nyou must change the extension from \".rantpkg\" to \".bytes\" in order for Unity to import the asset.",
            "title": "Adding Rant resources"
        },
        {
            "location": "/howto/unity-setup/#step-3-set-up-a-scene",
            "text": "Let's set up a basic demo to show how Rant can be used from a GameObject.  To start, creates a blank 2D scene and add a UI Canvas with a Text element.   Once you're happy with your UI, add a new script to your Text element and \nname it  RantText . Copy the following code to the script:  using   System.IO ;  using   UnityEngine ;  using   UnityEngine.UI ;  using   Rant ;  using   Rant.Resources ;  public   class   RantText   :   MonoBehaviour   { \n     private   RantEngine   rant ;      [TextArea] \n     public   string   Pattern   =   \"The <adj> <adj-appearance> <noun-animal> <verb.ed-walk> over the <adj> <noun-animal>.\" ; \n\n     void   Start ()  \n     { \n         // Load Rant and package \n         rant   =   new   RantEngine (); \n         var   pkgAsset   =   Resources . Load ( \"Rant/Rantionary-3.0.0\" )   as   TextAsset ; \n         using ( var   pkgStream   =   new   MemoryStream ( pkgAsset . bytes )) \n         { \n             rant . LoadPackage ( RantPackage . Load ( pkgStream )); \n         } \n\n         // Run pattern and set UI text to output \n         var   text   =   GetComponent < Text >(); \n         var   pgm   =   RantProgram . CompileString ( Pattern ); \n         text . text   =   rant . Do ( pgm ). Main ; \n     }  }   This script assumes you have a Rant package in your Resources folder.\nReplace the package resource path with the one corresponding to your package.\nYou may simply omit the package-loading code if you don't have a package on hand to use.  The Inspector should now show your component with a Pattern field, which you can use to customize the pattern\npassed to Rant.    Important  Although engine and package loading is handled in the Start() method here, this is simply for demonstration;\nyou should handle RantEngine initialization and package loading  only once  and share the RantEngine between all \ncomponents that need it, rather than loading a new engine for each component like we do here.",
            "title": "Step 3: Set up a scene"
        },
        {
            "location": "/howto/unity-setup/#step-4-test-it-out",
            "text": "Run the game and you should see the UI text change to a randomized output:   Congrats! You got Rant working in Unity. Where will you take it from here...?  A few ideas for further experimentation:   Modify the script to run a serial pattern (using  DoSerial ) and have the script cycle through a number of\noutputs with a time interval.  Use channel names to determine the component properties overwritten by the output.  Use Rant to generate numbers, colors, and other useful properties!   Pass component field values as Rant variables and use them in a pattern to affect the output.   (e.g. Generate a dynamic status message based on the player's current health.)",
            "title": "Step 4: Test it out"
        },
        {
            "location": "/howto/rct/",
            "text": "Rant includes a command-line utility, rct.exe, to simplify the process of building packages and programs.\n\n\nCommands\n[link]\n\n\nRCT includes the following commands:\n\n\npack\n[link]\n\n\nThe \"pack\" command is used to build packages. See the \npackages\n page for a guide on how to set up your package files for building.\n\n\nUsage: rct pack [-out ...] [-version ...] [--no-compress] [path]\n\nParameters:\n  -out                           Output path for package.\n  -version                       Overrides the package version string in rantpkg.json.\n  --no-compress                  Indicates that the package content should not be compressed.\n\n\n\n\n\nbuild\n[link]\n\n\nThe \"build\" command compiles .rant pattern files into .rantpgm files.\n\n\nUsage: rct build path\n\nParameters:\n(None)\n\n\n\n\n\nfdocs\n[link]\n\n\nGenerates a Rant function reference document in Markdown format.\n\n\nUsage: rct fdocs [-out ...]\n\nParameters:\n  -out                           Indicates the output path for the generated file.",
            "title": "Command-Line Tools"
        },
        {
            "location": "/howto/rct/#commands",
            "text": "RCT includes the following commands:",
            "title": "Commands"
        },
        {
            "location": "/howto/rct/#pack",
            "text": "The \"pack\" command is used to build packages. See the  packages  page for a guide on how to set up your package files for building.  Usage: rct pack [-out ...] [-version ...] [--no-compress] [path]\n\nParameters:\n  -out                           Output path for package.\n  -version                       Overrides the package version string in rantpkg.json.\n  --no-compress                  Indicates that the package content should not be compressed.",
            "title": "pack"
        },
        {
            "location": "/howto/rct/#build",
            "text": "The \"build\" command compiles .rant pattern files into .rantpgm files.  Usage: rct build path\n\nParameters:\n(None)",
            "title": "build"
        },
        {
            "location": "/howto/rct/#fdocs",
            "text": "Generates a Rant function reference document in Markdown format.  Usage: rct fdocs [-out ...]\n\nParameters:\n  -out                           Indicates the output path for the generated file.",
            "title": "fdocs"
        },
        {
            "location": "/tutorials/rant-args/",
            "text": "When running a Rant program, you can pass named arguments that can be used like temporary variables within the scope of the pattern.\nThis can be utilized in games with Rant integration to pass game state information, like player health, quest states, or the weather,\nstraight to the pattern so that its behavior can adjust accordingly.\n\n\nArguments are created using the \nRantProgramArgs\n class. These arguments can then be accessed via the \n[in]\n function.\n\n\nMethod 1: Adding key/value pairs\n[link]\n\n\nThe least-involved method for creating arguments is to simply instantiate a new \nRantProgramArgs\n instance,\nthen pass it to the \nRantEngine.Do\n method.\n\n\nvar\n \nrant\n \n=\n \nnew\n \nRantEngine\n();\n\n\nvar\n \npgm\n \n=\n \nRantProgram\n.\nCompileString\n(\n@\"Hello, [in:name]!\"\n);\n\n\nvar\n \nrargs\n \n=\n \nnew\n \nRantProgramArgs\n();\n\n\nrargs\n[\n\"name\"\n]\n \n=\n \n\"Nicholas\"\n;\n\n\nvar\n \noutput\n \n=\n \nrant\n.\nDo\n(\npgm\n,\n \nargs\n:\n \nrargs\n);\n\n\n\nConsole\n.\nWriteLine\n(\noutput\n);\n\n\n// Output: \"Hello, Nicholas!\"\n\n\n\n\n\n\nMethod 2: Object with RantArgAttributes\n[link]\n\n\nA \nRantProgramArgs\n instance can also be created from another object, which will search for string properties and\nturn them into arguments, using the property names as the argument names.\n\n\nClass properties can be decorated with the \nRantArgAttribute\n to customize the argument name taken from the property.\n\n\nThe following is an example of how this feature is used to turn an instance of a custom class into a set of arguments,\nwhich is then passed to Rant and accessed via \n[in]\n. \n\n\nClass\n\n\nclass\n \nPerson\n\n\n{\n\n\n    [RantArg(\"first-name\")]\n\n    \npublic\n \nstring\n \nFirstName\n \n{\n \nget\n;\n \n}\n\n\n    [RantArg(\"last-name\")]\n\n    \npublic\n \nstring\n \nLastName\n \n{\n \nget\n;\n \n}\n\n\n    [RantArg(\"age\")]\n\n    \npublic\n \nint\n \nAge\n \n{\n \nget\n;\n \n}\n\n\n    \npublic\n \nPerson\n(\nstring\n \nfirstName\n,\n \nstring\n \nlastName\n,\n \nint\n \nage\n)\n\n    \n{\n\n        \nFirstName\n \n=\n \nfirstName\n;\n\n        \nLastName\n \n=\n \nlastName\n;\n\n        \nAge\n \n=\n \nage\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\narg-example.rant\n\n\nMy name is [in:first-name] [in:last-name], and I'm\\s\n[if:[lt:[in:age];100];[in:age];ridiculously old].\n\n\n\n\n\nProgram\n\n\nvar\n \nrant\n \n=\n \nnew\n \nRantEngine\n();\n\n\nvar\n \npgm\n \n=\n \nRantProgram\n.\nCompileFile\n(\n\"arg-example.rant\"\n);\n\n\nvar\n \nperson1Args\n \n=\n \nnew\n \nRantProgramArgs\n(\nnew\n \nPerson\n(\n\"Jimmy\"\n,\n \n\"Dipstick\"\n,\n \n33\n));\n\n\nvar\n \nperson2Args\n \n=\n \nnew\n \nRantProgramArgs\n(\nnew\n \nPerson\n(\n\"Old\"\n,\n \n\"Jenkins\"\n,\n \n102\n));\n\n\nConsole\n.\nWriteLine\n(\nrant\n.\nDo\n(\npgm\n,\n \nargs\n:\n \nperson1Args\n));\n\n\nConsole\n.\nWriteLine\n(\nrant\n.\nDo\n(\npgm\n,\n \nargs\n:\n \nperson2Args\n));\n\n\n\n// Output:\n\n\n// My name is Jimmy Dipstick, and I'm 33.\n\n\n// My name is Old Jenkins, and I'm ridiculously old.\n\n\n\n\n\n\nMethod 3: Anonymous object\n[link]\n\n\nAlternatively, anonymous objects can be used to define the argument values. This is the most concise way\nto pass arguments.\n\n\naddition.rant\n\n\n[case:sentence]\n[numfmt:verbal;[n:[in:a]]]\\s\nplus [numfmt:verbal;[n:[in:b]]]\\s\nequals [numfmt:verbal;[add:[in:a];[in:b]]].\n\n\n\n\n\nProgram\n\n\nvar\n \nrant\n \n=\n \nnew\n \nRantEngine\n();\n\n\nvar\n \npgm\n \n=\n \nRantProgram\n.\nCompileFile\n(\n\"addition.rant\"\n);\n\n\nConsole\n.\nWriteLine\n(\nrant\n.\nDo\n(\npgm\n,\n \nargs\n:\n \nnew\n \nRantProgramArgs\n(\nnew\n{\n \na\n \n=\n \n12\n,\n \nb\n \n=\n \n26\n \n})));\n\n\n\n// Output:\n\n\n// Twelve plus twenty-six equals thirty-eight.",
            "title": "Pattern Arguments"
        },
        {
            "location": "/tutorials/rant-args/#method-1-adding-keyvalue-pairs",
            "text": "The least-involved method for creating arguments is to simply instantiate a new  RantProgramArgs  instance,\nthen pass it to the  RantEngine.Do  method.  var   rant   =   new   RantEngine ();  var   pgm   =   RantProgram . CompileString ( @\"Hello, [in:name]!\" );  var   rargs   =   new   RantProgramArgs ();  rargs [ \"name\" ]   =   \"Nicholas\" ;  var   output   =   rant . Do ( pgm ,   args :   rargs );  Console . WriteLine ( output );  // Output: \"Hello, Nicholas!\"",
            "title": "Method 1: Adding key/value pairs"
        },
        {
            "location": "/tutorials/rant-args/#method-2-object-with-rantargattributes",
            "text": "A  RantProgramArgs  instance can also be created from another object, which will search for string properties and\nturn them into arguments, using the property names as the argument names.  Class properties can be decorated with the  RantArgAttribute  to customize the argument name taken from the property.  The following is an example of how this feature is used to turn an instance of a custom class into a set of arguments,\nwhich is then passed to Rant and accessed via  [in] .   Class  class   Person  {      [RantArg(\"first-name\")] \n     public   string   FirstName   {   get ;   }      [RantArg(\"last-name\")] \n     public   string   LastName   {   get ;   }      [RantArg(\"age\")] \n     public   int   Age   {   get ;   } \n\n     public   Person ( string   firstName ,   string   lastName ,   int   age ) \n     { \n         FirstName   =   firstName ; \n         LastName   =   lastName ; \n         Age   =   age ; \n     }  }   arg-example.rant  My name is [in:first-name] [in:last-name], and I'm\\s\n[if:[lt:[in:age];100];[in:age];ridiculously old].  Program  var   rant   =   new   RantEngine ();  var   pgm   =   RantProgram . CompileFile ( \"arg-example.rant\" );  var   person1Args   =   new   RantProgramArgs ( new   Person ( \"Jimmy\" ,   \"Dipstick\" ,   33 ));  var   person2Args   =   new   RantProgramArgs ( new   Person ( \"Old\" ,   \"Jenkins\" ,   102 ));  Console . WriteLine ( rant . Do ( pgm ,   args :   person1Args ));  Console . WriteLine ( rant . Do ( pgm ,   args :   person2Args ));  // Output:  // My name is Jimmy Dipstick, and I'm 33.  // My name is Old Jenkins, and I'm ridiculously old.",
            "title": "Method 2: Object with RantArgAttributes"
        },
        {
            "location": "/tutorials/rant-args/#method-3-anonymous-object",
            "text": "Alternatively, anonymous objects can be used to define the argument values. This is the most concise way\nto pass arguments.  addition.rant  [case:sentence]\n[numfmt:verbal;[n:[in:a]]]\\s\nplus [numfmt:verbal;[n:[in:b]]]\\s\nequals [numfmt:verbal;[add:[in:a];[in:b]]].  Program  var   rant   =   new   RantEngine ();  var   pgm   =   RantProgram . CompileFile ( \"addition.rant\" );  Console . WriteLine ( rant . Do ( pgm ,   args :   new   RantProgramArgs ( new {   a   =   12 ,   b   =   26   })));  // Output:  // Twelve plus twenty-six equals thirty-eight.",
            "title": "Method 3: Anonymous object"
        },
        {
            "location": "/tutorials/variable-access/",
            "text": "Global variables created by Rant programs can be accessed and manipulated\nthrough the Rant API. On this page is a simple example of how to create a\nRant variable, read it from your C# code, and then modify it through \nRantEngine\n.\n\n\nSetting a variable in Rant\n[link]\n\n\nFirst, a string variable is created by running the following pattern:\n\n\n[vs:example;Hello World!]\n\n\n\n\n\nThis can be done with the following C# code:\n\n\nvar\n \nrant\n \n=\n \nnew\n \nRantEngine\n();\n\n\nvar\n \npgmSetVar\n \n=\n \nRantProgram\n.\nCompileString\n(\n@\"[vs:example;Hello World!]\"\n);\n\n\nrant\n.\nDo\n(\npgmSetVar\n);\n\n\n\n\n\n\nAnother pattern can then be used to retrieve the value of the variable:\n\n\nvar\n \npgmPrintVar\n \n=\n \nRantProgram\n.\nCompileString\n(\n@\"[v:example]\"\n);\n\n\nConsole\n.\nWriteLine\n(\nrant\n.\nDo\n(\npgmPrintVar\n).\nMain\n);\n\n\n// Prints: \"Hello World!\"\n\n\n\n\n\n\nRetrieving the variable in C#\n[link]\n\n\nTo retrieve the value of the variable in C#, use the \nRantEngine\n instance's indexer\nto retrieve the \nRantObject\n instance associated with the variable name.\n\n\nConsole\n.\nWriteLine\n(\nrant\n[\n\"example\"\n].\nValue\n);\n\n\n// Prints: \"Hello World!\"\n\n\n\n\n\n\nSetting the variable in C#\n[link]\n\n\nThe value of the variable can be changed through the same indexer.\n\n\nrant\n[\n\"example\"\n]\n \n=\n \nnew\n \nRantObject\n(\n\"Hello from C#!\"\n);\n\n\n\n\n\n\nIf you run \npgmPrintVar\n again, you will find that the value of \nexample\n has changed to \"Hello from C#!\".",
            "title": "Rant Variables in C#"
        },
        {
            "location": "/tutorials/variable-access/#setting-a-variable-in-rant",
            "text": "First, a string variable is created by running the following pattern:  [vs:example;Hello World!]  This can be done with the following C# code:  var   rant   =   new   RantEngine ();  var   pgmSetVar   =   RantProgram . CompileString ( @\"[vs:example;Hello World!]\" );  rant . Do ( pgmSetVar );   Another pattern can then be used to retrieve the value of the variable:  var   pgmPrintVar   =   RantProgram . CompileString ( @\"[v:example]\" );  Console . WriteLine ( rant . Do ( pgmPrintVar ). Main );  // Prints: \"Hello World!\"",
            "title": "Setting a variable in Rant"
        },
        {
            "location": "/tutorials/variable-access/#retrieving-the-variable-in-c",
            "text": "To retrieve the value of the variable in C#, use the  RantEngine  instance's indexer\nto retrieve the  RantObject  instance associated with the variable name.  Console . WriteLine ( rant [ \"example\" ]. Value );  // Prints: \"Hello World!\"",
            "title": "Retrieving the variable in C&#35;"
        },
        {
            "location": "/tutorials/variable-access/#setting-the-variable-in-c",
            "text": "The value of the variable can be changed through the same indexer.  rant [ \"example\" ]   =   new   RantObject ( \"Hello from C#!\" );   If you run  pgmPrintVar  again, you will find that the value of  example  has changed to \"Hello from C#!\".",
            "title": "Setting the variable in C&#35;"
        },
        {
            "location": "/tutorials/serial-patterns/",
            "text": "Serial patterns are used for returning multiple sequential outputs from a single program execution.\nThe most obvious use case for this feature is generating large amounts of related data,\nsuch as names for randomized NPCs in a game, or separately outputting lines of a procedural dialogue script.\n\n\nYielding in Rant\n[link]\n\n\nWith serial patterns, an extra step is required before printed output can be sent back:\nthe output must be \nyielded\n, which means that all existing output is returned to the caller and a new,\nblank output takes its place in the VM, ready to be written to. For this, we use the \n[yield]\n\nfunction.\n\n\nTo demonstrate how this works, here is a very simple example of a serial pattern that returns two separate outputs in order:\n\n\nMarco!\n[yield]\nPolo!\n[yield]\n\n\n\n\n\nIn this example, the first output will read \nMarco!\n, and the second will read \nPolo!\n.\n\n\n\n\nYielding also works in blocks and places with varying amounts of iterations:\n\n\n# Random number of reps between 10 and 20\n[rep:[num:10;20]]\n{\n    # Print the current iteration number\n    [numfmt:verbal;[rn]]\n    # Yield it!\n    [yield]\n}\n\n\n\n\n\nRunning serial patterns in C#\n[link]\n\n\nTo run a pattern in serial mode, you must use the special \nRantEngine.DoSerial\n method,\nwhich returns an \nIEnumerable<RantOutput>\n instead of a \nRantOutput\n. This means that\nRant can take advantage of the lazy evaluation behavior of enumerators, allowing your code\nto process one output at a time without waiting for the whole program to finish.\n\n\nHere is a simple code snippet to get you started. \nIt runs a serial pattern that counts to ten, where each number is yielded separately.\n\n\nvar\n \nrant\n \n=\n \nnew\n \nRantEngine\n();\n\n\nvar\n \npgm\n \n=\n \nnew\n \nRantProgram\n.\nCompileString\n(\n@\"[r:10]{[rn][yield]}\"\n);\n\n\nforeach\n(\nvar\n \noutput\n \nin\n \nrant\n.\nDoSerial\n(\npgm\n))\n\n\n{\n\n    \nConsole\n.\nWriteLine\n(\noutput\n);\n\n\n}\n\n\n\n\n\n\nThe output should look like this:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10",
            "title": "Serial Patterns"
        },
        {
            "location": "/tutorials/serial-patterns/#yielding-in-rant",
            "text": "With serial patterns, an extra step is required before printed output can be sent back:\nthe output must be  yielded , which means that all existing output is returned to the caller and a new,\nblank output takes its place in the VM, ready to be written to. For this, we use the  [yield] \nfunction.  To demonstrate how this works, here is a very simple example of a serial pattern that returns two separate outputs in order:  Marco!\n[yield]\nPolo!\n[yield]  In this example, the first output will read  Marco! , and the second will read  Polo! .   Yielding also works in blocks and places with varying amounts of iterations:  # Random number of reps between 10 and 20\n[rep:[num:10;20]]\n{\n    # Print the current iteration number\n    [numfmt:verbal;[rn]]\n    # Yield it!\n    [yield]\n}",
            "title": "Yielding in Rant"
        },
        {
            "location": "/tutorials/serial-patterns/#running-serial-patterns-in-c",
            "text": "To run a pattern in serial mode, you must use the special  RantEngine.DoSerial  method,\nwhich returns an  IEnumerable<RantOutput>  instead of a  RantOutput . This means that\nRant can take advantage of the lazy evaluation behavior of enumerators, allowing your code\nto process one output at a time without waiting for the whole program to finish.  Here is a simple code snippet to get you started. \nIt runs a serial pattern that counts to ten, where each number is yielded separately.  var   rant   =   new   RantEngine ();  var   pgm   =   new   RantProgram . CompileString ( @\"[r:10]{[rn][yield]}\" );  foreach ( var   output   in   rant . DoSerial ( pgm ))  { \n     Console . WriteLine ( output );  }   The output should look like this:  1\n2\n3\n4\n5\n6\n7\n8\n9\n10",
            "title": "Running serial patterns in C&#35;"
        },
        {
            "location": "/api/",
            "text": "Carrier class (Rant.Vocabulary.Querying)\n[link]\n\n\nNamespace:\n Rant.Vocabulary.Querying\n\n\nInheritance:\n Object \u2192 Carrier\n\n\nRepresents information that can be used to synchronize query selections based on certain criteria.\n\n\npublic\n \nsealed\n \nclass\n \nCarrier\n\n\n\n\n\n\nConstructors\n[link]\n\n\nCarrier()\n[link]\n\n\nCreates an empty carrier.\n\n\npublic\n \nCarrier\n()\n\n\n\n\n\n\nMethods\n[link]\n\n\nAddComponent(CarrierComponentType, params string[])\n[link]\n\n\nAdds a component of the specified type and name to the current instance.\n\n\npublic\n \nvoid\n \nAddComponent\n(\nCarrierComponentType\n \ntype\n,\n \nparams\n \nstring\n[]\n \nvalues\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ntype\n: The type of carrier to add.\n\n\nvalues\n: The names to assign to the component type.\n\n\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetComponentsOfType(CarrierComponentType)\n[link]\n\n\nIterates through the current instances's components of the specified type.\n\n\npublic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nstring\n>\n \nGetComponentsOfType\n(\nCarrierComponentType\n \ntype\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ntype\n: The type of component to iterate through.\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetTotalCount()\n[link]\n\n\nRetreives the total amount of all components.\n\n\npublic\n \nint\n \nGetTotalCount\n()\n\n\n\n\n\n\nReturns\n[link]\n\n\nThe total amount of all components.\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nGetTypeCount(CarrierComponentType)\n[link]\n\n\nReturns how many of a certain carrier component type are assigned to the current instance.\n\n\npublic\n \nint\n \nGetTypeCount\n(\nCarrierComponentType\n \ntype\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ntype\n: \n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nCarrierComponentType enum (Rant.Vocabulary.Querying)\n[link]\n\n\nNamespace:\n Rant.Vocabulary.Querying\n\n\nInheritance:\n Object \u2192 ValueType \u2192 Enum \u2192 CarrierComponentType\n\n\nDefines carrier types for queries.\n\n\npublic\n \nenum\n \nCarrierComponentType\n\n\n\n\n\n\nFields\n[link]\n\n\nAssociative\n[link]\n\n\nClasses must exactly match.\n\n\npublic\n \nconst\n \nCarrierComponentType\n \nAssociative\n \n=\n \n3\n;\n\n\n\n\n\n\nDissociative\n[link]\n\n\nShare no classes.\n\n\npublic\n \nconst\n \nCarrierComponentType\n \nDissociative\n \n=\n \n1\n;\n\n\n\n\n\n\nDivergent\n[link]\n\n\nHave at least one different class.\n\n\npublic\n \nconst\n \nCarrierComponentType\n \nDivergent\n \n=\n \n5\n;\n\n\n\n\n\n\nMatch\n[link]\n\n\nSelect the same entry every time.\n\n\npublic\n \nconst\n \nCarrierComponentType\n \nMatch\n \n=\n \n0\n;\n\n\n\n\n\n\nMatchAssociative\n[link]\n\n\nClasses must exactly match those of a match carrier entry.\n\n\npublic\n \nconst\n \nCarrierComponentType\n \nMatchAssociative\n \n=\n \n4\n;\n\n\n\n\n\n\nMatchDissociative\n[link]\n\n\nShare no classes with a match carrier entry.\n\n\npublic\n \nconst\n \nCarrierComponentType\n \nMatchDissociative\n \n=\n \n2\n;\n\n\n\n\n\n\nMatchDivergent\n[link]\n\n\nHave at least one different class than a match carrier entry.\n\n\npublic\n \nconst\n \nCarrierComponentType\n \nMatchDivergent\n \n=\n \n6\n;\n\n\n\n\n\n\nMatchRelational\n[link]\n\n\nShare at least one class with a match carrier entry.\n\n\npublic\n \nconst\n \nCarrierComponentType\n \nMatchRelational\n \n=\n \n8\n;\n\n\n\n\n\n\nMatchUnique\n[link]\n\n\nChoose an entry that is different from a match carrier entry.\n\n\npublic\n \nconst\n \nCarrierComponentType\n \nMatchUnique\n \n=\n \n10\n;\n\n\n\n\n\n\nRelational\n[link]\n\n\nShare at least one class.\n\n\npublic\n \nconst\n \nCarrierComponentType\n \nRelational\n \n=\n \n7\n;\n\n\n\n\n\n\nRhyme\n[link]\n\n\nChoose terms that rhyme.\n\n\npublic\n \nconst\n \nCarrierComponentType\n \nRhyme\n \n=\n \n11\n;\n\n\n\n\n\n\nUnique\n[link]\n\n\nNever choose the same entry twice.\n\n\npublic\n \nconst\n \nCarrierComponentType\n \nUnique\n \n=\n \n9\n;\n\n\n\n\n\n\nMethods\n[link]\n\n\nCompareTo(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nCompareTo\n(\nobject\n \ntarget\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ntarget\n: \nNo Description\n\n\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nGetTypeCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nTypeCode\n \nGetTypeCode\n()\n\n\n\n\n\n\nHasFlag(Enum)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nHasFlag\n(\nEnum\n \nflag\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nflag\n: \nNo Description\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nToString(string)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n(\nstring\n \nformat\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nformat\n: \nNo Description\n\n\n\n\nToString(IFormatProvider)\n[link]\n\n\n\n\nWarning\n\n\nThis item is deprecated.\n\nThe provider argument is not used. Please use ToString().\n\n\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n(\nIFormatProvider\n \nprovider\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nprovider\n: \nNo Description\n\n\n\n\nToString(string, IFormatProvider)\n[link]\n\n\n\n\nWarning\n\n\nThis item is deprecated.\n\nThe provider argument is not used. Please use ToString(String).\n\n\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n(\nstring\n \nformat\n,\n \nIFormatProvider\n \nprovider\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nformat\n: \nNo Description\n\n\nprovider\n: \nNo Description\n\n\n\n\nChannelVisibility enum (Rant.Core.Output)\n[link]\n\n\nNamespace:\n Rant.Core.Output\n\n\nInheritance:\n Object \u2192 ValueType \u2192 Enum \u2192 ChannelVisibility\n\n\nProvides visibility settings for output channels.\n\n\npublic\n \nenum\n \nChannelVisibility\n\n\n\n\n\n\nFields\n[link]\n\n\nInternal\n[link]\n\n\nChannel outputs only to itself and any parent channels also set to Internal.\n\n\npublic\n \nconst\n \nChannelVisibility\n \nInternal\n \n=\n \n2\n;\n\n\n\n\n\n\nPrivate\n[link]\n\n\nChannel outputs only to itself.\n\n\npublic\n \nconst\n \nChannelVisibility\n \nPrivate\n \n=\n \n1\n;\n\n\n\n\n\n\nPublic\n[link]\n\n\nChannel outputs to itself and 'main'.\n\n\npublic\n \nconst\n \nChannelVisibility\n \nPublic\n \n=\n \n0\n;\n\n\n\n\n\n\nMethods\n[link]\n\n\nCompareTo(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nCompareTo\n(\nobject\n \ntarget\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ntarget\n: \nNo Description\n\n\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nGetTypeCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nTypeCode\n \nGetTypeCode\n()\n\n\n\n\n\n\nHasFlag(Enum)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nHasFlag\n(\nEnum\n \nflag\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nflag\n: \nNo Description\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nToString(string)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n(\nstring\n \nformat\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nformat\n: \nNo Description\n\n\n\n\nToString(IFormatProvider)\n[link]\n\n\n\n\nWarning\n\n\nThis item is deprecated.\n\nThe provider argument is not used. Please use ToString().\n\n\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n(\nIFormatProvider\n \nprovider\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nprovider\n: \nNo Description\n\n\n\n\nToString(string, IFormatProvider)\n[link]\n\n\n\n\nWarning\n\n\nThis item is deprecated.\n\nThe provider argument is not used. Please use ToString(String).\n\n\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n(\nstring\n \nformat\n,\n \nIFormatProvider\n \nprovider\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nformat\n: \nNo Description\n\n\nprovider\n: \nNo Description\n\n\n\n\nClassFilterRule class (Rant.Vocabulary.Querying)\n[link]\n\n\nNamespace:\n Rant.Vocabulary.Querying\n\n\nInheritance:\n Object \u2192 ClassFilterRule\n\n\nDefines a query filter for a single dictionary entry class.\n\n\npublic\n \nsealed\n \nclass\n \nClassFilterRule\n\n\n\n\n\n\nConstructors\n[link]\n\n\nClassFilterRule(string)\n[link]\n\n\nInitializes a new ClassFilterRule that checks for a positive match to the specified class.\n\n\npublic\n \nClassFilterRule\n(\nstring\n \nclassName\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nclassName\n: The name of the class to search for.\n\n\n\n\nClassFilterRule(string, bool)\n[link]\n\n\nInitializes a new ClassFilterRule that checks for a positive or negative match to the specified class.\n\n\npublic\n \nClassFilterRule\n(\nstring\n \nclassName\n,\n \nbool\n \nshouldMatch\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nclassName\n: The name of the class to search for.\n\n\nshouldMatch\n: Determines whether the filter item expects a positive or negative match for the class.\n\n\n\n\nProperties\n[link]\n\n\nClass\n[link]\n\n\nThe name of the class to search for.\n\n\npublic\n \nstring\n \nClass\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nShouldMatch\n[link]\n\n\nDetermines whether the filter item expects a positive or negative match for the class.\n\n\npublic\n \nbool\n \nShouldMatch\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nMethods\n[link]\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nEnglishNumberVerbalizer class (Rant.Formats)\n[link]\n\n\nNamespace:\n Rant.Formats\n\n\nInheritance:\n Object \u2192 NumberVerbalizer \u2192 EnglishNumberVerbalizer\n\n\nRepresents a number verbalizer for English (US).\n\n\npublic\n \nsealed\n \nclass\n \nEnglishNumberVerbalizer\n \n:\n \nRant\n.\nFormats\n.\nNumberVerbalizer\n\n\n\n\n\n\nConstructors\n[link]\n\n\nEnglishNumberVerbalizer()\n[link]\n\n\nNo Summary\n\n\npublic\n \nEnglishNumberVerbalizer\n()\n\n\n\n\n\n\nMethods\n[link]\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nVerbalize(long)\n[link]\n\n\nVerbalizes the specified value.\n\n\npublic\n \nvirtual\n \nstring\n \nVerbalize\n(\nlong\n \nnumber\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nnumber\n: The number to verbalize.\n\n\n\n\nEnglishPluralizer class (Rant.Formats)\n[link]\n\n\nNamespace:\n Rant.Formats\n\n\nInheritance:\n Object \u2192 Pluralizer \u2192 EnglishPluralizer\n\n\nPluralizer for English nouns.\n\n\npublic\n \nsealed\n \nclass\n \nEnglishPluralizer\n \n:\n \nRant\n.\nFormats\n.\nPluralizer\n\n\n\n\n\n\nConstructors\n[link]\n\n\nEnglishPluralizer()\n[link]\n\n\nNo Summary\n\n\npublic\n \nEnglishPluralizer\n()\n\n\n\n\n\n\nMethods\n[link]\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nPluralize(string)\n[link]\n\n\nDetermines the plural form of the specified English noun.\n\n\npublic\n \nvirtual\n \nstring\n \nPluralize\n(\nstring\n \ninput\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ninput\n: The singular form of the noun to pluralize.\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nGermanNumberVerbalizer class (Rant.Formats)\n[link]\n\n\nNamespace:\n Rant.Formats\n\n\nInheritance:\n Object \u2192 NumberVerbalizer \u2192 GermanNumberVerbalizer\n\n\nRepresents a number verbalizer for Standard German.\n\n\npublic\n \nsealed\n \nclass\n \nGermanNumberVerbalizer\n \n:\n \nRant\n.\nFormats\n.\nNumberVerbalizer\n\n\n\n\n\n\nConstructors\n[link]\n\n\nGermanNumberVerbalizer()\n[link]\n\n\nNo Summary\n\n\npublic\n \nGermanNumberVerbalizer\n()\n\n\n\n\n\n\nMethods\n[link]\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nVerbalize(long)\n[link]\n\n\nVerbalizes the specified value.\n\n\npublic\n \nvirtual\n \nstring\n \nVerbalize\n(\nlong\n \nnumber\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nnumber\n: The number to verbalize.\n\n\n\n\nIRantFunction interface (Rant.Metadata)\n[link]\n\n\nNamespace:\n Rant.Metadata\n\n\nInheritance:\n Object \u2192 IRantFunction\n\n\nProvides access to metadata for a Rant function overload.\n\n\npublic\n \ninterface\n \nIRantFunction\n\n\n\n\n\n\nProperties\n[link]\n\n\nDescription\n[link]\n\n\nGets the description for the function overload.\n\n\npublic\n \nabstract\n \nvirtual\n \nstring\n \nDescription\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nHasParamArray\n[link]\n\n\nIndicates whether the last parameter accepts multiple values.\n\n\npublic\n \nabstract\n \nvirtual\n \nbool\n \nHasParamArray\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nName\n[link]\n\n\nGets the name of the function.\n\n\npublic\n \nabstract\n \nvirtual\n \nstring\n \nName\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nParamCount\n[link]\n\n\nGets the number of parameters accepted by the function overload.\n\n\npublic\n \nabstract\n \nvirtual\n \nint\n \nParamCount\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nMethods\n[link]\n\n\nGetParameters()\n[link]\n\n\nEnumerates the parameters for the function overload.\n\n\npublic\n \nabstract\n \nvirtual\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nRant\n.\nMetadata\n.\nIRantParameter\n>\n \nGetParameters\n()\n\n\n\n\n\n\nIRantFunctionGroup interface (Rant.Metadata)\n[link]\n\n\nNamespace:\n Rant.Metadata\n\n\nInheritance:\n Object \u2192 IRantFunctionGroup\n\n\nProvides access to metadata for a group of overloads for a specific Rant function.\n\n\npublic\n \ninterface\n \nIRantFunctionGroup\n\n\n\n\n\n\nProperties\n[link]\n\n\nName\n[link]\n\n\nGets the name of the function.\n\n\npublic\n \nabstract\n \nvirtual\n \nstring\n \nName\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nOverloads\n[link]\n\n\nGets the available overloads for the function.\n\n\npublic\n \nabstract\n \nvirtual\n \nIEnumerable\n<\nRant\n.\nMetadata\n.\nIRantFunction\n>\n \nOverloads\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nIRantModeValue interface (Rant.Metadata)\n[link]\n\n\nNamespace:\n Rant.Metadata\n\n\nInheritance:\n Object \u2192 IRantModeValue\n\n\nProvides information on Rant's mode values, like number formats and synchronizer types.\n\n\npublic\n \ninterface\n \nIRantModeValue\n\n\n\n\n\n\nProperties\n[link]\n\n\nDescription\n[link]\n\n\nGets the description for the value.\n\n\npublic\n \nabstract\n \nvirtual\n \nstring\n \nDescription\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nName\n[link]\n\n\nGets the name of the value.\n\n\npublic\n \nabstract\n \nvirtual\n \nstring\n \nName\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nIRantParameter interface (Rant.Metadata)\n[link]\n\n\nNamespace:\n Rant.Metadata\n\n\nInheritance:\n Object \u2192 IRantParameter\n\n\nProvides access to metadata for a Rant function parameter.\n\n\npublic\n \ninterface\n \nIRantParameter\n\n\n\n\n\n\nProperties\n[link]\n\n\nDescription\n[link]\n\n\nGets the description for the parameter.\n\n\npublic\n \nabstract\n \nvirtual\n \nstring\n \nDescription\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nIsParams\n[link]\n\n\nIndicates whether the parameter accepts multiple values.\n\n\npublic\n \nabstract\n \nvirtual\n \nbool\n \nIsParams\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nName\n[link]\n\n\nGets the name of the parameter.\n\n\npublic\n \nabstract\n \nvirtual\n \nstring\n \nName\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nRantType\n[link]\n\n\nGets the data type accepted by the parameter.\n\n\npublic\n \nabstract\n \nvirtual\n \nRantFunctionParameterType\n \nRantType\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nMethods\n[link]\n\n\nGetEnumValues()\n[link]\n\n\nEnumerates all possible values for flag and mode parameters.\n\n\npublic\n \nabstract\n \nvirtual\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nRant\n.\nMetadata\n.\nIRantModeValue\n>\n \nGetEnumValues\n()\n\n\n\n\n\n\nNumberVerbalizer class (Rant.Formats)\n[link]\n\n\nNamespace:\n Rant.Formats\n\n\nInheritance:\n Object \u2192 NumberVerbalizer\n\n\nThe base class for all number verbalizers.\n\n\npublic\n \nabstract\n \nclass\n \nNumberVerbalizer\n\n\n\n\n\n\nMethods\n[link]\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nVerbalize(long)\n[link]\n\n\nVerbalizes the specified value.\n\n\npublic\n \nabstract\n \nvirtual\n \nstring\n \nVerbalize\n(\nlong\n \nnumber\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nnumber\n: The number to verbalize.\n\n\n\n\nPluralizer class (Rant.Formats)\n[link]\n\n\nNamespace:\n Rant.Formats\n\n\nInheritance:\n Object \u2192 Pluralizer\n\n\nThe base class for pluralizers, which infer the plural form of a given noun.\n\n\npublic\n \nabstract\n \nclass\n \nPluralizer\n\n\n\n\n\n\nMethods\n[link]\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nPluralize(string)\n[link]\n\n\nConverts the specified input noun to a plural version.\n\n\npublic\n \nabstract\n \nvirtual\n \nstring\n \nPluralize\n(\nstring\n \ninput\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ninput\n: The noun to convert.\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nQuotationMarks class (Rant.Formats)\n[link]\n\n\nNamespace:\n Rant.Formats\n\n\nInheritance:\n Object \u2192 QuotationMarks\n\n\nRepresents a configuration for quotation marks.\n\n\npublic\n \nsealed\n \nclass\n \nQuotationMarks\n\n\n\n\n\n\nConstructors\n[link]\n\n\nQuotationMarks()\n[link]\n\n\nInitializes a new instance of the QuotationFormat class with the default configuration.\n\n\npublic\n \nQuotationMarks\n()\n\n\n\n\n\n\nQuotationMarks(char, char, char, char)\n[link]\n\n\nInitializes a new instance of the QuotationFormat class with the specified quotation marks.\n\n\npublic\n \nQuotationMarks\n(\nchar\n \nopenPrimary\n,\n \nchar\n \nclosePrimary\n,\n \nchar\n \nopenSecondary\n,\n \nchar\n \ncloseSecondary\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nopenPrimary\n: The opening primary quote.\n\n\nclosePrimary\n: The closing primary quote.\n\n\nopenSecondary\n: The opening secondary quote.\n\n\ncloseSecondary\n: The closing secondary quote.\n\n\n\n\nProperties\n[link]\n\n\nClosingPrimary\n[link]\n\n\nThe closing primary quotation mark.\n\n\npublic\n \nchar\n \nClosingPrimary\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nClosingSecondary\n[link]\n\n\nThe closing secondary quotation mark.\n\n\npublic\n \nchar\n \nClosingSecondary\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nOpeningPrimary\n[link]\n\n\nThe opening primary quotation mark.\n\n\npublic\n \nchar\n \nOpeningPrimary\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nOpeningSecondary\n[link]\n\n\nThe opening secondary quotation mark.\n\n\npublic\n \nchar\n \nOpeningSecondary\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nMethods\n[link]\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nToString()\n[link]\n\n\nReturns a string representation of the configuration.\n\n\npublic\n \nvirtual\n \nstring\n \nToString\n()\n\n\n\n\n\n\nRantArgAttribute class (Rant)\n[link]\n\n\nNamespace:\n Rant\n\n\nInheritance:\n Object \u2192 Attribute \u2192 RantArgAttribute\n\n\nAttribute used to change the name of an argument pulled from a field or property.\n\n\npublic\n \nsealed\n \nclass\n \nRantArgAttribute\n \n:\n \nSystem\n.\nAttribute\n,\n \nSystem\n.\nRuntime\n.\nInteropServices\n.\n_Attribute\n\n\n\n\n\n\nConstructors\n[link]\n\n\nRantArgAttribute(string)\n[link]\n\n\nCreates a new RantArgAttribute with the specified name.\n\n\npublic\n \nRantArgAttribute\n(\nstring\n \nname\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nname\n: The new name to assign to the argument.\n\n\n\n\nProperties\n[link]\n\n\nName\n[link]\n\n\nThe new name to assign to the argument.\n\n\npublic\n \nstring\n \nName\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nTypeId\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nobject\n \nTypeId\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nMethods\n[link]\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nIsDefaultAttribute()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nIsDefaultAttribute\n()\n\n\n\n\n\n\nMatch(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nMatch\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nRantCompilerException class (Rant)\n[link]\n\n\nNamespace:\n Rant\n\n\nInheritance:\n Object \u2192 Exception \u2192 RantCompilerException\n\n\nRepresents an error raised by Rant during pattern compilation.\n\n\npublic\n \nsealed\n \nclass\n \nRantCompilerException\n \n:\n \nSystem\n.\nException\n,\n \nSystem\n.\nRuntime\n.\nSerialization\n.\nISerializable\n,\n \nSystem\n.\nRuntime\n.\nInteropServices\n.\n_Exception\n\n\n\n\n\n\nProperties\n[link]\n\n\nData\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nIDictionary\n \nData\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nErrorCount\n[link]\n\n\nGets the number of errors returned by the compiler.\n\n\npublic\n \nint\n \nErrorCount\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nHelpLink\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nHelpLink\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nHResult\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nHResult\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nInnerException\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nException\n \nInnerException\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nInternalError\n[link]\n\n\nIndicates whether the exception is the result of an internal engine error.\n\n\npublic\n \nbool\n \nInternalError\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nMessage\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nMessage\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nSource\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nSource\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nSourceName\n[link]\n\n\nThe name of the source pattern on which the error occurred.\n\n\npublic\n \nstring\n \nSourceName\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nStackTrace\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nStackTrace\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nTargetSite\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nMethodBase\n \nTargetSite\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nMethods\n[link]\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetBaseException()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nException\n \nGetBaseException\n()\n\n\n\n\n\n\nGetErrors()\n[link]\n\n\nEnumerates the errors collected from the compiler.\n\n\npublic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nRant\n.\nRantCompilerMessage\n>\n \nGetErrors\n()\n\n\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetObjectData(SerializationInfo, StreamingContext)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nvoid\n \nGetObjectData\n(\nSerializationInfo\n \ninfo\n,\n \nStreamingContext\n \ncontext\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ninfo\n: \nNo Description\n\n\ncontext\n: \nNo Description\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nRantCompilerMessage class (Rant)\n[link]\n\n\nNamespace:\n Rant\n\n\nInheritance:\n Object \u2192 RantCompilerMessage\n\n\nRepresents a message emitted by the Rant compiler while performing a job.\n\n\npublic\n \nsealed\n \nclass\n \nRantCompilerMessage\n\n\n\n\n\n\nProperties\n[link]\n\n\nColumn\n[link]\n\n\nThe column on which the message was generated.\n\n\npublic\n \nint\n \nColumn\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nIndex\n[link]\n\n\nThe character index on which the message was generated.\n\n\npublic\n \nint\n \nIndex\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nLength\n[link]\n\n\nThe length, in characters, of the code snippet to which the message pertains.\n\n\npublic\n \nint\n \nLength\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nLine\n[link]\n\n\nThe line on which the message was generated.\n\n\npublic\n \nint\n \nLine\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nMessage\n[link]\n\n\nThe message text.\n\n\npublic\n \nstring\n \nMessage\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nSource\n[link]\n\n\nThe source path of the pattern being compiled when the message was generated.\n\n\npublic\n \nstring\n \nSource\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nType\n[link]\n\n\nThe type of message.\n\n\npublic\n \nRantCompilerMessageType\n \nType\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nMethods\n[link]\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nToString()\n[link]\n\n\nGenerates a string representation of the message.\n\n\npublic\n \nvirtual\n \nstring\n \nToString\n()\n\n\n\n\n\n\nRantCompilerMessageType enum (Rant)\n[link]\n\n\nNamespace:\n Rant\n\n\nInheritance:\n Object \u2192 ValueType \u2192 Enum \u2192 RantCompilerMessageType\n\n\nDefines message types used by the Rant compiler.\n\n\npublic\n \nenum\n \nRantCompilerMessageType\n\n\n\n\n\n\nFields\n[link]\n\n\nError\n[link]\n\n\nIndicates a problem that made compilation impossible, usually a syntax error.\n\n\npublic\n \nconst\n \nRantCompilerMessageType\n \nError\n \n=\n \n1\n;\n\n\n\n\n\n\nWarning\n[link]\n\n\nIndicates a problem that did not interfere with compilation.\n\n\npublic\n \nconst\n \nRantCompilerMessageType\n \nWarning\n \n=\n \n0\n;\n\n\n\n\n\n\nMethods\n[link]\n\n\nCompareTo(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nCompareTo\n(\nobject\n \ntarget\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ntarget\n: \nNo Description\n\n\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nGetTypeCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nTypeCode\n \nGetTypeCode\n()\n\n\n\n\n\n\nHasFlag(Enum)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nHasFlag\n(\nEnum\n \nflag\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nflag\n: \nNo Description\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nToString(string)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n(\nstring\n \nformat\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nformat\n: \nNo Description\n\n\n\n\nToString(IFormatProvider)\n[link]\n\n\n\n\nWarning\n\n\nThis item is deprecated.\n\nThe provider argument is not used. Please use ToString().\n\n\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n(\nIFormatProvider\n \nprovider\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nprovider\n: \nNo Description\n\n\n\n\nToString(string, IFormatProvider)\n[link]\n\n\n\n\nWarning\n\n\nThis item is deprecated.\n\nThe provider argument is not used. Please use ToString(String).\n\n\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n(\nstring\n \nformat\n,\n \nIFormatProvider\n \nprovider\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nformat\n: \nNo Description\n\n\nprovider\n: \nNo Description\n\n\n\n\nRantDependencyResolver class (Rant.Resources)\n[link]\n\n\nNamespace:\n Rant.Resources\n\n\nInheritance:\n Object \u2192 RantDependencyResolver\n\n\nDefault class for package depdendency resolving.\n\n\npublic\n \nclass\n \nRantDependencyResolver\n\n\n\n\n\n\nConstructors\n[link]\n\n\nRantDependencyResolver()\n[link]\n\n\nNo Summary\n\n\npublic\n \nRantDependencyResolver\n()\n\n\n\n\n\n\nMethods\n[link]\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nTryResolvePackage(RantPackageDependency, out RantPackage&)\n[link]\n\n\nNo Summary\n\n\npublic\n \nvirtual\n \nbool\n \nTryResolvePackage\n(\nRantPackageDependency\n \ndepdendency\n,\n \nout\n \nRantPackage\n&\n \npackage\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ndepdendency\n: \nNo Description\n\n\npackage\n: \nNo Description\n\n\n\n\nRantDictionary class (Rant.Vocabulary)\n[link]\n\n\nNamespace:\n Rant.Vocabulary\n\n\nInheritance:\n Object \u2192 RantDictionary\n\n\nRepresents a dictionary that can be loaded and queried by Rant.\n\n\npublic\n \nsealed\n \nclass\n \nRantDictionary\n\n\n\n\n\n\nConstructors\n[link]\n\n\nRantDictionary()\n[link]\n\n\nInitializes a new instance of the  class with no tables.\n\n\npublic\n \nRantDictionary\n()\n\n\n\n\n\n\nRantDictionary(IEnumerable\n)\n[link]\n\n\nInitializes a new instance of the  class with the specified set of tables.\n\n\npublic\n \nRantDictionary\n(\nIEnumerable\n<\nRant\n.\nVocabulary\n.\nRantDictionaryTable\n>\n \ntables\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ntables\n: The tables to store in the dictionary.\n\n\n\n\nProperties\n[link]\n\n\nEnableWeighting\n[link]\n\n\nDetermines whether tables will favor weighted distribution, if available.\n            Weighted distribution has a significantl impact on performance.\n\n\npublic\n \nbool\n \nEnableWeighting\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nIncludedHiddenClasses\n[link]\n\n\nGets all currently exposed hidden classes.\n\n\npublic\n \nIEnumerable\n<\nstring\n>\n \nIncludedHiddenClasses\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nIndexers\n[link]\n\n\nthis[string name]\n[link]\n\n\nGets the table with the specified name.\n\n\npublic\n \nRantDictionaryTable\n \nthis\n[\nstring\n \nname\n]\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nMethods\n[link]\n\n\nAddTable(RantDictionaryTable)\n[link]\n\n\nAdds a new  object to the dictionary.\n\n\npublic\n \nvoid\n \nAddTable\n(\nRantDictionaryTable\n \ntable\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ntable\n: The table to add.\n\n\n\n\nClassExposed(string)\n[link]\n\n\nDetermines whether the specified class has been manually exposed (overriding hidden status).\n\n\npublic\n \nbool\n \nClassExposed\n(\nstring\n \nclassName\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nclassName\n: The name of the class to check.\n\n\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nExcludeHiddenClass(string)\n[link]\n\n\nUnexposes a hidden class from query results.\n\n\npublic\n \nvoid\n \nExcludeHiddenClass\n(\nstring\n \nhiddenClassName\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nhiddenClassName\n: The name of the hidden class to unexpose.\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetTables()\n[link]\n\n\nEnumerates the tables contained in the current RantDictionary instance.\n\n\npublic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nRant\n.\nVocabulary\n.\nRantDictionaryTable\n>\n \nGetTables\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nIncludeHiddenClass(string)\n[link]\n\n\nExposes a hidden class to query results.\n\n\npublic\n \nvoid\n \nIncludeHiddenClass\n(\nstring\n \nhiddenClassName\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nhiddenClassName\n: The name of the hidden class to expose.\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nRantDictionaryEntry class (Rant.Vocabulary)\n[link]\n\n\nNamespace:\n Rant.Vocabulary\n\n\nInheritance:\n Object \u2192 RantDictionaryEntry\n\n\nStores information about a dictionary entry.\n\n\npublic\n \nsealed\n \nclass\n \nRantDictionaryEntry\n\n\n\n\n\n\nConstructors\n[link]\n\n\nRantDictionaryEntry(RantDictionaryTerm[])\n[link]\n\n\nCreates a new instance of the  object from the specified term array.\n\n\npublic\n \nRantDictionaryEntry\n(\nRantDictionaryTerm\n[]\n \nterms\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nterms\n: The terms in the entry.\n\n\n\n\nRantDictionaryEntry(string[], IEnumerable\n, float)\n[link]\n\n\nCreates a new  object from the specified term array, classes, and weight.\n\n\npublic\n \nRantDictionaryEntry\n(\nstring\n[]\n \nterms\n,\n \nIEnumerable\n<\nstring\n>\n \nclasses\n,\n \nfloat\n \nweight\n \n=\n \n1f\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nterms\n: The terms in the entry.\n\n\nclasses\n: The classes associated with the entry.\n\n\nweight\n: The weight of the entry.\n\n\n\n\nRantDictionaryEntry(IEnumerable\n, IEnumerable\n, float)\n[link]\n\n\nCreates a new  object from the specified term collection, classes, and weight.\n\n\npublic\n \nRantDictionaryEntry\n(\nIEnumerable\n<\nRant\n.\nVocabulary\n.\nRantDictionaryTerm\n>\n \nterms\n,\n \nIEnumerable\n<\nstring\n>\n \nclasses\n,\n \nfloat\n \nweight\n \n=\n \n1f\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nterms\n: The terms in the entry.\n\n\nclasses\n: The classes associated with the entry.\n\n\nweight\n: The weight of the entry.\n\n\n\n\nProperties\n[link]\n\n\nClassCount\n[link]\n\n\nGets the number of classes in the current entry.\n\n\npublic\n \nint\n \nClassCount\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nHasClasses\n[link]\n\n\nReturns whether or not the entry has classes.\n\n\npublic\n \nbool\n \nHasClasses\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nTermCount\n[link]\n\n\nGets the number of terms stored in the current entry.\n\n\npublic\n \nint\n \nTermCount\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nWeight\n[link]\n\n\nGets the weight value of the entry.\n\n\npublic\n \nfloat\n \nWeight\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nIndexers\n[link]\n\n\nthis[int index]\n[link]\n\n\nGets or sets the term at the specified index.\n\n\npublic\n \nRantDictionaryTerm\n \nthis\n[\nint\n \nindex\n]\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nMethods\n[link]\n\n\nAddClass(string, bool)\n[link]\n\n\nAdds the specified class to the current entry.\n\n\npublic\n \nvoid\n \nAddClass\n(\nstring\n \nclassName\n,\n \nbool\n \noptional\n \n=\n \nFalse\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nclassName\n: The name of the class.\n\n\noptional\n: Specifies whether the class is optional in carrier associations.\n\n\n\n\nContainsClass(string)\n[link]\n\n\nReturns a boolean valie indicating whether the current entry contains the specified class.\n\n\npublic\n \nbool\n \nContainsClass\n(\nstring\n \nclassName\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nclassName\n: The class to search for.\n\n\n\n\nContainsMetadataKey(string)\n[link]\n\n\nDetermines if the entry contains metadata attached to the specified key.\n\n\npublic\n \nbool\n \nContainsMetadataKey\n(\nstring\n \nkey\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nkey\n: The key to search for.\n\n\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetClasses()\n[link]\n\n\nReturns a collection of classes assigned to the current entry.\n\n\npublic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nstring\n>\n \nGetClasses\n()\n\n\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetMetadata(string)\n[link]\n\n\nLocates and returns the metadata value associated with the specified key. Returns Null if not found.\n\n\npublic\n \nobject\n \nGetMetadata\n(\nstring\n \nkey\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nkey\n: The key of the metadata to retrieve.\n\n\n\n\nGetMetadataKeys()\n[link]\n\n\nEnumerates all the metadata keys contained in the entry.\n\n\npublic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nstring\n>\n \nGetMetadataKeys\n()\n\n\n\n\n\n\nGetOptionalClasses()\n[link]\n\n\nReturns a collection of the optional classes assigned to the current entry.\n\n\npublic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nstring\n>\n \nGetOptionalClasses\n()\n\n\n\n\n\n\nGetRequiredClasses()\n[link]\n\n\nReturns a collection of required (non-optional) classes assigned to the current entry.\n\n\npublic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nstring\n>\n \nGetRequiredClasses\n()\n\n\n\n\n\n\nGetTerms()\n[link]\n\n\nEnumerates the terms stored in the current entry.\n\n\npublic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nRant\n.\nVocabulary\n.\nRantDictionaryTerm\n>\n \nGetTerms\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nRemoveClass(string)\n[link]\n\n\nRemoves the class with the specified name from the current entry.\n\n\npublic\n \nvoid\n \nRemoveClass\n(\nstring\n \nclassName\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nclassName\n: The name of the class to remove.\n\n\n\n\nRemoveMetadata(string)\n[link]\n\n\nRemoves the metadata with the specified key from the entry.\n\n\npublic\n \nbool\n \nRemoveMetadata\n(\nstring\n \nkey\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nkey\n: The key of the metadata entry to remove.\n\n\n\n\nSetMetadata(string, object)\n[link]\n\n\nSets a metadata value under the specified key in the entry.\n\n\npublic\n \nvoid\n \nSetMetadata\n(\nstring\n \nkey\n,\n \nobject\n \nvalue\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nkey\n: The key to store the data under.\n\n\nvalue\n: The value to store.\n\n\n\n\nToString()\n[link]\n\n\nReturns a string representation of the current  instance.\n\n\npublic\n \nvirtual\n \nstring\n \nToString\n()\n\n\n\n\n\n\nRantDictionaryTable class (Rant.Vocabulary)\n[link]\n\n\nNamespace:\n Rant.Vocabulary\n\n\nInheritance:\n Object \u2192 RantResource \u2192 RantDictionaryTable\n\n\nRepresents a named collection of dictionary entries.\n\n\npublic\n \nsealed\n \nclass\n \nRantDictionaryTable\n \n:\n \nRant\n.\nResources\n.\nRantResource\n\n\n\n\n\n\nConstructors\n[link]\n\n\nRantDictionaryTable(string, int, HashSet\n)\n[link]\n\n\nInitializes a new instance of the RantDictionaryTable class with the specified name and term count.\n\n\npublic\n \nRantDictionaryTable\n(\nstring\n \nname\n,\n \nint\n \ntermsPerEntry\n,\n \nHashSet\n<\nstring\n>\n \nhidden\n \n=\n \nnull\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nname\n: The name of the table.\n\n\ntermsPerEntry\n: The number of terms to store in each entry.\n\n\nhidden\n: Collection of hidden classes.\n\n\n\n\nProperties\n[link]\n\n\nCacheNeedsRebuild\n[link]\n\n\nIndicates whether the cache needs to be rebuilt.\n\n\npublic\n \nbool\n \nCacheNeedsRebuild\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nEnableWeighting\n[link]\n\n\nDetermines whether weights are enabled on this table.\n\n\npublic\n \nbool\n \nEnableWeighting\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nEntryCount\n[link]\n\n\nGets the number of entries stored in the table.\n\n\npublic\n \nint\n \nEntryCount\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nHiddenClasses\n[link]\n\n\nGets the hidden classes of the table.\n\n\npublic\n \nIEnumerable\n<\nstring\n>\n \nHiddenClasses\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nLanguage\n[link]\n\n\nGets the language code associated with the table (not yet used).\n\n\npublic\n \nstring\n \nLanguage\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nName\n[link]\n\n\nGets the name of the table.\n\n\npublic\n \nstring\n \nName\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nTermsPerEntry\n[link]\n\n\nGets the number of terms required for entries contained in the current table.\n\n\npublic\n \nint\n \nTermsPerEntry\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nIndexers\n[link]\n\n\nthis[int index]\n[link]\n\n\nGets the entry at the specified index in the current  object.\n\n\npublic\n \nRantDictionaryEntry\n \nthis\n[\nint\n \nindex\n]\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nMethods\n[link]\n\n\nAddEntry(RantDictionaryEntry)\n[link]\n\n\nAdds the specified entry to the table.\n\n\npublic\n \nbool\n \nAddEntry\n(\nRantDictionaryEntry\n \nentry\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nentry\n: The entry to add to the table.\n\n\n\n\nReturns\n[link]\n\n\nTrue if successfully added; otherwise, False.\n\n\nAddSubtype(string, int)\n[link]\n\n\nAdds a subtype of the specified name to the table.\n            If a subtype with the name already exists, it will be overwritten.\n            Subtypes are case insensitive.\n            If the name is not a valid identifier string, it will not be accepted.\n\n\npublic\n \nbool\n \nAddSubtype\n(\nstring\n \nsubtypeName\n,\n \nint\n \nindex\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nsubtypeName\n: The name of the subtype to add.\n\n\nindex\n: The term index to associate with the name.\n\n\n\n\nReturns\n[link]\n\n\nFALSE if the name was not a valid identifier or the index was out of range. TRUE if the operation was\n            successful.\n\n\nContainsClass(string)\n[link]\n\n\nReturns a boolean value indicating whether the current  instance contains one or more entries containing the specified class name.\n\n\npublic\n \nbool\n \nContainsClass\n(\nstring\n \nclName\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nclName\n: The class name to search for.\n\n\n\n\nContainsEntry(RantDictionaryEntry)\n[link]\n\n\nChecks if the table contains the specified entry.\n\n\npublic\n \nbool\n \nContainsEntry\n(\nRantDictionaryEntry\n \nentry\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nentry\n: The entry to search for.\n\n\n\n\nReturns\n[link]\n\n\nTrue if found, False if not.\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nFromStream(string, Stream)\n[link]\n\n\nLoads a table from the specified stream.\n\n\npublic\n \nstatic\n \nRant\n.\nVocabulary\n.\nRantDictionaryTable\n \nFromStream\n(\nstring\n \norigin\n,\n \nStream\n \nstream\n)\n\n\n\n\n\n\nParameters\n\n\n\n\norigin\n: The origin of the stream. This will typically be a file path or package name.\n\n\nstream\n: The stream to load the table from.\n\n\n\n\nGetClasses()\n[link]\n\n\nSearches entries in the current table and enumerates every single distinct class found.\n\n\npublic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nstring\n>\n \nGetClasses\n()\n\n\n\n\n\n\nGetEntries()\n[link]\n\n\nEnumerates the entries stored in the table.\n\n\npublic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nRant\n.\nVocabulary\n.\nRantDictionaryEntry\n>\n \nGetEntries\n()\n\n\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetSubtypeIndex(string)\n[link]\n\n\nRetrieves the term index assigned to the specified subtype.\n            If the subtype is not found, the method will return -1.\n            If the subtype is a null, whitespace, or an empty string, the method will return 0.\n\n\npublic\n \nint\n \nGetSubtypeIndex\n(\nstring\n \nsubtype\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nsubtype\n: The subtype to look up.\n\n\n\n\nGetSubtypes()\n[link]\n\n\nEnumerates the subtypes contained in the current table.\n\n\npublic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nstring\n>\n \nGetSubtypes\n()\n\n\n\n\n\n\nGetSubtypesForIndex(int)\n[link]\n\n\nEnumerates the subtypes associated with the specified term index.\n\n\npublic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nstring\n>\n \nGetSubtypesForIndex\n(\nint\n \nindex\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nindex\n: The index to get subtypes for.\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nHideClass(string)\n[link]\n\n\nHides the specified class.\n\n\npublic\n \nbool\n \nHideClass\n(\nstring\n \nclassName\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nclassName\n: The name of the class to hide.\n\n\n\n\nIsClassHidden(string)\n[link]\n\n\nDetermines whether the specified class is hidden by the table.\n\n\npublic\n \nbool\n \nIsClassHidden\n(\nstring\n \nclassName\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nclassName\n: The name of the class to check.\n\n\n\n\nMerge(RantDictionaryTable)\n[link]\n\n\nAdds another table's entries to the current table, given that they share the same name and term count.\n\n\npublic\n \nbool\n \nMerge\n(\nRantDictionaryTable\n \nother\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nother\n: The table whose entries will be added to the current instance.\n\n\n\n\nReturns\n[link]\n\n\nTrue if merge succeeded; otherwise, False.\n\n\nRebuildCache()\n[link]\n\n\nOptimizes the table. Call this after writing items to the table or removing items from a table.\n            If you're writing or removing multiple items, call this after all the actions have been performed.\n\n\npublic\n \nvoid\n \nRebuildCache\n()\n\n\n\n\n\n\nRemoveEntry(RantDictionaryEntry)\n[link]\n\n\nRemoves the specified entry from the table.\n\n\npublic\n \nbool\n \nRemoveEntry\n(\nRantDictionaryEntry\n \nentry\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nentry\n: The entry to remove from the table.\n\n\n\n\nReturns\n[link]\n\n\nTrue if successfully removed; otherwise, False.\n\n\nRemoveSubtype(string)\n[link]\n\n\nRemoves the specified subtype from the table, if it exists.\n            Subtypes are case insensitive.\n\n\npublic\n \nbool\n \nRemoveSubtype\n(\nstring\n \nsubtypeName\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nsubtypeName\n: The name of the subtype to remove.\n\n\n\n\nReturns\n[link]\n\n\nTRUE if the subtype was found and removed. FALSE if the subtype was not found.\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nUnhideClass(string)\n[link]\n\n\nUnhides the specified class.\n\n\npublic\n \nbool\n \nUnhideClass\n(\nstring\n \nclassName\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nclassName\n: The name of the class to unhide.\n\n\n\n\nRantDictionaryTerm class (Rant.Vocabulary)\n[link]\n\n\nNamespace:\n Rant.Vocabulary\n\n\nInheritance:\n Object \u2192 RantDictionaryTerm\n\n\nRepresents a single term of a dictionary entry.\n\n\npublic\n \nsealed\n \nclass\n \nRantDictionaryTerm\n\n\n\n\n\n\nConstructors\n[link]\n\n\nRantDictionaryTerm(string, int)\n[link]\n\n\nIntializes a new instance of the  class with the specified value string.\n\n\npublic\n \nRantDictionaryTerm\n(\nstring\n \nvalue\n,\n \nint\n \nsplitIndex\n \n=\n \n-\n1\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nvalue\n: The value of the term.\n\n\nsplitIndex\n: The split index of the term value. Specify -1 for no split.\n\n\n\n\nRantDictionaryTerm(string, string)\n[link]\n\n\nIntializes a new instance of the  class with the specified value and pronunciation\n            strings.\n\n\npublic\n \nRantDictionaryTerm\n(\nstring\n \nvalue\n,\n \nstring\n \npronunciation\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nvalue\n: The value of the term.\n\n\npronunciation\n: The pronunciation of the term value.\n\n\n\n\nRantDictionaryTerm(string, string, int, int)\n[link]\n\n\nIntializes a new instance of the  class with the specified value, pronunciation, and\n            split indices.\n\n\npublic\n \nRantDictionaryTerm\n(\nstring\n \nvalue\n,\n \nstring\n \npronunciation\n,\n \nint\n \nvalueSplitIndex\n,\n \nint\n \npronSplitIndex\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nvalue\n: The value of the term.\n\n\npronunciation\n: The pronunciation of the term value.\n\n\nvalueSplitIndex\n: The split index of the term value. Specify -1 for no split.\n\n\npronSplitIndex\n: The split index of the term pronunciation string. Specify -1 for no split. Must be\n            positive if the value is split and pronunciation data is present.\n\n\n\n\nProperties\n[link]\n\n\nIsSplit\n[link]\n\n\nDetermines whether the term is a split word.\n\n\npublic\n \nbool\n \nIsSplit\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nLeftSide\n[link]\n\n\nGets the term value substring on the left side of the split.\n\n\npublic\n \nstring\n \nLeftSide\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nPronunciation\n[link]\n\n\nThe pronunciation of the term.\n\n\npublic\n \nstring\n \nPronunciation\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nPronunciationSplitIndex\n[link]\n\n\nGets the split index of the term pronunciation string.\n\n\npublic\n \nint\n \nPronunciationSplitIndex\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nRightSide\n[link]\n\n\nGets the term value substring on the right side of the split.\n\n\npublic\n \nstring\n \nRightSide\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nSyllableCount\n[link]\n\n\nThe number of syllables in the pronunciation string.\n\n\npublic\n \nint\n \nSyllableCount\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nSyllables\n[link]\n\n\nAn array containing the individual syllables of the pronunciation string.\n\n\npublic\n \nstring\n[]\n \nSyllables\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nValue\n[link]\n\n\nThe value string of the term.\n\n\npublic\n \nstring\n \nValue\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nValueSplitIndex\n[link]\n\n\nGets the split index of the term value.\n\n\npublic\n \nint\n \nValueSplitIndex\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nMethods\n[link]\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nRantEngine class (Rant)\n[link]\n\n\nNamespace:\n Rant\n\n\nInheritance:\n Object \u2192 RantEngine\n\n\nThe central class of the Rant engine that allows the execution of patterns.\n\n\npublic\n \nsealed\n \nclass\n \nRantEngine\n\n\n\n\n\n\nConstructors\n[link]\n\n\nRantEngine()\n[link]\n\n\nCreates a new RantEngine object without a dictionary.\n\n\npublic\n \nRantEngine\n()\n\n\n\n\n\n\nRantEngine(RantDictionary)\n[link]\n\n\nCreates a new RantEngine object with the specified vocabulary.\n\n\npublic\n \nRantEngine\n(\nRantDictionary\n \ndictionary\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ndictionary\n: The vocabulary to load in this instance.\n\n\n\n\nProperties\n[link]\n\n\nDependencyResolver\n[link]\n\n\nGets or sets the depdendency resolver used for packages.\n\n\npublic\n \nRantDependencyResolver\n \nDependencyResolver\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nDictionary\n[link]\n\n\nThe vocabulary associated with this instance.\n\n\npublic\n \nRantDictionary\n \nDictionary\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nFormat\n[link]\n\n\nThe current formatting settings for the engine.\n\n\npublic\n \nRantFormat\n \nFormat\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nMaxStackSize\n[link]\n\n\nGets or sets the maximum stack size allowed for a pattern.\n\n\npublic\n \nstatic\n \nint\n \nMaxStackSize\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nPreserveCarrierState\n[link]\n\n\nSpecifies whether to preserve carrier states between patterns.\n\n\npublic\n \nbool\n \nPreserveCarrierState\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nIndexers\n[link]\n\n\nthis[string name]\n[link]\n\n\nAccesses global variables.\n\n\npublic\n \nRantObject\n \nthis\n[\nstring\n \nname\n]\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nFields\n[link]\n\n\nFlags\n[link]\n\n\nThe currently set flags.\n\n\npublic\n \nreadonly\n \nHashSet\n<\nstring\n>\n \nFlags\n;\n\n\n\n\n\n\nMethods\n[link]\n\n\nDo(string, int, double, RantProgramArgs)\n[link]\n\n\n\n\nWarning\n\n\nThis item is deprecated.\n\nUse an overload of Do() that accepts a RantProgram instead of a string.\n\n\n\n\nCompiles the specified string into a pattern, executes it, and returns the resulting output.\n\n\npublic\n \nRant\n.\nRantOutput\n \nDo\n(\nstring\n \ninput\n,\n \nint\n \ncharLimit\n \n=\n \n0\n,\n \ndouble\n \ntimeout\n \n=\n \n-\n1d\n,\n \nRantProgramArgs\n \nargs\n \n=\n \nnull\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ninput\n: The input string to execute.\n\n\ncharLimit\n: The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.\n\n\ntimeout\n: The maximum number of seconds that the pattern will execute for.\n\n\nargs\n: The arguments to pass to the pattern.\n\n\n\n\nDo(RantProgram, int, double, RantProgramArgs)\n[link]\n\n\nExecutes the specified pattern and returns the resulting output.\n\n\npublic\n \nRant\n.\nRantOutput\n \nDo\n(\nRantProgram\n \ninput\n,\n \nint\n \ncharLimit\n \n=\n \n0\n,\n \ndouble\n \ntimeout\n \n=\n \n-\n1d\n,\n \nRantProgramArgs\n \nargs\n \n=\n \nnull\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ninput\n: The pattern to execute.\n\n\ncharLimit\n: The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.\n\n\ntimeout\n: The maximum number of seconds that the pattern will execute for.\n\n\nargs\n: The arguments to pass to the pattern.\n\n\n\n\nDo(string, long, int, double, RantProgramArgs)\n[link]\n\n\n\n\nWarning\n\n\nThis item is deprecated.\n\nUse an overload of Do() that accepts a RantProgram instead of a string.\n\n\n\n\nCompiles the specified string into a pattern, executes it using a custom seed, and returns the resulting output.\n\n\npublic\n \nRant\n.\nRantOutput\n \nDo\n(\nstring\n \ninput\n,\n \nlong\n \nseed\n,\n \nint\n \ncharLimit\n \n=\n \n0\n,\n \ndouble\n \ntimeout\n \n=\n \n-\n1d\n,\n \nRantProgramArgs\n \nargs\n \n=\n \nnull\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ninput\n: The input string to execute.\n\n\nseed\n: The seed to generate output with.\n\n\ncharLimit\n: The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.\n\n\ntimeout\n: The maximum number of seconds that the pattern will execute for.\n\n\nargs\n: The arguments to pass to the pattern.\n\n\n\n\nDo(string, RNG, int, double, RantProgramArgs)\n[link]\n\n\n\n\nWarning\n\n\nThis item is deprecated.\n\nUse an overload of Do() that accepts a RantProgram instead of a string.\n\n\n\n\nCompiles the specified string into a pattern, executes it using a custom RNG, and returns the resulting output.\n\n\npublic\n \nRant\n.\nRantOutput\n \nDo\n(\nstring\n \ninput\n,\n \nRNG\n \nrng\n,\n \nint\n \ncharLimit\n \n=\n \n0\n,\n \ndouble\n \ntimeout\n \n=\n \n-\n1d\n,\n \nRantProgramArgs\n \nargs\n \n=\n \nnull\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ninput\n: The input string to execute.\n\n\nrng\n: The random number generator to use when generating output.\n\n\ncharLimit\n: The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.\n\n\ntimeout\n: The maximum number of seconds that the pattern will execute for.\n\n\nargs\n: The arguments to pass to the pattern.\n\n\n\n\nDo(RantProgram, long, int, double, RantProgramArgs)\n[link]\n\n\nExecutes the specified pattern using a custom seed and returns the resulting output.\n\n\npublic\n \nRant\n.\nRantOutput\n \nDo\n(\nRantProgram\n \ninput\n,\n \nlong\n \nseed\n,\n \nint\n \ncharLimit\n \n=\n \n0\n,\n \ndouble\n \ntimeout\n \n=\n \n-\n1d\n,\n \nRantProgramArgs\n \nargs\n \n=\n \nnull\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ninput\n: The pattern to execute.\n\n\nseed\n: The seed to generate output with.\n\n\ncharLimit\n: The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.\n\n\ntimeout\n: The maximum number of seconds that the pattern will execute for.\n\n\nargs\n: The arguments to pass to the pattern.\n\n\n\n\nDo(RantProgram, RNG, int, double, RantProgramArgs)\n[link]\n\n\nExecutes the specified pattern using a custom random number generator and returns the resulting output.\n\n\npublic\n \nRant\n.\nRantOutput\n \nDo\n(\nRantProgram\n \ninput\n,\n \nRNG\n \nrng\n,\n \nint\n \ncharLimit\n \n=\n \n0\n,\n \ndouble\n \ntimeout\n \n=\n \n-\n1d\n,\n \nRantProgramArgs\n \nargs\n \n=\n \nnull\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ninput\n: The pattern to execute.\n\n\nrng\n: The random number generator to use when generating output.\n\n\ncharLimit\n: The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.\n\n\ntimeout\n: The maximum number of seconds that the pattern will execute for.\n\n\nargs\n: The arguments to pass to the pattern.\n\n\n\n\nDoFile(string, int, double, RantProgramArgs)\n[link]\n\n\n\n\nWarning\n\n\nThis item is deprecated.\n\nUse an overload of Do() that accepts a RantProgram instead of a string.\n\n\n\n\nLoads the file located at the specified path and executes it, returning the resulting output.\n\n\npublic\n \nRant\n.\nRantOutput\n \nDoFile\n(\nstring\n \npath\n,\n \nint\n \ncharLimit\n \n=\n \n0\n,\n \ndouble\n \ntimeout\n \n=\n \n-\n1d\n,\n \nRantProgramArgs\n \nargs\n \n=\n \nnull\n)\n\n\n\n\n\n\nParameters\n\n\n\n\npath\n: The path to the file to execute.\n\n\ncharLimit\n: The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.\n\n\ntimeout\n: The maximum number of seconds that the pattern will execute for.\n\n\nargs\n: The arguments to pass to the pattern.\n\n\n\n\nDoFile(string, long, int, double, RantProgramArgs)\n[link]\n\n\nLoads the file located at the specified path and executes it using a custom seed, returning the resulting output.\n\n\npublic\n \nRant\n.\nRantOutput\n \nDoFile\n(\nstring\n \npath\n,\n \nlong\n \nseed\n,\n \nint\n \ncharLimit\n \n=\n \n0\n,\n \ndouble\n \ntimeout\n \n=\n \n-\n1d\n,\n \nRantProgramArgs\n \nargs\n \n=\n \nnull\n)\n\n\n\n\n\n\nParameters\n\n\n\n\npath\n: The path to the file to execute.\n\n\nseed\n: The seed to generate output with.\n\n\ncharLimit\n: The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.\n\n\ntimeout\n: The maximum number of seconds that the pattern will execute for.\n\n\nargs\n: The arguments to pass to the pattern.\n\n\n\n\nDoFile(string, RNG, int, double, RantProgramArgs)\n[link]\n\n\nLoads the file located at the specified path and executes it using a custom seed, returning the resulting output.\n\n\npublic\n \nRant\n.\nRantOutput\n \nDoFile\n(\nstring\n \npath\n,\n \nRNG\n \nrng\n,\n \nint\n \ncharLimit\n \n=\n \n0\n,\n \ndouble\n \ntimeout\n \n=\n \n-\n1d\n,\n \nRantProgramArgs\n \nargs\n \n=\n \nnull\n)\n\n\n\n\n\n\nParameters\n\n\n\n\npath\n: The path to the file to execute.\n\n\nrng\n: The random number generator to use when generating output.\n\n\ncharLimit\n: The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.\n\n\ntimeout\n: The maximum number of seconds that the pattern will execute for.\n\n\nargs\n: The arguments to pass to the pattern.\n\n\n\n\nDoName(string, int, double, RantProgramArgs)\n[link]\n\n\nExecutes a pattern that has been loaded from a package and returns the resulting output.\n\n\npublic\n \nRant\n.\nRantOutput\n \nDoName\n(\nstring\n \npatternName\n,\n \nint\n \ncharLimit\n \n=\n \n0\n,\n \ndouble\n \ntimeout\n \n=\n \n-\n1d\n,\n \nRantProgramArgs\n \nargs\n \n=\n \nnull\n)\n\n\n\n\n\n\nParameters\n\n\n\n\npatternName\n: The name of the pattern to execute.\n\n\ncharLimit\n: The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.\n\n\ntimeout\n: The maximum number of seconds that the pattern will execute for.\n\n\nargs\n: The arguments to pass to the pattern.\n\n\n\n\nDoName(string, long, int, double, RantProgramArgs)\n[link]\n\n\nExecutes a pattern that has been loaded from a package and returns the resulting output.\n\n\npublic\n \nRant\n.\nRantOutput\n \nDoName\n(\nstring\n \npatternName\n,\n \nlong\n \nseed\n,\n \nint\n \ncharLimit\n \n=\n \n0\n,\n \ndouble\n \ntimeout\n \n=\n \n-\n1d\n,\n \nRantProgramArgs\n \nargs\n \n=\n \nnull\n)\n\n\n\n\n\n\nParameters\n\n\n\n\npatternName\n: The name of the pattern to execute.\n\n\nseed\n: The seed to generate output with.\n\n\ncharLimit\n: The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.\n\n\ntimeout\n: The maximum number of seconds that the pattern will execute for.\n\n\nargs\n: The arguments to pass to the pattern.\n\n\n\n\nDoName(string, RNG, int, double, RantProgramArgs)\n[link]\n\n\nExecutes a pattern that has been loaded from a package using a custom random number generator and returns the resulting\n            output.\n\n\npublic\n \nRant\n.\nRantOutput\n \nDoName\n(\nstring\n \npatternName\n,\n \nRNG\n \nrng\n,\n \nint\n \ncharLimit\n \n=\n \n0\n,\n \ndouble\n \ntimeout\n \n=\n \n-\n1d\n,\n \nRantProgramArgs\n \nargs\n \n=\n \nnull\n)\n\n\n\n\n\n\nParameters\n\n\n\n\npatternName\n: The name of the pattern to execute.\n\n\nrng\n: The random number generator to use when generating output.\n\n\ncharLimit\n: The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.\n\n\ntimeout\n: The maximum number of seconds that the pattern will execute for.\n\n\nargs\n: The arguments to pass to the pattern.\n\n\n\n\nDoSerial(RantProgram, int, double, RantProgramArgs)\n[link]\n\n\nExecutes the specified pattern and returns a series of outputs.\n\n\npublic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nRant\n.\nRantOutput\n>\n \nDoSerial\n(\nRantProgram\n \ninput\n,\n \nint\n \ncharLimit\n \n=\n \n0\n,\n \ndouble\n \ntimeout\n \n=\n \n-\n1d\n,\n \nRantProgramArgs\n \nargs\n \n=\n \nnull\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ninput\n: The pattern to execute.\n\n\ncharLimit\n: The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.\n\n\ntimeout\n: The maximum number of seconds that the pattern will execute for.\n\n\nargs\n: The arguments to pass to the pattern.\n\n\n\n\nDoSerial(string, int, double, RantProgramArgs)\n[link]\n\n\n\n\nWarning\n\n\nThis item is deprecated.\n\nUse an overload of DoSerial() that accepts a RantProgram instead of a string.\n\n\n\n\nExecutes the specified pattern and returns a series of outputs.\n\n\npublic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nRant\n.\nRantOutput\n>\n \nDoSerial\n(\nstring\n \ninput\n,\n \nint\n \ncharLimit\n \n=\n \n0\n,\n \ndouble\n \ntimeout\n \n=\n \n-\n1d\n,\n \nRantProgramArgs\n \nargs\n \n=\n \nnull\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ninput\n: The pattern to execute.\n\n\ncharLimit\n: The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.\n\n\ntimeout\n: The maximum number of seconds that the pattern will execute for.\n\n\nargs\n: The arguments to pass to the pattern.\n\n\n\n\nDoSerial(RantProgram, long, int, double, RantProgramArgs)\n[link]\n\n\nExecutes the specified pattern and returns a series of outputs.\n\n\npublic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nRant\n.\nRantOutput\n>\n \nDoSerial\n(\nRantProgram\n \ninput\n,\n \nlong\n \nseed\n,\n \nint\n \ncharLimit\n \n=\n \n0\n,\n \ndouble\n \ntimeout\n \n=\n \n-\n1d\n,\n \nRantProgramArgs\n \nargs\n \n=\n \nnull\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ninput\n: The patten to execute.\n\n\nseed\n: The seed to generate output with.\n\n\ncharLimit\n: The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.\n\n\ntimeout\n: The maximum number of seconds that the pattern will execute for.\n\n\nargs\n: The arguments to pass to the pattern.\n\n\n\n\nDoSerial(RantProgram, RNG, int, double, RantProgramArgs)\n[link]\n\n\nExecutes the specified pattern and returns a series of outputs.\n\n\npublic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nRant\n.\nRantOutput\n>\n \nDoSerial\n(\nRantProgram\n \ninput\n,\n \nRNG\n \nrng\n,\n \nint\n \ncharLimit\n \n=\n \n0\n,\n \ndouble\n \ntimeout\n \n=\n \n-\n1d\n,\n \nRantProgramArgs\n \nargs\n \n=\n \nnull\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ninput\n: The pattero to execute.\n\n\nrng\n: The random number generator to use when generating output.\n\n\ncharLimit\n: The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.\n\n\ntimeout\n: The maximum number of seconds that the pattern will execute for.\n\n\nargs\n: The arguments to pass to the pattern.\n\n\n\n\nDoSerial(string, long, int, double, RantProgramArgs)\n[link]\n\n\n\n\nWarning\n\n\nThis item is deprecated.\n\nUse an overload of DoSerial() that accepts a RantProgram instead of a string.\n\n\n\n\nExecutes the specified pattern and returns a series of outputs.\n\n\npublic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nRant\n.\nRantOutput\n>\n \nDoSerial\n(\nstring\n \ninput\n,\n \nlong\n \nseed\n,\n \nint\n \ncharLimit\n \n=\n \n0\n,\n \ndouble\n \ntimeout\n \n=\n \n-\n1d\n,\n \nRantProgramArgs\n \nargs\n \n=\n \nnull\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ninput\n: The pattern to execute.\n\n\nseed\n: The seed to generate output with.\n\n\ncharLimit\n: The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.\n\n\ntimeout\n: The maximum number of seconds that the pattern will execute for.\n\n\nargs\n: The arguments to pass to the pattern.\n\n\n\n\nDoSerial(string, RNG, int, double, RantProgramArgs)\n[link]\n\n\n\n\nWarning\n\n\nThis item is deprecated.\n\nUse an overload of DoSerial() that accepts a RantProgram instead of a string.\n\n\n\n\nExecutes the specified pattern and returns a series of outputs.\n\n\npublic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nRant\n.\nRantOutput\n>\n \nDoSerial\n(\nstring\n \ninput\n,\n \nRNG\n \nrng\n,\n \nint\n \ncharLimit\n \n=\n \n0\n,\n \ndouble\n \ntimeout\n \n=\n \n-\n1d\n,\n \nRantProgramArgs\n \nargs\n \n=\n \nnull\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ninput\n: The pattern to execute.\n\n\nrng\n: The random number generator to use when generating output.\n\n\ncharLimit\n: The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.\n\n\ntimeout\n: The maximum number of seconds that the pattern will execute for.\n\n\nargs\n: The arguments to pass to the pattern.\n\n\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nLoadPackage(RantPackage)\n[link]\n\n\nLoads the specified package into the engine.\n\n\npublic\n \nvoid\n \nLoadPackage\n(\nRantPackage\n \npackage\n)\n\n\n\n\n\n\nParameters\n\n\n\n\npackage\n: The package to load.\n\n\n\n\nLoadPackage(string)\n[link]\n\n\nLoads the package at the specified file path into the engine.\n\n\npublic\n \nvoid\n \nLoadPackage\n(\nstring\n \npath\n)\n\n\n\n\n\n\nParameters\n\n\n\n\npath\n: The path to the package to load.\n\n\n\n\nProgramNameLoaded(string)\n[link]\n\n\nReturns a boolean value indicating whether a program by the specified name has been loaded from a package.\n\n\npublic\n \nbool\n \nProgramNameLoaded\n(\nstring\n \npatternName\n)\n\n\n\n\n\n\nParameters\n\n\n\n\npatternName\n: The name of the program to check.\n\n\n\n\nResetCarrierState()\n[link]\n\n\nDeletes all state data in the engine's persisted carrier state, if available.\n\n\npublic\n \nvoid\n \nResetCarrierState\n()\n\n\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nRantFormat class (Rant.Formats)\n[link]\n\n\nNamespace:\n Rant.Formats\n\n\nInheritance:\n Object \u2192 RantFormat\n\n\nDescribes language-specific formatting instructions for localizing interpreter output.\n\n\npublic\n \nsealed\n \nclass\n \nRantFormat\n\n\n\n\n\n\nConstructors\n[link]\n\n\nRantFormat()\n[link]\n\n\nCreates a new RantFormat instance with default values.\n\n\npublic\n \nRantFormat\n()\n\n\n\n\n\n\nRantFormat(CultureInfo, WritingSystem, IEnumerable\n, Pluralizer, NumberVerbalizer)\n[link]\n\n\nCreates a new RantFormat instance with the specified configuration data.\n\n\npublic\n \nRantFormat\n(\nCultureInfo\n \nculture\n,\n \nWritingSystem\n \nwritingSystem\n,\n \nIEnumerable\n<\nstring\n>\n \ntitleCaseExclusions\n,\n \nPluralizer\n \npluralizer\n,\n \nNumberVerbalizer\n \nnumVerbalizer\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nculture\n: The culture to associate with the format.\n\n\nwritingSystem\n: The writing system to use.\n\n\ntitleCaseExclusions\n: A collection of words to exclude from title case capitalization.\n\n\npluralizer\n: The pluralizer to use.\n\n\nnumVerbalizer\n: The number verbalizer to use.\n\n\n\n\nProperties\n[link]\n\n\nCulture\n[link]\n\n\nThe culture to format output strings with.\n\n\npublic\n \nCultureInfo\n \nCulture\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nNumberVerbalizer\n[link]\n\n\nThe number verbalizer for the current format.\n\n\npublic\n \nNumberVerbalizer\n \nNumberVerbalizer\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nPluralizer\n[link]\n\n\nThe pluralizer used by the [plural] function to infer plural nouns.\n\n\npublic\n \nPluralizer\n \nPluralizer\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nWritingSystem\n[link]\n\n\nThe writing system for the current format.\n\n\npublic\n \nWritingSystem\n \nWritingSystem\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nFields\n[link]\n\n\nEnglish\n[link]\n\n\nEnglish formatting.\n\n\npublic\n \nstatic\n \nreadonly\n \nRantFormat\n \nEnglish\n;\n\n\n\n\n\n\nGerman\n[link]\n\n\nGerman formatting.\n\n\npublic\n \nstatic\n \nreadonly\n \nRantFormat\n \nGerman\n;\n\n\n\n\n\n\nMethods\n[link]\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nRantFunctionParameterType enum (Rant.Core.Framework)\n[link]\n\n\nNamespace:\n Rant.Core.Framework\n\n\nInheritance:\n Object \u2192 ValueType \u2192 Enum \u2192 RantFunctionParameterType\n\n\nDefines parameter types for Rant functions.\n\n\npublic\n \nenum\n \nRantFunctionParameterType\n\n\n\n\n\n\nFields\n[link]\n\n\nBoolean\n[link]\n\n\nParameter is a boolean.\n\n\npublic\n \nconst\n \nRantFunctionParameterType\n \nBoolean\n \n=\n \n6\n;\n\n\n\n\n\n\nFlags\n[link]\n\n\nParameter uses combinable flags.\n\n\npublic\n \nconst\n \nRantFunctionParameterType\n \nFlags\n \n=\n \n4\n;\n\n\n\n\n\n\nMode\n[link]\n\n\nParameter describes a mode, which is one of a specific set of allowed values.\n\n\npublic\n \nconst\n \nRantFunctionParameterType\n \nMode\n \n=\n \n3\n;\n\n\n\n\n\n\nNumber\n[link]\n\n\nParameter is numeric.\n\n\npublic\n \nconst\n \nRantFunctionParameterType\n \nNumber\n \n=\n \n2\n;\n\n\n\n\n\n\nPattern\n[link]\n\n\nParameter is a lazily evaluated pattern.\n\n\npublic\n \nconst\n \nRantFunctionParameterType\n \nPattern\n \n=\n \n1\n;\n\n\n\n\n\n\nRantObject\n[link]\n\n\nParameter is a RantObject.\n\n\npublic\n \nconst\n \nRantFunctionParameterType\n \nRantObject\n \n=\n \n5\n;\n\n\n\n\n\n\nString\n[link]\n\n\nParameter is a static string.\n\n\npublic\n \nconst\n \nRantFunctionParameterType\n \nString\n \n=\n \n0\n;\n\n\n\n\n\n\nMethods\n[link]\n\n\nCompareTo(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nCompareTo\n(\nobject\n \ntarget\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ntarget\n: \nNo Description\n\n\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nGetTypeCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nTypeCode\n \nGetTypeCode\n()\n\n\n\n\n\n\nHasFlag(Enum)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nHasFlag\n(\nEnum\n \nflag\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nflag\n: \nNo Description\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nToString(string)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n(\nstring\n \nformat\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nformat\n: \nNo Description\n\n\n\n\nToString(IFormatProvider)\n[link]\n\n\n\n\nWarning\n\n\nThis item is deprecated.\n\nThe provider argument is not used. Please use ToString().\n\n\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n(\nIFormatProvider\n \nprovider\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nprovider\n: \nNo Description\n\n\n\n\nToString(string, IFormatProvider)\n[link]\n\n\n\n\nWarning\n\n\nThis item is deprecated.\n\nThe provider argument is not used. Please use ToString(String).\n\n\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n(\nstring\n \nformat\n,\n \nIFormatProvider\n \nprovider\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nformat\n: \nNo Description\n\n\nprovider\n: \nNo Description\n\n\n\n\nRantInternalException class (Rant)\n[link]\n\n\nNamespace:\n Rant\n\n\nInheritance:\n Object \u2192 Exception \u2192 RantInternalException\n\n\nRepresents an error that has been caused by a problem inside the Rant engine. This typically indicates the presence of\n            a bug.\n\n\npublic\n \nsealed\n \nclass\n \nRantInternalException\n \n:\n \nSystem\n.\nException\n,\n \nSystem\n.\nRuntime\n.\nSerialization\n.\nISerializable\n,\n \nSystem\n.\nRuntime\n.\nInteropServices\n.\n_Exception\n\n\n\n\n\n\nProperties\n[link]\n\n\nData\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nIDictionary\n \nData\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nHelpLink\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nHelpLink\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nHResult\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nHResult\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nInnerException\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nException\n \nInnerException\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nMessage\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nMessage\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nSource\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nSource\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nStackTrace\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nStackTrace\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nTargetSite\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nMethodBase\n \nTargetSite\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nMethods\n[link]\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetBaseException()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nException\n \nGetBaseException\n()\n\n\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetObjectData(SerializationInfo, StreamingContext)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nvoid\n \nGetObjectData\n(\nSerializationInfo\n \ninfo\n,\n \nStreamingContext\n \ncontext\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ninfo\n: \nNo Description\n\n\ncontext\n: \nNo Description\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nRantObject class (Rant.Core.ObjectModel)\n[link]\n\n\nNamespace:\n Rant.Core.ObjectModel\n\n\nInheritance:\n Object \u2192 RantObject\n\n\nRepresents a Rant variable.\n\n\npublic\n \nsealed\n \nclass\n \nRantObject\n\n\n\n\n\n\nConstructors\n[link]\n\n\nRantObject()\n[link]\n\n\nCreates a null object.\n\n\npublic\n \nRantObject\n()\n\n\n\n\n\n\nRantObject(object)\n[link]\n\n\nInitializes a new instance of the  class from the specified object.\n\n\npublic\n \nRantObject\n(\nobject\n \no\n)\n\n\n\n\n\n\nParameters\n\n\n\n\no\n: The object to store in the  instance.\n\n\n\n\nRantObject(RantObjectType)\n[link]\n\n\nCreates a new RantObject with the specified object type and a default value.\n\n\npublic\n \nRantObject\n(\nRantObjectType\n \ntype\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ntype\n: The type of object to create.\n\n\n\n\nProperties\n[link]\n\n\nLength\n[link]\n\n\nGets the length of the object. For strings, this is the character count. For lists, this is the item count. For all other types, -1 is returned.\n\n\npublic\n \nint\n \nLength\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nType\n[link]\n\n\nThe type of the object.\n\n\npublic\n \nRantObjectType\n \nType\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nValue\n[link]\n\n\nThe value of the object.\n\n\npublic\n \nobject\n \nValue\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nIndexers\n[link]\n\n\nthis[int index]\n[link]\n\n\nGets or sets the object at the specified index in the object.\n            Only works with list objects.\n\n\npublic\n \nRantObject\n \nthis\n[\nint\n \nindex\n]\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nFields\n[link]\n\n\nFalse\n[link]\n\n\nFalse\n\n\npublic\n \nstatic\n \nreadonly\n \nRantObject\n \nFalse\n;\n\n\n\n\n\n\nNull\n[link]\n\n\nNull\n\n\npublic\n \nstatic\n \nreadonly\n \nRantObject\n \nNull\n;\n\n\n\n\n\n\nTrue\n[link]\n\n\nTrue\n\n\npublic\n \nstatic\n \nreadonly\n \nRantObject\n \nTrue\n;\n\n\n\n\n\n\nMethods\n[link]\n\n\nClone()\n[link]\n\n\nReturns another RantObject instance with the exact same value as the current instance.\n\n\npublic\n \nRant\n.\nCore\n.\nObjectModel\n.\nRantObject\n \nClone\n()\n\n\n\n\n\n\nConvertTo(RantObjectType)\n[link]\n\n\nConverts the current object to a RantObject of the specified type and returns it.\n\n\npublic\n \nRant\n.\nCore\n.\nObjectModel\n.\nRantObject\n \nConvertTo\n(\nRantObjectType\n \ntargetType\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ntargetType\n: The object type to convert to.\n\n\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nToString()\n[link]\n\n\nReturns a string representation of the current RantObject.\n\n\npublic\n \nvirtual\n \nstring\n \nToString\n()\n\n\n\n\n\n\nRantObjectType enum (Rant.Core.ObjectModel)\n[link]\n\n\nNamespace:\n Rant.Core.ObjectModel\n\n\nInheritance:\n Object \u2192 ValueType \u2192 Enum \u2192 RantObjectType\n\n\nDefines object types used by Rant.\n\n\npublic\n \nenum\n \nRantObjectType\n\n\n\n\n\n\nFields\n[link]\n\n\nAction\n[link]\n\n\nRepresents a VM action.\n\n\npublic\n \nconst\n \nRantObjectType\n \nAction\n \n=\n \n4\n;\n\n\n\n\n\n\nBoolean\n[link]\n\n\nRepresents a boolean value.\n\n\npublic\n \nconst\n \nRantObjectType\n \nBoolean\n \n=\n \n2\n;\n\n\n\n\n\n\nList\n[link]\n\n\nRepresents a resizable set of values.\n\n\npublic\n \nconst\n \nRantObjectType\n \nList\n \n=\n \n3\n;\n\n\n\n\n\n\nNull\n[link]\n\n\nRepresents a lack of a value.\n\n\npublic\n \nconst\n \nRantObjectType\n \nNull\n \n=\n \n6\n;\n\n\n\n\n\n\nNumber\n[link]\n\n\nRepresents a decimal number.\n\n\npublic\n \nconst\n \nRantObjectType\n \nNumber\n \n=\n \n0\n;\n\n\n\n\n\n\nString\n[link]\n\n\nRepresents a series of Unicode characters.\n\n\npublic\n \nconst\n \nRantObjectType\n \nString\n \n=\n \n1\n;\n\n\n\n\n\n\nSubroutine\n[link]\n\n\nRepresents a subroutine.\n\n\npublic\n \nconst\n \nRantObjectType\n \nSubroutine\n \n=\n \n5\n;\n\n\n\n\n\n\nUndefined\n[link]\n\n\nRepresents a lack of any variable at all.\n\n\npublic\n \nconst\n \nRantObjectType\n \nUndefined\n \n=\n \n7\n;\n\n\n\n\n\n\nMethods\n[link]\n\n\nCompareTo(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nCompareTo\n(\nobject\n \ntarget\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ntarget\n: \nNo Description\n\n\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nGetTypeCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nTypeCode\n \nGetTypeCode\n()\n\n\n\n\n\n\nHasFlag(Enum)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nHasFlag\n(\nEnum\n \nflag\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nflag\n: \nNo Description\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nToString(string)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n(\nstring\n \nformat\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nformat\n: \nNo Description\n\n\n\n\nToString(IFormatProvider)\n[link]\n\n\n\n\nWarning\n\n\nThis item is deprecated.\n\nThe provider argument is not used. Please use ToString().\n\n\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n(\nIFormatProvider\n \nprovider\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nprovider\n: \nNo Description\n\n\n\n\nToString(string, IFormatProvider)\n[link]\n\n\n\n\nWarning\n\n\nThis item is deprecated.\n\nThe provider argument is not used. Please use ToString(String).\n\n\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n(\nstring\n \nformat\n,\n \nIFormatProvider\n \nprovider\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nformat\n: \nNo Description\n\n\nprovider\n: \nNo Description\n\n\n\n\nRantOutput class (Rant)\n[link]\n\n\nNamespace:\n Rant\n\n\nInheritance:\n Object \u2192 RantOutput\n\n\nRepresents a collection of strings generated by a pattern.\n\n\npublic\n \nsealed\n \nclass\n \nRantOutput\n \n:\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nRant\n.\nRantOutputEntry\n>,\n \nSystem\n.\nCollections\n.\nIEnumerable\n\n\n\n\n\n\nProperties\n[link]\n\n\nBaseGeneration\n[link]\n\n\nThe generation at which the RNG was initially set before the pattern was run.\n\n\npublic\n \nlong\n \nBaseGeneration\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nMain\n[link]\n\n\nThe main output string.\n\n\npublic\n \nstring\n \nMain\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nSeed\n[link]\n\n\nThe seed used to generate the output.\n\n\npublic\n \nlong\n \nSeed\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nIndexers\n[link]\n\n\nthis[string channel]\n[link]\n\n\nGets the output of the channel with the specified name.\n\n\npublic\n \nstring\n \nthis\n[\nstring\n \nchannel\n]\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nthis[params string[] channels]\n[link]\n\n\nGets an array containing the values of the specified channels, in the order they appear.\n\n\npublic\n \nstring\n[]\n \nthis\n[\nparams\n \nstring\n[]\n \nchannels\n]\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nMethods\n[link]\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetEnumerator()\n[link]\n\n\nReturns an enumerator that iterates through the outputs in the collection.\n\n\npublic\n \nvirtual\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerator\n<\nRant\n.\nRantOutputEntry\n>\n \nGetEnumerator\n()\n\n\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nToString()\n[link]\n\n\nReturns the output from the \"main\" channel.\n\n\npublic\n \nvirtual\n \nstring\n \nToString\n()\n\n\n\n\n\n\nRantOutputEntry class (Rant)\n[link]\n\n\nNamespace:\n Rant\n\n\nInheritance:\n Object \u2192 RantOutputEntry\n\n\nRepresents the output of a single channel.\n\n\npublic\n \nsealed\n \nclass\n \nRantOutputEntry\n\n\n\n\n\n\nProperties\n[link]\n\n\nName\n[link]\n\n\nGets the name of the channel.\n\n\npublic\n \nstring\n \nName\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nValue\n[link]\n\n\nGets the value of the channel.\n\n\npublic\n \nstring\n \nValue\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nVisiblity\n[link]\n\n\nThe visibility of the channel that created the output entry.\n\n\npublic\n \nChannelVisibility\n \nVisiblity\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nMethods\n[link]\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nRantPackage class (Rant.Resources)\n[link]\n\n\nNamespace:\n Rant.Resources\n\n\nInheritance:\n Object \u2192 RantPackage\n\n\nRepresents a collection of patterns and tables that can be exported to an archive file.\n\n\npublic\n \nsealed\n \nclass\n \nRantPackage\n\n\n\n\n\n\nConstructors\n[link]\n\n\nRantPackage()\n[link]\n\n\nNo Summary\n\n\npublic\n \nRantPackage\n()\n\n\n\n\n\n\nProperties\n[link]\n\n\nAuthors\n[link]\n\n\nThe authors of the package.\n\n\npublic\n \nstring\n[]\n \nAuthors\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nDescription\n[link]\n\n\nThe description for the package.\n\n\npublic\n \nstring\n \nDescription\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nID\n[link]\n\n\nThe ID of the package.\n\n\npublic\n \nstring\n \nID\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nTags\n[link]\n\n\nThe tags associated with the package.\n\n\npublic\n \nstring\n[]\n \nTags\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nTitle\n[link]\n\n\nThe display name of the package.\n\n\npublic\n \nstring\n \nTitle\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nVersion\n[link]\n\n\nThe package version.\n\n\npublic\n \nRantPackageVersion\n \nVersion\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nMethods\n[link]\n\n\nAddDependency(RantPackageDependency)\n[link]\n\n\nAdds the specified dependency to the package.\n\n\npublic\n \nvoid\n \nAddDependency\n(\nRantPackageDependency\n \ndependency\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ndependency\n: The dependency to add.\n\n\n\n\nAddDependency(string, string)\n[link]\n\n\nAdds the specified dependency to the package.\n\n\npublic\n \nvoid\n \nAddDependency\n(\nstring\n \nid\n,\n \nstring\n \nversion\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nid\n: The ID of the package.\n\n\nversion\n: The package version to target.\n\n\n\n\nAddResource(RantResource)\n[link]\n\n\nAdds the specified resource to the package.\n\n\npublic\n \nbool\n \nAddResource\n(\nRantResource\n \nresource\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nresource\n: The resource to add.\n\n\n\n\nClearDependencies()\n[link]\n\n\nRemoves all dependencies from the package.\n\n\npublic\n \nvoid\n \nClearDependencies\n()\n\n\n\n\n\n\nContainsResource(RantResource)\n[link]\n\n\nDetermines whether the package contains the specified resource.\n\n\npublic\n \nbool\n \nContainsResource\n(\nRantResource\n \nresource\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nresource\n: The resource to search for.\n\n\n\n\nDependsOn(RantPackageDependency)\n[link]\n\n\nDetermines whether the package has the specified dependency.\n\n\npublic\n \nbool\n \nDependsOn\n(\nRantPackageDependency\n \ndependency\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ndependency\n: The dependency to check for.\n\n\n\n\nDependsOn(string, string)\n[link]\n\n\nDetermines whether the package depends on the specified package.\n\n\npublic\n \nbool\n \nDependsOn\n(\nstring\n \nid\n,\n \nstring\n \nversion\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nid\n: The ID of the package to check for.\n\n\nversion\n: The version of the package to check for.\n\n\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetDependencies()\n[link]\n\n\nEnumerates the package's dependencies.\n\n\npublic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nRant\n.\nResources\n.\nRantPackageDependency\n>\n \nGetDependencies\n()\n\n\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetResources()\n[link]\n\n\nEnumerates all resources in the package.\n\n\npublic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nRant\n.\nResources\n.\nRantResource\n>\n \nGetResources\n()\n\n\n\n\n\n\nGetResources\\<TResource>()\n[link]\n\n\nEnumerates all resources in the package.\n\n\npublic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nTResource\n>\n \nGetResources\n<\nTResource\n>()\n\n\n\n\n\n\nType Parameters\n\n\n\n\nTResource\n: (No Description)\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nLoad(string)\n[link]\n\n\nLoads a package from the specified path and returns it as a RantPackage object.\n\n\npublic\n \nstatic\n \nRant\n.\nResources\n.\nRantPackage\n \nLoad\n(\nstring\n \npath\n)\n\n\n\n\n\n\nParameters\n\n\n\n\npath\n: The path to the package file to load.\n\n\n\n\nLoad(Stream)\n[link]\n\n\nLoads a package from the specified stream and returns it as a RantPackage object.\n\n\npublic\n \nstatic\n \nRant\n.\nResources\n.\nRantPackage\n \nLoad\n(\nStream\n \nsource\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nsource\n: The stream to load the package data from.\n\n\n\n\nRemoveDependency(RantPackageDependency)\n[link]\n\n\nRemoves the specified dependency from the package.\n\n\npublic\n \nbool\n \nRemoveDependency\n(\nRantPackageDependency\n \ndependency\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ndependency\n: The dependency to remove.\n\n\n\n\nRemoveDependency(string, string)\n[link]\n\n\nRemoves the specified dependency from the package.\n\n\npublic\n \nbool\n \nRemoveDependency\n(\nstring\n \nid\n,\n \nstring\n \nversion\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nid\n: The ID of the dependency to remove.\n\n\nversion\n: The version of the dependency to remove.\n\n\n\n\nRemoveResource(RantResource)\n[link]\n\n\nRemoves the specified resource from the package.\n\n\npublic\n \nbool\n \nRemoveResource\n(\nRantResource\n \nresource\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nresource\n: The resource to remove.\n\n\n\n\nSave(string, bool)\n[link]\n\n\nSaves the package to the specified file path.\n\n\npublic\n \nvoid\n \nSave\n(\nstring\n \npath\n,\n \nbool\n \ncompress\n \n=\n \nTrue\n)\n\n\n\n\n\n\nParameters\n\n\n\n\npath\n: The path to the file to create.\n\n\ncompress\n: Specifies whether to compress the package contents.\n\n\n\n\nToString()\n[link]\n\n\nReturns a string containing the title and version of the package.\n\n\npublic\n \nvirtual\n \nstring\n \nToString\n()\n\n\n\n\n\n\nRantPackageDependency class (Rant.Resources)\n[link]\n\n\nNamespace:\n Rant.Resources\n\n\nInheritance:\n Object \u2192 RantPackageDependency\n\n\nRepresents a dependency for a Rant package.\n\n\npublic\n \nsealed\n \nclass\n \nRantPackageDependency\n\n\n\n\n\n\nConstructors\n[link]\n\n\nRantPackageDependency(string, string)\n[link]\n\n\nInitializes a new RantPackageDependency object.\n\n\npublic\n \nRantPackageDependency\n(\nstring\n \nid\n,\n \nstring\n \nversion\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nid\n: The ID of the package.\n\n\nversion\n: The targeted version of the package.\n\n\n\n\nRantPackageDependency(string, RantPackageVersion)\n[link]\n\n\nInitializes a new RantPackageDependency object.\n\n\npublic\n \nRantPackageDependency\n(\nstring\n \nid\n,\n \nRantPackageVersion\n \nversion\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nid\n: The ID of the package.\n\n\nversion\n: The targeted version of the package.\n\n\n\n\nProperties\n[link]\n\n\nAllowNewer\n[link]\n\n\nSpecifies whether the dependency will accept a package newer than the one given.\n\n\npublic\n \nbool\n \nAllowNewer\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nID\n[link]\n\n\nThe ID of the package.\n\n\npublic\n \nstring\n \nID\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nVersion\n[link]\n\n\nThe targeted version of the package.\n\n\npublic\n \nRantPackageVersion\n \nVersion\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nMethods\n[link]\n\n\nCheckVersion(RantPackageVersion)\n[link]\n\n\nChecks if the specified version is compatible with the current dependency.\n\n\npublic\n \nbool\n \nCheckVersion\n(\nRantPackageVersion\n \nversion\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nversion\n: The version to check.\n\n\n\n\nCreate(RantPackage)\n[link]\n\n\nCreates a dependency for the specified package.\n\n\npublic\n \nstatic\n \nRant\n.\nResources\n.\nRantPackageDependency\n \nCreate\n(\nRantPackage\n \npackage\n)\n\n\n\n\n\n\nParameters\n\n\n\n\npackage\n: The package to create the dependency for.\n\n\n\n\nEquals(object)\n[link]\n\n\nDetermines whether the current RantPackageDependency is shares an ID with the specified object.\n\n\npublic\n \nvirtual\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: The object to compare to.\n\n\n\n\nGetHashCode()\n[link]\n\n\nGets the hash code for the instance.\n\n\npublic\n \nvirtual\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nToString()\n[link]\n\n\nReturns a string representation of the current dependency.\n\n\npublic\n \nvirtual\n \nstring\n \nToString\n()\n\n\n\n\n\n\nRantPackageVersion class (Rant.Resources)\n[link]\n\n\nNamespace:\n Rant.Resources\n\n\nInheritance:\n Object \u2192 RantPackageVersion\n\n\nRepresents a version number for a Rant package.\n\n\npublic\n \nsealed\n \nclass\n \nRantPackageVersion\n\n\n\n\n\n\nConstructors\n[link]\n\n\nRantPackageVersion(int, int, int)\n[link]\n\n\nInitializes a new RantPackageVersion instance with the specified values.\n\n\npublic\n \nRantPackageVersion\n(\nint\n \nmajor\n,\n \nint\n \nminor\n,\n \nint\n \nrevision\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nmajor\n: The major version.\n\n\nminor\n: The minor version.\n\n\nrevision\n: The revision number.\n\n\n\n\nRantPackageVersion()\n[link]\n\n\nInitializes a new RantPackageVersion instance with all values set to zero.\n\n\npublic\n \nRantPackageVersion\n()\n\n\n\n\n\n\nProperties\n[link]\n\n\nMajor\n[link]\n\n\nThe major version.\n\n\npublic\n \nint\n \nMajor\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nMinor\n[link]\n\n\nThe minor version.\n\n\npublic\n \nint\n \nMinor\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nRevision\n[link]\n\n\nThe revision number.\n\n\npublic\n \nint\n \nRevision\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nMethods\n[link]\n\n\nEquals(object)\n[link]\n\n\nDetermines whether the current version is equal to the specified object.\n\n\npublic\n \nvirtual\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: The object to compare to.\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \nvirtual\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nParse(string)\n[link]\n\n\nAttempts to parse a version string and returns the equivalent RantPackageVersion.\n\n\npublic\n \nstatic\n \nRant\n.\nResources\n.\nRantPackageVersion\n \nParse\n(\nstring\n \nversion\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nversion\n: The version string to parse.\n\n\n\n\nToString()\n[link]\n\n\nReturns a string representation of the current version.\n\n\npublic\n \nvirtual\n \nstring\n \nToString\n()\n\n\n\n\n\n\nTryParse(string, out RantPackageVersion&)\n[link]\n\n\nNo Summary\n\n\npublic\n \nstatic\n \nbool\n \nTryParse\n(\nstring\n \nversion\n,\n \nout\n \nRantPackageVersion\n&\n \nresult\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nversion\n: \nNo Description\n\n\nresult\n: \nNo Description\n\n\n\n\nRantProgram class (Rant)\n[link]\n\n\nNamespace:\n Rant\n\n\nInheritance:\n Object \u2192 RantResource \u2192 RantProgram\n\n\nRepresents a compiled pattern that can be executed by the engine. It is recommended to use this class when running the\n            same pattern multiple times.\n\n\npublic\n \nsealed\n \nclass\n \nRantProgram\n \n:\n \nRant\n.\nResources\n.\nRantResource\n\n\n\n\n\n\nProperties\n[link]\n\n\nCode\n[link]\n\n\nThe pattern from which the program was compiled.\n\n\npublic\n \nstring\n \nCode\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nName\n[link]\n\n\nGets or sets the name of the source code.\n\n\npublic\n \nstring\n \nName\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nType\n[link]\n\n\nDescribes the origin of the program.\n\n\npublic\n \nRantProgramOrigin\n \nType\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nMethods\n[link]\n\n\nCompileFile(string)\n[link]\n\n\nLoads the file located at the specified path and compiles a program from its contents.\n\n\npublic\n \nstatic\n \nRant\n.\nRantProgram\n \nCompileFile\n(\nstring\n \npath\n)\n\n\n\n\n\n\nParameters\n\n\n\n\npath\n: The path to the file to load.\n\n\n\n\nCompileString(string)\n[link]\n\n\nCompiles a program from the specified pattern.\n\n\npublic\n \nstatic\n \nRant\n.\nRantProgram\n \nCompileString\n(\nstring\n \ncode\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ncode\n: The pattern to compile.\n\n\n\n\nCompileString(string, string)\n[link]\n\n\nCompiles a program from a pattern with the specified name.\n\n\npublic\n \nstatic\n \nRant\n.\nRantProgram\n \nCompileString\n(\nstring\n \nname\n,\n \nstring\n \ncode\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nname\n: The name to give the source.\n\n\ncode\n: The pattern to compile.\n\n\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nLoadFile(string)\n[link]\n\n\nLoads a compiled Rant program from the file at the specified path.\n\n\npublic\n \nstatic\n \nRant\n.\nRantProgram\n \nLoadFile\n(\nstring\n \npath\n)\n\n\n\n\n\n\nParameters\n\n\n\n\npath\n: The path to load the program from.\n\n\n\n\nLoadStream(string, Stream)\n[link]\n\n\nLoads a compiled Rant program from the specified stream.\n\n\npublic\n \nstatic\n \nRant\n.\nRantProgram\n \nLoadStream\n(\nstring\n \nprogramName\n,\n \nStream\n \nstream\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nprogramName\n: The name to give to the program.\n\n\nstream\n: The stream to load the program from.\n\n\n\n\nSaveToFile(string)\n[link]\n\n\nSaves the compiled program to the file at the specified path.\n\n\npublic\n \nvoid\n \nSaveToFile\n(\nstring\n \npath\n)\n\n\n\n\n\n\nParameters\n\n\n\n\npath\n: The path to save the program to.\n\n\n\n\nSaveToStream(Stream)\n[link]\n\n\nSaves the compiled program to the specified stream.\n\n\npublic\n \nvoid\n \nSaveToStream\n(\nStream\n \nstream\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nstream\n: The stream to save the program to.\n\n\n\n\nToString()\n[link]\n\n\nReturns a string describing the pattern.\n\n\npublic\n \nvirtual\n \nstring\n \nToString\n()\n\n\n\n\n\n\nRantProgramArgs class (Rant)\n[link]\n\n\nNamespace:\n Rant\n\n\nInheritance:\n Object \u2192 RantProgramArgs\n\n\nRepresents a set of arguments that can be passed to a pattern.\n\n\npublic\n \nsealed\n \nclass\n \nRantProgramArgs\n\n\n\n\n\n\nConstructors\n[link]\n\n\nRantProgramArgs()\n[link]\n\n\nCreate a new, empty RantPatternArgs instance.\n\n\npublic\n \nRantProgramArgs\n()\n\n\n\n\n\n\nIndexers\n[link]\n\n\nthis[string key]\n[link]\n\n\nGets or sets an argument of the specified name.\n\n\npublic\n \nstring\n \nthis\n[\nstring\n \nkey\n]\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nMethods\n[link]\n\n\nClear()\n[link]\n\n\nClears all values.\n\n\npublic\n \nvoid\n \nClear\n()\n\n\n\n\n\n\nContains(string)\n[link]\n\n\nDetermines whether an argument by the specified name exists in the current list.\n\n\npublic\n \nbool\n \nContains\n(\nstring\n \nkey\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nkey\n: The name of the argument to search for.\n\n\n\n\nCreateFrom(object)\n[link]\n\n\nCreates a RantPatternArgs instance from the specified object.\n            Works with anonymous types!\n\n\npublic\n \nstatic\n \nRant\n.\nRantProgramArgs\n \nCreateFrom\n(\nobject\n \nvalue\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nvalue\n: The object to create an argument set from.\n\n\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nRemove(string)\n[link]\n\n\nRemoves the specified argument.\n\n\npublic\n \nbool\n \nRemove\n(\nstring\n \nkey\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nkey\n: The name of the argument to remove.\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nRantProgramOrigin enum (Rant)\n[link]\n\n\nNamespace:\n Rant\n\n\nInheritance:\n Object \u2192 ValueType \u2192 Enum \u2192 RantProgramOrigin\n\n\nIndicates the manner in which a referenced code source was created.\n\n\npublic\n \nenum\n \nRantProgramOrigin\n\n\n\n\n\n\nFields\n[link]\n\n\nFile\n[link]\n\n\nSource was loaded from a file.\n\n\npublic\n \nconst\n \nRantProgramOrigin\n \nFile\n \n=\n \n0\n;\n\n\n\n\n\n\nString\n[link]\n\n\nSource was loaded from a string.\n\n\npublic\n \nconst\n \nRantProgramOrigin\n \nString\n \n=\n \n1\n;\n\n\n\n\n\n\nMethods\n[link]\n\n\nCompareTo(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nCompareTo\n(\nobject\n \ntarget\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ntarget\n: \nNo Description\n\n\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nGetTypeCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nTypeCode\n \nGetTypeCode\n()\n\n\n\n\n\n\nHasFlag(Enum)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nHasFlag\n(\nEnum\n \nflag\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nflag\n: \nNo Description\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nToString(string)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n(\nstring\n \nformat\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nformat\n: \nNo Description\n\n\n\n\nToString(IFormatProvider)\n[link]\n\n\n\n\nWarning\n\n\nThis item is deprecated.\n\nThe provider argument is not used. Please use ToString().\n\n\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n(\nIFormatProvider\n \nprovider\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nprovider\n: \nNo Description\n\n\n\n\nToString(string, IFormatProvider)\n[link]\n\n\n\n\nWarning\n\n\nThis item is deprecated.\n\nThe provider argument is not used. Please use ToString(String).\n\n\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n(\nstring\n \nformat\n,\n \nIFormatProvider\n \nprovider\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nformat\n: \nNo Description\n\n\nprovider\n: \nNo Description\n\n\n\n\nRantResource class (Rant.Resources)\n[link]\n\n\nNamespace:\n Rant.Resources\n\n\nInheritance:\n Object \u2192 RantResource\n\n\nThe base class for Rant resources that can be included in a package.\n\n\npublic\n \nabstract\n \nclass\n \nRantResource\n\n\n\n\n\n\nMethods\n[link]\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nRantRuntimeException class (Rant)\n[link]\n\n\nNamespace:\n Rant\n\n\nInheritance:\n Object \u2192 Exception \u2192 RantRuntimeException\n\n\nRepresents a runtime error raised by the Rant engine.\n\n\npublic\n \nsealed\n \nclass\n \nRantRuntimeException\n \n:\n \nSystem\n.\nException\n,\n \nSystem\n.\nRuntime\n.\nSerialization\n.\nISerializable\n,\n \nSystem\n.\nRuntime\n.\nInteropServices\n.\n_Exception\n\n\n\n\n\n\nProperties\n[link]\n\n\nCode\n[link]\n\n\nThe source of the error.\n\n\npublic\n \nstring\n \nCode\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nColumn\n[link]\n\n\nThe column on which the error occurred.\n\n\npublic\n \nint\n \nColumn\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nData\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nIDictionary\n \nData\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nHelpLink\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nHelpLink\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nHResult\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nHResult\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nIndex\n[link]\n\n\nThe character index on which the error occurred.\n\n\npublic\n \nint\n \nIndex\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nInnerException\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nException\n \nInnerException\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nLine\n[link]\n\n\nThe line on which the error occurred.\n\n\npublic\n \nint\n \nLine\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nMessage\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nMessage\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nRantStackTrace\n[link]\n\n\nThe stack trace from the pattern.\n\n\npublic\n \nstring\n \nRantStackTrace\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nSource\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nSource\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nStackTrace\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nStackTrace\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nTargetSite\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nMethodBase\n \nTargetSite\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nMethods\n[link]\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetBaseException()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nException\n \nGetBaseException\n()\n\n\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetObjectData(SerializationInfo, StreamingContext)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nvoid\n \nGetObjectData\n(\nSerializationInfo\n \ninfo\n,\n \nStreamingContext\n \ncontext\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ninfo\n: \nNo Description\n\n\ncontext\n: \nNo Description\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nToString()\n[link]\n\n\nReturns a string representation of the runtime error, including the message and stack trace.\n\n\npublic\n \nvirtual\n \nstring\n \nToString\n()\n\n\n\n\n\n\nRantTableLoadException class (Rant.Vocabulary)\n[link]\n\n\nNamespace:\n Rant.Vocabulary\n\n\nInheritance:\n Object \u2192 Exception \u2192 RantTableLoadException\n\n\nThrown when Rant encounters an error while loading a dictionary table.\n\n\npublic\n \nsealed\n \nclass\n \nRantTableLoadException\n \n:\n \nSystem\n.\nException\n,\n \nSystem\n.\nRuntime\n.\nSerialization\n.\nISerializable\n,\n \nSystem\n.\nRuntime\n.\nInteropServices\n.\n_Exception\n\n\n\n\n\n\nProperties\n[link]\n\n\nColumn\n[link]\n\n\nGets the column on which the error occurred.\n\n\npublic\n \nint\n \nColumn\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nData\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nIDictionary\n \nData\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nHelpLink\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nHelpLink\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nHResult\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nHResult\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nInnerException\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nException\n \nInnerException\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nLine\n[link]\n\n\nGets the line number on which the error occurred.\n\n\npublic\n \nint\n \nLine\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nMessage\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nMessage\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nOrigin\n[link]\n\n\nGets a string describing where the table was loaded from. For tables loaded from disk, this will be the file path.\n\n\npublic\n \nstring\n \nOrigin\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nSource\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nSource\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nStackTrace\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nStackTrace\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nTargetSite\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nMethodBase\n \nTargetSite\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nMethods\n[link]\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetBaseException()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nException\n \nGetBaseException\n()\n\n\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetObjectData(SerializationInfo, StreamingContext)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nvoid\n \nGetObjectData\n(\nSerializationInfo\n \ninfo\n,\n \nStreamingContext\n \ncontext\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ninfo\n: \nNo Description\n\n\ncontext\n: \nNo Description\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nRantUtils class (Rant)\n[link]\n\n\nNamespace:\n Rant\n\n\nInheritance:\n Object \u2192 RantUtils\n\n\nContains miscellaneous utility methods that provide information about the Rant engine.\n\n\npublic\n \nstatic\n \nclass\n \nRantUtils\n\n\n\n\n\n\nMethods\n[link]\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nFunctionExists(string)\n[link]\n\n\nDetermines whether a function with the specified name is defined in the current engine version.\n\n\npublic\n \nstatic\n \nbool\n \nFunctionExists\n(\nstring\n \nfunctionName\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nfunctionName\n: The name of the function to search for. Argument is not case-sensitive.\n\n\n\n\nGetFunction(string)\n[link]\n\n\nReturns the function with the specified name. The return value will be null if the function is not found.\n\n\npublic\n \nstatic\n \nRant\n.\nMetadata\n.\nIRantFunctionGroup\n \nGetFunction\n(\nstring\n \nfunctionName\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nfunctionName\n: The name of the function to retrieve.\n\n\n\n\nGetFunctionAliases(string)\n[link]\n\n\nEnumerates the aliases assigned to the specified function name.\n\n\npublic\n \nstatic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nstring\n>\n \nGetFunctionAliases\n(\nstring\n \nfunctionName\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nfunctionName\n: The function name to retrieve aliases for.\n\n\n\n\nGetFunctionDescription(string, int)\n[link]\n\n\nReturns the description for the function with the specified name.\n\n\npublic\n \nstatic\n \nstring\n \nGetFunctionDescription\n(\nstring\n \nfunctionName\n,\n \nint\n \nargc\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nfunctionName\n: The name of the function to get the description for.\n\n\nargc\n: The number of arguments in the overload to get the description for.\n\n\n\n\nGetFunctionNames()\n[link]\n\n\nEnumerates the names of all available Rant functions.\n\n\npublic\n \nstatic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nstring\n>\n \nGetFunctionNames\n()\n\n\n\n\n\n\nGetFunctionNamesAndAliases()\n[link]\n\n\nEnumerates all function names and their aliases.\n\n\npublic\n \nstatic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nstring\n>\n \nGetFunctionNamesAndAliases\n()\n\n\n\n\n\n\nGetFunctions()\n[link]\n\n\nEnumerates the available functions.\n\n\npublic\n \nstatic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nRant\n.\nMetadata\n.\nIRantFunctionGroup\n>\n \nGetFunctions\n()\n\n\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nRNG class (Rant)\n[link]\n\n\nNamespace:\n Rant\n\n\nInheritance:\n Object \u2192 RNG\n\n\nRepresents a non-linear random number generator.\n\n\npublic\n \nclass\n \nRNG\n\n\n\n\n\n\nConstructors\n[link]\n\n\nRNG(long)\n[link]\n\n\nCreates a new RNG instance with the specified seed.\n\n\npublic\n \nRNG\n(\nlong\n \nseed\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nseed\n: The seed for the generator.\n\n\n\n\nRNG(long, long)\n[link]\n\n\nCreates a new RNG instance with the specified seed and generation.\n\n\npublic\n \nRNG\n(\nlong\n \nseed\n,\n \nlong\n \ngeneration\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nseed\n: The seed for the generator.\n\n\ngeneration\n: The generation to start at.\n\n\n\n\nRNG()\n[link]\n\n\nCreates a new RNG instance seeded with the system tick count.\n\n\npublic\n \nRNG\n()\n\n\n\n\n\n\nProperties\n[link]\n\n\nBaseSeed\n[link]\n\n\nThe root seed.\n\n\npublic\n \nlong\n \nBaseSeed\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nDepth\n[link]\n\n\nThe current branching depth of the generator.\n\n\npublic\n \nint\n \nDepth\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nGeneration\n[link]\n\n\nThe current generation.\n\n\npublic\n \nlong\n \nGeneration\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nSeed\n[link]\n\n\nThe seed of the top branch.\n\n\npublic\n \nlong\n \nSeed\n\n\n{\n\n    \nget\n;\n\n    \nset\n;\n\n\n}\n\n\n\n\n\n\nIndexers\n[link]\n\n\nthis[int g]\n[link]\n\n\nCalculates the raw 64-bit value for a given generation.\n\n\npublic\n \nlong\n \nthis\n[\nint\n \ng\n]\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nMethods\n[link]\n\n\nBranch(long)\n[link]\n\n\nCreates a new branch based off the current seed and the specified seed.\n\n\npublic\n \nRant\n.\nRNG\n \nBranch\n(\nlong\n \nseed\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nseed\n: The seed to create the branch with.\n\n\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetRaw(long, long)\n[link]\n\n\nCalculates the raw 64-bit value for a given seed/generation pair.\n\n\npublic\n \nstatic\n \nlong\n \nGetRaw\n(\nlong\n \ns\n,\n \nlong\n \ng\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ns\n: The seed.\n\n\ng\n: The generation.\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nMerge()\n[link]\n\n\nRemoves the topmost branch and resumes generation on the next one down.\n\n\npublic\n \nRant\n.\nRNG\n \nMerge\n()\n\n\n\n\n\n\nNext()\n[link]\n\n\nCalculates a 32-bit, non-negative integer from the next generation and increases the current generation by 1.\n\n\npublic\n \nint\n \nNext\n()\n\n\n\n\n\n\nNext(int)\n[link]\n\n\nCalculates a 32-bit integer between 0 and a specified upper bound for the current generation and increases the current\n            generation by 1.\n\n\npublic\n \nint\n \nNext\n(\nint\n \nmax\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nmax\n: The exclusive maximum value.\n\n\n\n\nNext(int, int)\n[link]\n\n\nCalculates a 32-bit integer between the specified minimum and maximum values for the current generation, and increases\n            the current generation by 1.\n\n\npublic\n \nint\n \nNext\n(\nint\n \nmin\n,\n \nint\n \nmax\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nmin\n: The inclusive minimum value.\n\n\nmax\n: The exclusive maximum value.\n\n\n\n\nNextBoolean()\n[link]\n\n\nReturns a random boolean value and advances the generation by 1.\n\n\npublic\n \nbool\n \nNextBoolean\n()\n\n\n\n\n\n\nNextDouble()\n[link]\n\n\nReturns a double-precision floating point number between 0 and 1, and advances the generation by 1.\n\n\npublic\n \ndouble\n \nNextDouble\n()\n\n\n\n\n\n\nNextDouble(double)\n[link]\n\n\nReturns a double-precision floating point number between 0 and the specified maximum value, and advances the generation\n            by 1.\n\n\npublic\n \ndouble\n \nNextDouble\n(\ndouble\n \nmax\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nmax\n: (No Description)\n\n\n\n\nNextDouble(double, double)\n[link]\n\n\nReturns a double-precision floating point number between the specified minimum and maximum values, and advances the\n            generation by 1.\n\n\npublic\n \ndouble\n \nNextDouble\n(\ndouble\n \nmin\n,\n \ndouble\n \nmax\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nmin\n: (No Description)\n\n\nmax\n: (No Description)\n\n\n\n\nNextRaw()\n[link]\n\n\nCalculates the raw 64-bit value for the next generation, and increases the current generation by 1.\n\n\npublic\n \nlong\n \nNextRaw\n()\n\n\n\n\n\n\nPeek()\n[link]\n\n\nCalculates a 32-bit, non-negative integer for the current generation.\n\n\npublic\n \nint\n \nPeek\n()\n\n\n\n\n\n\nPeek(int)\n[link]\n\n\nCalculates a 32-bit integer between 0 and a specified upper bound for the current generation.\n\n\npublic\n \nint\n \nPeek\n(\nint\n \nmax\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nmax\n: The exclusive maximum value.\n\n\n\n\nPeek(int, int)\n[link]\n\n\nCalculates a 32-bit integer between the specified minimum and maximum values for the current generation.\n\n\npublic\n \nint\n \nPeek\n(\nint\n \nmin\n,\n \nint\n \nmax\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nmin\n: The inclusive minimum value.\n\n\nmax\n: The exclusive maximum value.\n\n\n\n\nPeekAt(long)\n[link]\n\n\nCalculates the 32-bitnon-negative integer for the specified generation.\n\n\npublic\n \nint\n \nPeekAt\n(\nlong\n \ngeneration\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ngeneration\n: The generation to peek at.\n\n\n\n\nPeekAt(long, int)\n[link]\n\n\nCalculates a 32-bit integer between 0 and a specified upper bound for the specified generation.\n\n\npublic\n \nint\n \nPeekAt\n(\nlong\n \ngeneration\n,\n \nint\n \nmax\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ngeneration\n: The generation whose value to calculate.\n\n\nmax\n: The exclusive maximum value.\n\n\n\n\nPeekAt(int, int, int)\n[link]\n\n\nCalculates a 32-bit integer between the specified minimum and maximum values for the specified generation.\n\n\npublic\n \nint\n \nPeekAt\n(\nint\n \ngeneration\n,\n \nint\n \nmin\n,\n \nint\n \nmax\n)\n\n\n\n\n\n\nParameters\n\n\n\n\ngeneration\n: The generation whose value to calculate.\n\n\nmin\n: The inclusive minimum value.\n\n\nmax\n: The exclusive maximum value.\n\n\n\n\nPrev()\n[link]\n\n\nCalculates a 32-bit, non-negative integer from the previous generation and decreases the current generation by 1.\n\n\npublic\n \nint\n \nPrev\n()\n\n\n\n\n\n\nPrev(int)\n[link]\n\n\nCalculates a 32-bit integer between 0 and a specified upper bound from the previous generation and decreases the\n            current generation by 1.\n\n\npublic\n \nint\n \nPrev\n(\nint\n \nmax\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nmax\n: The exclusive maximum value.\n\n\n\n\nPrev(int, int)\n[link]\n\n\nCalculates a 32-bit integer between the specified minimum and maximum values for the previous generation, and decreases\n            the current generation by 1.\n\n\npublic\n \nint\n \nPrev\n(\nint\n \nmin\n,\n \nint\n \nmax\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nmin\n: The inclusive minimum value.\n\n\nmax\n: The exclusive maximum value.\n\n\n\n\nPrevRaw()\n[link]\n\n\nCalculates the raw 64-bit value for the previous generation, and decreases the current generation by 1.\n\n\npublic\n \nlong\n \nPrevRaw\n()\n\n\n\n\n\n\nReset()\n[link]\n\n\nSets the current generation to zero.\n\n\npublic\n \nvoid\n \nReset\n()\n\n\n\n\n\n\nReset(long)\n[link]\n\n\nSets the seed to the specified value and the current generation to zero.\n\n\npublic\n \nvoid\n \nReset\n(\nlong\n \nnewSeed\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nnewSeed\n: The new seed to apply to the generator.\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n\n\n\n\nWritingSystem class (Rant.Formats)\n[link]\n\n\nNamespace:\n Rant.Formats\n\n\nInheritance:\n Object \u2192 WritingSystem\n\n\nRepresents configuration settings for a language's writing system.\n\n\npublic\n \nsealed\n \nclass\n \nWritingSystem\n\n\n\n\n\n\nConstructors\n[link]\n\n\nWritingSystem(IEnumerable\n, string, QuotationMarks)\n[link]\n\n\nCreates a new writing system with the specified configuration.\n\n\npublic\n \nWritingSystem\n(\nIEnumerable\n<\nchar\n>\n \nalphabet\n,\n \nstring\n \nspace\n,\n \nQuotationMarks\n \nquotations\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nalphabet\n: The alphabet to use.\n\n\nspace\n: The standard space to use.\n\n\nquotations\n: The quotation marks to use.\n\n\n\n\nWritingSystem()\n[link]\n\n\nCreates a new writing system with the default configuration.\n\n\npublic\n \nWritingSystem\n()\n\n\n\n\n\n\nProperties\n[link]\n\n\nQuotations\n[link]\n\n\nThe quotation marks used by the format.\n\n\npublic\n \nQuotationMarks\n \nQuotations\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nSpace\n[link]\n\n\nThe standard space used by series and phrasals.\n\n\npublic\n \nstring\n \nSpace\n\n\n{\n\n    \nget\n;\n\n\n}\n\n\n\n\n\n\nMethods\n[link]\n\n\nEquals(object)\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nbool\n \nEquals\n(\nobject\n \nobj\n)\n\n\n\n\n\n\nParameters\n\n\n\n\nobj\n: \nNo Description\n\n\n\n\nGetAlphabet()\n[link]\n\n\nThe alphabet used by the format.\n\n\npublic\n \nSystem\n.\nCollections\n.\nGeneric\n.\nIEnumerable\n<\nchar\n>\n \nGetAlphabet\n()\n\n\n\n\n\n\nGetHashCode()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nint\n \nGetHashCode\n()\n\n\n\n\n\n\nGetType()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nSystem\n.\nType\n \nGetType\n()\n\n\n\n\n\n\nToString()\n[link]\n\n\nNo Summary\n\n\npublic\n \noverride\n \nstring\n \nToString\n()",
            "title": "API Reference"
        },
        {
            "location": "/api/#carrier-class-rantvocabularyquerying",
            "text": "Namespace:  Rant.Vocabulary.Querying  Inheritance:  Object \u2192 Carrier  Represents information that can be used to synchronize query selections based on certain criteria.  public   sealed   class   Carrier",
            "title": "Carrier class (Rant.Vocabulary.Querying)"
        },
        {
            "location": "/api/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/api/#carrier",
            "text": "Creates an empty carrier.  public   Carrier ()",
            "title": "Carrier()"
        },
        {
            "location": "/api/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#addcomponentcarriercomponenttype-params-string",
            "text": "Adds a component of the specified type and name to the current instance.  public   void   AddComponent ( CarrierComponentType   type ,   params   string []   values )   Parameters   type : The type of carrier to add.  values : The names to assign to the component type.",
            "title": "AddComponent(CarrierComponentType, params string[])"
        },
        {
            "location": "/api/#equalsobject",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#getcomponentsoftypecarriercomponenttype",
            "text": "Iterates through the current instances's components of the specified type.  public   System . Collections . Generic . IEnumerable < string >   GetComponentsOfType ( CarrierComponentType   type )   Parameters   type : The type of component to iterate through.",
            "title": "GetComponentsOfType(CarrierComponentType)"
        },
        {
            "location": "/api/#gethashcode",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettotalcount",
            "text": "Retreives the total amount of all components.  public   int   GetTotalCount ()",
            "title": "GetTotalCount()"
        },
        {
            "location": "/api/#returns",
            "text": "The total amount of all components.",
            "title": "Returns"
        },
        {
            "location": "/api/#gettype",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#gettypecountcarriercomponenttype",
            "text": "Returns how many of a certain carrier component type are assigned to the current instance.  public   int   GetTypeCount ( CarrierComponentType   type )   Parameters   type :",
            "title": "GetTypeCount(CarrierComponentType)"
        },
        {
            "location": "/api/#tostring",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#carriercomponenttype-enum-rantvocabularyquerying",
            "text": "Namespace:  Rant.Vocabulary.Querying  Inheritance:  Object \u2192 ValueType \u2192 Enum \u2192 CarrierComponentType  Defines carrier types for queries.  public   enum   CarrierComponentType",
            "title": "CarrierComponentType enum (Rant.Vocabulary.Querying)"
        },
        {
            "location": "/api/#fields",
            "text": "",
            "title": "Fields"
        },
        {
            "location": "/api/#associative",
            "text": "Classes must exactly match.  public   const   CarrierComponentType   Associative   =   3 ;",
            "title": "Associative"
        },
        {
            "location": "/api/#dissociative",
            "text": "Share no classes.  public   const   CarrierComponentType   Dissociative   =   1 ;",
            "title": "Dissociative"
        },
        {
            "location": "/api/#divergent",
            "text": "Have at least one different class.  public   const   CarrierComponentType   Divergent   =   5 ;",
            "title": "Divergent"
        },
        {
            "location": "/api/#match",
            "text": "Select the same entry every time.  public   const   CarrierComponentType   Match   =   0 ;",
            "title": "Match"
        },
        {
            "location": "/api/#matchassociative",
            "text": "Classes must exactly match those of a match carrier entry.  public   const   CarrierComponentType   MatchAssociative   =   4 ;",
            "title": "MatchAssociative"
        },
        {
            "location": "/api/#matchdissociative",
            "text": "Share no classes with a match carrier entry.  public   const   CarrierComponentType   MatchDissociative   =   2 ;",
            "title": "MatchDissociative"
        },
        {
            "location": "/api/#matchdivergent",
            "text": "Have at least one different class than a match carrier entry.  public   const   CarrierComponentType   MatchDivergent   =   6 ;",
            "title": "MatchDivergent"
        },
        {
            "location": "/api/#matchrelational",
            "text": "Share at least one class with a match carrier entry.  public   const   CarrierComponentType   MatchRelational   =   8 ;",
            "title": "MatchRelational"
        },
        {
            "location": "/api/#matchunique",
            "text": "Choose an entry that is different from a match carrier entry.  public   const   CarrierComponentType   MatchUnique   =   10 ;",
            "title": "MatchUnique"
        },
        {
            "location": "/api/#relational",
            "text": "Share at least one class.  public   const   CarrierComponentType   Relational   =   7 ;",
            "title": "Relational"
        },
        {
            "location": "/api/#rhyme",
            "text": "Choose terms that rhyme.  public   const   CarrierComponentType   Rhyme   =   11 ;",
            "title": "Rhyme"
        },
        {
            "location": "/api/#unique",
            "text": "Never choose the same entry twice.  public   const   CarrierComponentType   Unique   =   9 ;",
            "title": "Unique"
        },
        {
            "location": "/api/#methods_1",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#comparetoobject",
            "text": "No Summary  public   override   int   CompareTo ( object   target )   Parameters   target :  No Description",
            "title": "CompareTo(object)"
        },
        {
            "location": "/api/#equalsobject_1",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_1",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_1",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#gettypecode",
            "text": "No Summary  public   override   System . TypeCode   GetTypeCode ()",
            "title": "GetTypeCode()"
        },
        {
            "location": "/api/#hasflagenum",
            "text": "No Summary  public   override   bool   HasFlag ( Enum   flag )   Parameters   flag :  No Description",
            "title": "HasFlag(Enum)"
        },
        {
            "location": "/api/#tostring_1",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#tostringstring",
            "text": "No Summary  public   override   string   ToString ( string   format )   Parameters   format :  No Description",
            "title": "ToString(string)"
        },
        {
            "location": "/api/#tostringiformatprovider",
            "text": "Warning  This item is deprecated. \nThe provider argument is not used. Please use ToString().   No Summary  public   override   string   ToString ( IFormatProvider   provider )   Parameters   provider :  No Description",
            "title": "ToString(IFormatProvider)"
        },
        {
            "location": "/api/#tostringstring-iformatprovider",
            "text": "Warning  This item is deprecated. \nThe provider argument is not used. Please use ToString(String).   No Summary  public   override   string   ToString ( string   format ,   IFormatProvider   provider )   Parameters   format :  No Description  provider :  No Description",
            "title": "ToString(string, IFormatProvider)"
        },
        {
            "location": "/api/#channelvisibility-enum-rantcoreoutput",
            "text": "Namespace:  Rant.Core.Output  Inheritance:  Object \u2192 ValueType \u2192 Enum \u2192 ChannelVisibility  Provides visibility settings for output channels.  public   enum   ChannelVisibility",
            "title": "ChannelVisibility enum (Rant.Core.Output)"
        },
        {
            "location": "/api/#fields_1",
            "text": "",
            "title": "Fields"
        },
        {
            "location": "/api/#internal",
            "text": "Channel outputs only to itself and any parent channels also set to Internal.  public   const   ChannelVisibility   Internal   =   2 ;",
            "title": "Internal"
        },
        {
            "location": "/api/#private",
            "text": "Channel outputs only to itself.  public   const   ChannelVisibility   Private   =   1 ;",
            "title": "Private"
        },
        {
            "location": "/api/#public",
            "text": "Channel outputs to itself and 'main'.  public   const   ChannelVisibility   Public   =   0 ;",
            "title": "Public"
        },
        {
            "location": "/api/#methods_2",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#comparetoobject_1",
            "text": "No Summary  public   override   int   CompareTo ( object   target )   Parameters   target :  No Description",
            "title": "CompareTo(object)"
        },
        {
            "location": "/api/#equalsobject_2",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_2",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_2",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#gettypecode_1",
            "text": "No Summary  public   override   System . TypeCode   GetTypeCode ()",
            "title": "GetTypeCode()"
        },
        {
            "location": "/api/#hasflagenum_1",
            "text": "No Summary  public   override   bool   HasFlag ( Enum   flag )   Parameters   flag :  No Description",
            "title": "HasFlag(Enum)"
        },
        {
            "location": "/api/#tostring_2",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#tostringstring_1",
            "text": "No Summary  public   override   string   ToString ( string   format )   Parameters   format :  No Description",
            "title": "ToString(string)"
        },
        {
            "location": "/api/#tostringiformatprovider_1",
            "text": "Warning  This item is deprecated. \nThe provider argument is not used. Please use ToString().   No Summary  public   override   string   ToString ( IFormatProvider   provider )   Parameters   provider :  No Description",
            "title": "ToString(IFormatProvider)"
        },
        {
            "location": "/api/#tostringstring-iformatprovider_1",
            "text": "Warning  This item is deprecated. \nThe provider argument is not used. Please use ToString(String).   No Summary  public   override   string   ToString ( string   format ,   IFormatProvider   provider )   Parameters   format :  No Description  provider :  No Description",
            "title": "ToString(string, IFormatProvider)"
        },
        {
            "location": "/api/#classfilterrule-class-rantvocabularyquerying",
            "text": "Namespace:  Rant.Vocabulary.Querying  Inheritance:  Object \u2192 ClassFilterRule  Defines a query filter for a single dictionary entry class.  public   sealed   class   ClassFilterRule",
            "title": "ClassFilterRule class (Rant.Vocabulary.Querying)"
        },
        {
            "location": "/api/#constructors_1",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/api/#classfilterrulestring",
            "text": "Initializes a new ClassFilterRule that checks for a positive match to the specified class.  public   ClassFilterRule ( string   className )   Parameters   className : The name of the class to search for.",
            "title": "ClassFilterRule(string)"
        },
        {
            "location": "/api/#classfilterrulestring-bool",
            "text": "Initializes a new ClassFilterRule that checks for a positive or negative match to the specified class.  public   ClassFilterRule ( string   className ,   bool   shouldMatch )   Parameters   className : The name of the class to search for.  shouldMatch : Determines whether the filter item expects a positive or negative match for the class.",
            "title": "ClassFilterRule(string, bool)"
        },
        {
            "location": "/api/#properties",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#class",
            "text": "The name of the class to search for.  public   string   Class  { \n     get ; \n     set ;  }",
            "title": "Class"
        },
        {
            "location": "/api/#shouldmatch",
            "text": "Determines whether the filter item expects a positive or negative match for the class.  public   bool   ShouldMatch  { \n     get ; \n     set ;  }",
            "title": "ShouldMatch"
        },
        {
            "location": "/api/#methods_3",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#equalsobject_3",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_3",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_3",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#tostring_3",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#englishnumberverbalizer-class-rantformats",
            "text": "Namespace:  Rant.Formats  Inheritance:  Object \u2192 NumberVerbalizer \u2192 EnglishNumberVerbalizer  Represents a number verbalizer for English (US).  public   sealed   class   EnglishNumberVerbalizer   :   Rant . Formats . NumberVerbalizer",
            "title": "EnglishNumberVerbalizer class (Rant.Formats)"
        },
        {
            "location": "/api/#constructors_2",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/api/#englishnumberverbalizer",
            "text": "No Summary  public   EnglishNumberVerbalizer ()",
            "title": "EnglishNumberVerbalizer()"
        },
        {
            "location": "/api/#methods_4",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#equalsobject_4",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_4",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_4",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#tostring_4",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#verbalizelong",
            "text": "Verbalizes the specified value.  public   virtual   string   Verbalize ( long   number )   Parameters   number : The number to verbalize.",
            "title": "Verbalize(long)"
        },
        {
            "location": "/api/#englishpluralizer-class-rantformats",
            "text": "Namespace:  Rant.Formats  Inheritance:  Object \u2192 Pluralizer \u2192 EnglishPluralizer  Pluralizer for English nouns.  public   sealed   class   EnglishPluralizer   :   Rant . Formats . Pluralizer",
            "title": "EnglishPluralizer class (Rant.Formats)"
        },
        {
            "location": "/api/#constructors_3",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/api/#englishpluralizer",
            "text": "No Summary  public   EnglishPluralizer ()",
            "title": "EnglishPluralizer()"
        },
        {
            "location": "/api/#methods_5",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#equalsobject_5",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_5",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_5",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#pluralizestring",
            "text": "Determines the plural form of the specified English noun.  public   virtual   string   Pluralize ( string   input )   Parameters   input : The singular form of the noun to pluralize.",
            "title": "Pluralize(string)"
        },
        {
            "location": "/api/#tostring_5",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#germannumberverbalizer-class-rantformats",
            "text": "Namespace:  Rant.Formats  Inheritance:  Object \u2192 NumberVerbalizer \u2192 GermanNumberVerbalizer  Represents a number verbalizer for Standard German.  public   sealed   class   GermanNumberVerbalizer   :   Rant . Formats . NumberVerbalizer",
            "title": "GermanNumberVerbalizer class (Rant.Formats)"
        },
        {
            "location": "/api/#constructors_4",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/api/#germannumberverbalizer",
            "text": "No Summary  public   GermanNumberVerbalizer ()",
            "title": "GermanNumberVerbalizer()"
        },
        {
            "location": "/api/#methods_6",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#equalsobject_6",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_6",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_6",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#tostring_6",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#verbalizelong_1",
            "text": "Verbalizes the specified value.  public   virtual   string   Verbalize ( long   number )   Parameters   number : The number to verbalize.",
            "title": "Verbalize(long)"
        },
        {
            "location": "/api/#irantfunction-interface-rantmetadata",
            "text": "Namespace:  Rant.Metadata  Inheritance:  Object \u2192 IRantFunction  Provides access to metadata for a Rant function overload.  public   interface   IRantFunction",
            "title": "IRantFunction interface (Rant.Metadata)"
        },
        {
            "location": "/api/#properties_1",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#description",
            "text": "Gets the description for the function overload.  public   abstract   virtual   string   Description  { \n     get ;  }",
            "title": "Description"
        },
        {
            "location": "/api/#hasparamarray",
            "text": "Indicates whether the last parameter accepts multiple values.  public   abstract   virtual   bool   HasParamArray  { \n     get ;  }",
            "title": "HasParamArray"
        },
        {
            "location": "/api/#name",
            "text": "Gets the name of the function.  public   abstract   virtual   string   Name  { \n     get ;  }",
            "title": "Name"
        },
        {
            "location": "/api/#paramcount",
            "text": "Gets the number of parameters accepted by the function overload.  public   abstract   virtual   int   ParamCount  { \n     get ;  }",
            "title": "ParamCount"
        },
        {
            "location": "/api/#methods_7",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#getparameters",
            "text": "Enumerates the parameters for the function overload.  public   abstract   virtual   System . Collections . Generic . IEnumerable < Rant . Metadata . IRantParameter >   GetParameters ()",
            "title": "GetParameters()"
        },
        {
            "location": "/api/#irantfunctiongroup-interface-rantmetadata",
            "text": "Namespace:  Rant.Metadata  Inheritance:  Object \u2192 IRantFunctionGroup  Provides access to metadata for a group of overloads for a specific Rant function.  public   interface   IRantFunctionGroup",
            "title": "IRantFunctionGroup interface (Rant.Metadata)"
        },
        {
            "location": "/api/#properties_2",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#name_1",
            "text": "Gets the name of the function.  public   abstract   virtual   string   Name  { \n     get ;  }",
            "title": "Name"
        },
        {
            "location": "/api/#overloads",
            "text": "Gets the available overloads for the function.  public   abstract   virtual   IEnumerable < Rant . Metadata . IRantFunction >   Overloads  { \n     get ;  }",
            "title": "Overloads"
        },
        {
            "location": "/api/#irantmodevalue-interface-rantmetadata",
            "text": "Namespace:  Rant.Metadata  Inheritance:  Object \u2192 IRantModeValue  Provides information on Rant's mode values, like number formats and synchronizer types.  public   interface   IRantModeValue",
            "title": "IRantModeValue interface (Rant.Metadata)"
        },
        {
            "location": "/api/#properties_3",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#description_1",
            "text": "Gets the description for the value.  public   abstract   virtual   string   Description  { \n     get ;  }",
            "title": "Description"
        },
        {
            "location": "/api/#name_2",
            "text": "Gets the name of the value.  public   abstract   virtual   string   Name  { \n     get ;  }",
            "title": "Name"
        },
        {
            "location": "/api/#irantparameter-interface-rantmetadata",
            "text": "Namespace:  Rant.Metadata  Inheritance:  Object \u2192 IRantParameter  Provides access to metadata for a Rant function parameter.  public   interface   IRantParameter",
            "title": "IRantParameter interface (Rant.Metadata)"
        },
        {
            "location": "/api/#properties_4",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#description_2",
            "text": "Gets the description for the parameter.  public   abstract   virtual   string   Description  { \n     get ;  }",
            "title": "Description"
        },
        {
            "location": "/api/#isparams",
            "text": "Indicates whether the parameter accepts multiple values.  public   abstract   virtual   bool   IsParams  { \n     get ;  }",
            "title": "IsParams"
        },
        {
            "location": "/api/#name_3",
            "text": "Gets the name of the parameter.  public   abstract   virtual   string   Name  { \n     get ;  }",
            "title": "Name"
        },
        {
            "location": "/api/#ranttype",
            "text": "Gets the data type accepted by the parameter.  public   abstract   virtual   RantFunctionParameterType   RantType  { \n     get ;  }",
            "title": "RantType"
        },
        {
            "location": "/api/#methods_8",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#getenumvalues",
            "text": "Enumerates all possible values for flag and mode parameters.  public   abstract   virtual   System . Collections . Generic . IEnumerable < Rant . Metadata . IRantModeValue >   GetEnumValues ()",
            "title": "GetEnumValues()"
        },
        {
            "location": "/api/#numberverbalizer-class-rantformats",
            "text": "Namespace:  Rant.Formats  Inheritance:  Object \u2192 NumberVerbalizer  The base class for all number verbalizers.  public   abstract   class   NumberVerbalizer",
            "title": "NumberVerbalizer class (Rant.Formats)"
        },
        {
            "location": "/api/#methods_9",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#equalsobject_7",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_7",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_7",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#tostring_7",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#verbalizelong_2",
            "text": "Verbalizes the specified value.  public   abstract   virtual   string   Verbalize ( long   number )   Parameters   number : The number to verbalize.",
            "title": "Verbalize(long)"
        },
        {
            "location": "/api/#pluralizer-class-rantformats",
            "text": "Namespace:  Rant.Formats  Inheritance:  Object \u2192 Pluralizer  The base class for pluralizers, which infer the plural form of a given noun.  public   abstract   class   Pluralizer",
            "title": "Pluralizer class (Rant.Formats)"
        },
        {
            "location": "/api/#methods_10",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#equalsobject_8",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_8",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_8",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#pluralizestring_1",
            "text": "Converts the specified input noun to a plural version.  public   abstract   virtual   string   Pluralize ( string   input )   Parameters   input : The noun to convert.",
            "title": "Pluralize(string)"
        },
        {
            "location": "/api/#tostring_8",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#quotationmarks-class-rantformats",
            "text": "Namespace:  Rant.Formats  Inheritance:  Object \u2192 QuotationMarks  Represents a configuration for quotation marks.  public   sealed   class   QuotationMarks",
            "title": "QuotationMarks class (Rant.Formats)"
        },
        {
            "location": "/api/#constructors_5",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/api/#quotationmarks",
            "text": "Initializes a new instance of the QuotationFormat class with the default configuration.  public   QuotationMarks ()",
            "title": "QuotationMarks()"
        },
        {
            "location": "/api/#quotationmarkschar-char-char-char",
            "text": "Initializes a new instance of the QuotationFormat class with the specified quotation marks.  public   QuotationMarks ( char   openPrimary ,   char   closePrimary ,   char   openSecondary ,   char   closeSecondary )   Parameters   openPrimary : The opening primary quote.  closePrimary : The closing primary quote.  openSecondary : The opening secondary quote.  closeSecondary : The closing secondary quote.",
            "title": "QuotationMarks(char, char, char, char)"
        },
        {
            "location": "/api/#properties_5",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#closingprimary",
            "text": "The closing primary quotation mark.  public   char   ClosingPrimary  { \n     get ;  }",
            "title": "ClosingPrimary"
        },
        {
            "location": "/api/#closingsecondary",
            "text": "The closing secondary quotation mark.  public   char   ClosingSecondary  { \n     get ;  }",
            "title": "ClosingSecondary"
        },
        {
            "location": "/api/#openingprimary",
            "text": "The opening primary quotation mark.  public   char   OpeningPrimary  { \n     get ;  }",
            "title": "OpeningPrimary"
        },
        {
            "location": "/api/#openingsecondary",
            "text": "The opening secondary quotation mark.  public   char   OpeningSecondary  { \n     get ;  }",
            "title": "OpeningSecondary"
        },
        {
            "location": "/api/#methods_11",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#equalsobject_9",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_9",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_9",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#tostring_9",
            "text": "Returns a string representation of the configuration.  public   virtual   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#rantargattribute-class-rant",
            "text": "Namespace:  Rant  Inheritance:  Object \u2192 Attribute \u2192 RantArgAttribute  Attribute used to change the name of an argument pulled from a field or property.  public   sealed   class   RantArgAttribute   :   System . Attribute ,   System . Runtime . InteropServices . _Attribute",
            "title": "RantArgAttribute class (Rant)"
        },
        {
            "location": "/api/#constructors_6",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/api/#rantargattributestring",
            "text": "Creates a new RantArgAttribute with the specified name.  public   RantArgAttribute ( string   name )   Parameters   name : The new name to assign to the argument.",
            "title": "RantArgAttribute(string)"
        },
        {
            "location": "/api/#properties_6",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#name_4",
            "text": "The new name to assign to the argument.  public   string   Name  { \n     get ;  }",
            "title": "Name"
        },
        {
            "location": "/api/#typeid",
            "text": "No Summary  public   override   object   TypeId  { \n     get ;  }",
            "title": "TypeId"
        },
        {
            "location": "/api/#methods_12",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#equalsobject_10",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_10",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_10",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#isdefaultattribute",
            "text": "No Summary  public   override   bool   IsDefaultAttribute ()",
            "title": "IsDefaultAttribute()"
        },
        {
            "location": "/api/#matchobject",
            "text": "No Summary  public   override   bool   Match ( object   obj )   Parameters   obj :  No Description",
            "title": "Match(object)"
        },
        {
            "location": "/api/#tostring_10",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#rantcompilerexception-class-rant",
            "text": "Namespace:  Rant  Inheritance:  Object \u2192 Exception \u2192 RantCompilerException  Represents an error raised by Rant during pattern compilation.  public   sealed   class   RantCompilerException   :   System . Exception ,   System . Runtime . Serialization . ISerializable ,   System . Runtime . InteropServices . _Exception",
            "title": "RantCompilerException class (Rant)"
        },
        {
            "location": "/api/#properties_7",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#data",
            "text": "No Summary  public   override   IDictionary   Data  { \n     get ;  }",
            "title": "Data"
        },
        {
            "location": "/api/#errorcount",
            "text": "Gets the number of errors returned by the compiler.  public   int   ErrorCount  { \n     get ;  }",
            "title": "ErrorCount"
        },
        {
            "location": "/api/#helplink",
            "text": "No Summary  public   override   string   HelpLink  { \n     get ; \n     set ;  }",
            "title": "HelpLink"
        },
        {
            "location": "/api/#hresult",
            "text": "No Summary  public   override   int   HResult  { \n     get ; \n     set ;  }",
            "title": "HResult"
        },
        {
            "location": "/api/#innerexception",
            "text": "No Summary  public   override   Exception   InnerException  { \n     get ;  }",
            "title": "InnerException"
        },
        {
            "location": "/api/#internalerror",
            "text": "Indicates whether the exception is the result of an internal engine error.  public   bool   InternalError  { \n     get ;  }",
            "title": "InternalError"
        },
        {
            "location": "/api/#message",
            "text": "No Summary  public   override   string   Message  { \n     get ;  }",
            "title": "Message"
        },
        {
            "location": "/api/#source",
            "text": "No Summary  public   override   string   Source  { \n     get ; \n     set ;  }",
            "title": "Source"
        },
        {
            "location": "/api/#sourcename",
            "text": "The name of the source pattern on which the error occurred.  public   string   SourceName  { \n     get ;  }",
            "title": "SourceName"
        },
        {
            "location": "/api/#stacktrace",
            "text": "No Summary  public   override   string   StackTrace  { \n     get ;  }",
            "title": "StackTrace"
        },
        {
            "location": "/api/#targetsite",
            "text": "No Summary  public   override   MethodBase   TargetSite  { \n     get ;  }",
            "title": "TargetSite"
        },
        {
            "location": "/api/#methods_13",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#equalsobject_11",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#getbaseexception",
            "text": "No Summary  public   override   System . Exception   GetBaseException ()",
            "title": "GetBaseException()"
        },
        {
            "location": "/api/#geterrors",
            "text": "Enumerates the errors collected from the compiler.  public   System . Collections . Generic . IEnumerable < Rant . RantCompilerMessage >   GetErrors ()",
            "title": "GetErrors()"
        },
        {
            "location": "/api/#gethashcode_11",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#getobjectdataserializationinfo-streamingcontext",
            "text": "No Summary  public   override   void   GetObjectData ( SerializationInfo   info ,   StreamingContext   context )   Parameters   info :  No Description  context :  No Description",
            "title": "GetObjectData(SerializationInfo, StreamingContext)"
        },
        {
            "location": "/api/#gettype_11",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#gettype_12",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#tostring_11",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#rantcompilermessage-class-rant",
            "text": "Namespace:  Rant  Inheritance:  Object \u2192 RantCompilerMessage  Represents a message emitted by the Rant compiler while performing a job.  public   sealed   class   RantCompilerMessage",
            "title": "RantCompilerMessage class (Rant)"
        },
        {
            "location": "/api/#properties_8",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#column",
            "text": "The column on which the message was generated.  public   int   Column  { \n     get ;  }",
            "title": "Column"
        },
        {
            "location": "/api/#index",
            "text": "The character index on which the message was generated.  public   int   Index  { \n     get ;  }",
            "title": "Index"
        },
        {
            "location": "/api/#length",
            "text": "The length, in characters, of the code snippet to which the message pertains.  public   int   Length  { \n     get ;  }",
            "title": "Length"
        },
        {
            "location": "/api/#line",
            "text": "The line on which the message was generated.  public   int   Line  { \n     get ;  }",
            "title": "Line"
        },
        {
            "location": "/api/#message_1",
            "text": "The message text.  public   string   Message  { \n     get ;  }",
            "title": "Message"
        },
        {
            "location": "/api/#source_1",
            "text": "The source path of the pattern being compiled when the message was generated.  public   string   Source  { \n     get ;  }",
            "title": "Source"
        },
        {
            "location": "/api/#type",
            "text": "The type of message.  public   RantCompilerMessageType   Type  { \n     get ;  }",
            "title": "Type"
        },
        {
            "location": "/api/#methods_14",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#equalsobject_12",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_12",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_13",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#tostring_12",
            "text": "Generates a string representation of the message.  public   virtual   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#rantcompilermessagetype-enum-rant",
            "text": "Namespace:  Rant  Inheritance:  Object \u2192 ValueType \u2192 Enum \u2192 RantCompilerMessageType  Defines message types used by the Rant compiler.  public   enum   RantCompilerMessageType",
            "title": "RantCompilerMessageType enum (Rant)"
        },
        {
            "location": "/api/#fields_2",
            "text": "",
            "title": "Fields"
        },
        {
            "location": "/api/#error",
            "text": "Indicates a problem that made compilation impossible, usually a syntax error.  public   const   RantCompilerMessageType   Error   =   1 ;",
            "title": "Error"
        },
        {
            "location": "/api/#warning",
            "text": "Indicates a problem that did not interfere with compilation.  public   const   RantCompilerMessageType   Warning   =   0 ;",
            "title": "Warning"
        },
        {
            "location": "/api/#methods_15",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#comparetoobject_2",
            "text": "No Summary  public   override   int   CompareTo ( object   target )   Parameters   target :  No Description",
            "title": "CompareTo(object)"
        },
        {
            "location": "/api/#equalsobject_13",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_13",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_14",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#gettypecode_2",
            "text": "No Summary  public   override   System . TypeCode   GetTypeCode ()",
            "title": "GetTypeCode()"
        },
        {
            "location": "/api/#hasflagenum_2",
            "text": "No Summary  public   override   bool   HasFlag ( Enum   flag )   Parameters   flag :  No Description",
            "title": "HasFlag(Enum)"
        },
        {
            "location": "/api/#tostring_13",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#tostringstring_2",
            "text": "No Summary  public   override   string   ToString ( string   format )   Parameters   format :  No Description",
            "title": "ToString(string)"
        },
        {
            "location": "/api/#tostringiformatprovider_2",
            "text": "Warning  This item is deprecated. \nThe provider argument is not used. Please use ToString().   No Summary  public   override   string   ToString ( IFormatProvider   provider )   Parameters   provider :  No Description",
            "title": "ToString(IFormatProvider)"
        },
        {
            "location": "/api/#tostringstring-iformatprovider_2",
            "text": "Warning  This item is deprecated. \nThe provider argument is not used. Please use ToString(String).   No Summary  public   override   string   ToString ( string   format ,   IFormatProvider   provider )   Parameters   format :  No Description  provider :  No Description",
            "title": "ToString(string, IFormatProvider)"
        },
        {
            "location": "/api/#rantdependencyresolver-class-rantresources",
            "text": "Namespace:  Rant.Resources  Inheritance:  Object \u2192 RantDependencyResolver  Default class for package depdendency resolving.  public   class   RantDependencyResolver",
            "title": "RantDependencyResolver class (Rant.Resources)"
        },
        {
            "location": "/api/#constructors_7",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/api/#rantdependencyresolver",
            "text": "No Summary  public   RantDependencyResolver ()",
            "title": "RantDependencyResolver()"
        },
        {
            "location": "/api/#methods_16",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#equalsobject_14",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_14",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_15",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#tostring_14",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#tryresolvepackagerantpackagedependency-out-rantpackage",
            "text": "No Summary  public   virtual   bool   TryResolvePackage ( RantPackageDependency   depdendency ,   out   RantPackage &   package )   Parameters   depdendency :  No Description  package :  No Description",
            "title": "TryResolvePackage(RantPackageDependency, out RantPackage&amp;)"
        },
        {
            "location": "/api/#rantdictionary-class-rantvocabulary",
            "text": "Namespace:  Rant.Vocabulary  Inheritance:  Object \u2192 RantDictionary  Represents a dictionary that can be loaded and queried by Rant.  public   sealed   class   RantDictionary",
            "title": "RantDictionary class (Rant.Vocabulary)"
        },
        {
            "location": "/api/#constructors_8",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/api/#rantdictionary",
            "text": "Initializes a new instance of the  class with no tables.  public   RantDictionary ()",
            "title": "RantDictionary()"
        },
        {
            "location": "/api/#rantdictionaryienumerable",
            "text": "Initializes a new instance of the  class with the specified set of tables.  public   RantDictionary ( IEnumerable < Rant . Vocabulary . RantDictionaryTable >   tables )   Parameters   tables : The tables to store in the dictionary.",
            "title": "RantDictionary(IEnumerable)"
        },
        {
            "location": "/api/#properties_9",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#enableweighting",
            "text": "Determines whether tables will favor weighted distribution, if available.\n            Weighted distribution has a significantl impact on performance.  public   bool   EnableWeighting  { \n     get ; \n     set ;  }",
            "title": "EnableWeighting"
        },
        {
            "location": "/api/#includedhiddenclasses",
            "text": "Gets all currently exposed hidden classes.  public   IEnumerable < string >   IncludedHiddenClasses  { \n     get ;  }",
            "title": "IncludedHiddenClasses"
        },
        {
            "location": "/api/#indexers",
            "text": "",
            "title": "Indexers"
        },
        {
            "location": "/api/#thisstring-name",
            "text": "Gets the table with the specified name.  public   RantDictionaryTable   this [ string   name ]  { \n     get ;  }",
            "title": "this[string name]"
        },
        {
            "location": "/api/#methods_17",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#addtablerantdictionarytable",
            "text": "Adds a new  object to the dictionary.  public   void   AddTable ( RantDictionaryTable   table )   Parameters   table : The table to add.",
            "title": "AddTable(RantDictionaryTable)"
        },
        {
            "location": "/api/#classexposedstring",
            "text": "Determines whether the specified class has been manually exposed (overriding hidden status).  public   bool   ClassExposed ( string   className )   Parameters   className : The name of the class to check.",
            "title": "ClassExposed(string)"
        },
        {
            "location": "/api/#equalsobject_15",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#excludehiddenclassstring",
            "text": "Unexposes a hidden class from query results.  public   void   ExcludeHiddenClass ( string   hiddenClassName )   Parameters   hiddenClassName : The name of the hidden class to unexpose.",
            "title": "ExcludeHiddenClass(string)"
        },
        {
            "location": "/api/#gethashcode_15",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettables",
            "text": "Enumerates the tables contained in the current RantDictionary instance.  public   System . Collections . Generic . IEnumerable < Rant . Vocabulary . RantDictionaryTable >   GetTables ()",
            "title": "GetTables()"
        },
        {
            "location": "/api/#gettype_16",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#includehiddenclassstring",
            "text": "Exposes a hidden class to query results.  public   void   IncludeHiddenClass ( string   hiddenClassName )   Parameters   hiddenClassName : The name of the hidden class to expose.",
            "title": "IncludeHiddenClass(string)"
        },
        {
            "location": "/api/#tostring_15",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#rantdictionaryentry-class-rantvocabulary",
            "text": "Namespace:  Rant.Vocabulary  Inheritance:  Object \u2192 RantDictionaryEntry  Stores information about a dictionary entry.  public   sealed   class   RantDictionaryEntry",
            "title": "RantDictionaryEntry class (Rant.Vocabulary)"
        },
        {
            "location": "/api/#constructors_9",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/api/#rantdictionaryentryrantdictionaryterm",
            "text": "Creates a new instance of the  object from the specified term array.  public   RantDictionaryEntry ( RantDictionaryTerm []   terms )   Parameters   terms : The terms in the entry.",
            "title": "RantDictionaryEntry(RantDictionaryTerm[])"
        },
        {
            "location": "/api/#rantdictionaryentrystring-ienumerable-float",
            "text": "Creates a new  object from the specified term array, classes, and weight.  public   RantDictionaryEntry ( string []   terms ,   IEnumerable < string >   classes ,   float   weight   =   1f )   Parameters   terms : The terms in the entry.  classes : The classes associated with the entry.  weight : The weight of the entry.",
            "title": "RantDictionaryEntry(string[], IEnumerable, float)"
        },
        {
            "location": "/api/#rantdictionaryentryienumerable-ienumerable-float",
            "text": "Creates a new  object from the specified term collection, classes, and weight.  public   RantDictionaryEntry ( IEnumerable < Rant . Vocabulary . RantDictionaryTerm >   terms ,   IEnumerable < string >   classes ,   float   weight   =   1f )   Parameters   terms : The terms in the entry.  classes : The classes associated with the entry.  weight : The weight of the entry.",
            "title": "RantDictionaryEntry(IEnumerable, IEnumerable, float)"
        },
        {
            "location": "/api/#properties_10",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#classcount",
            "text": "Gets the number of classes in the current entry.  public   int   ClassCount  { \n     get ;  }",
            "title": "ClassCount"
        },
        {
            "location": "/api/#hasclasses",
            "text": "Returns whether or not the entry has classes.  public   bool   HasClasses  { \n     get ;  }",
            "title": "HasClasses"
        },
        {
            "location": "/api/#termcount",
            "text": "Gets the number of terms stored in the current entry.  public   int   TermCount  { \n     get ;  }",
            "title": "TermCount"
        },
        {
            "location": "/api/#weight",
            "text": "Gets the weight value of the entry.  public   float   Weight  { \n     get ; \n     set ;  }",
            "title": "Weight"
        },
        {
            "location": "/api/#indexers_1",
            "text": "",
            "title": "Indexers"
        },
        {
            "location": "/api/#thisint-index",
            "text": "Gets or sets the term at the specified index.  public   RantDictionaryTerm   this [ int   index ]  { \n     get ; \n     set ;  }",
            "title": "this[int index]"
        },
        {
            "location": "/api/#methods_18",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#addclassstring-bool",
            "text": "Adds the specified class to the current entry.  public   void   AddClass ( string   className ,   bool   optional   =   False )   Parameters   className : The name of the class.  optional : Specifies whether the class is optional in carrier associations.",
            "title": "AddClass(string, bool)"
        },
        {
            "location": "/api/#containsclassstring",
            "text": "Returns a boolean valie indicating whether the current entry contains the specified class.  public   bool   ContainsClass ( string   className )   Parameters   className : The class to search for.",
            "title": "ContainsClass(string)"
        },
        {
            "location": "/api/#containsmetadatakeystring",
            "text": "Determines if the entry contains metadata attached to the specified key.  public   bool   ContainsMetadataKey ( string   key )   Parameters   key : The key to search for.",
            "title": "ContainsMetadataKey(string)"
        },
        {
            "location": "/api/#equalsobject_16",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#getclasses",
            "text": "Returns a collection of classes assigned to the current entry.  public   System . Collections . Generic . IEnumerable < string >   GetClasses ()",
            "title": "GetClasses()"
        },
        {
            "location": "/api/#gethashcode_16",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#getmetadatastring",
            "text": "Locates and returns the metadata value associated with the specified key. Returns Null if not found.  public   object   GetMetadata ( string   key )   Parameters   key : The key of the metadata to retrieve.",
            "title": "GetMetadata(string)"
        },
        {
            "location": "/api/#getmetadatakeys",
            "text": "Enumerates all the metadata keys contained in the entry.  public   System . Collections . Generic . IEnumerable < string >   GetMetadataKeys ()",
            "title": "GetMetadataKeys()"
        },
        {
            "location": "/api/#getoptionalclasses",
            "text": "Returns a collection of the optional classes assigned to the current entry.  public   System . Collections . Generic . IEnumerable < string >   GetOptionalClasses ()",
            "title": "GetOptionalClasses()"
        },
        {
            "location": "/api/#getrequiredclasses",
            "text": "Returns a collection of required (non-optional) classes assigned to the current entry.  public   System . Collections . Generic . IEnumerable < string >   GetRequiredClasses ()",
            "title": "GetRequiredClasses()"
        },
        {
            "location": "/api/#getterms",
            "text": "Enumerates the terms stored in the current entry.  public   System . Collections . Generic . IEnumerable < Rant . Vocabulary . RantDictionaryTerm >   GetTerms ()",
            "title": "GetTerms()"
        },
        {
            "location": "/api/#gettype_17",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#removeclassstring",
            "text": "Removes the class with the specified name from the current entry.  public   void   RemoveClass ( string   className )   Parameters   className : The name of the class to remove.",
            "title": "RemoveClass(string)"
        },
        {
            "location": "/api/#removemetadatastring",
            "text": "Removes the metadata with the specified key from the entry.  public   bool   RemoveMetadata ( string   key )   Parameters   key : The key of the metadata entry to remove.",
            "title": "RemoveMetadata(string)"
        },
        {
            "location": "/api/#setmetadatastring-object",
            "text": "Sets a metadata value under the specified key in the entry.  public   void   SetMetadata ( string   key ,   object   value )   Parameters   key : The key to store the data under.  value : The value to store.",
            "title": "SetMetadata(string, object)"
        },
        {
            "location": "/api/#tostring_16",
            "text": "Returns a string representation of the current  instance.  public   virtual   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#rantdictionarytable-class-rantvocabulary",
            "text": "Namespace:  Rant.Vocabulary  Inheritance:  Object \u2192 RantResource \u2192 RantDictionaryTable  Represents a named collection of dictionary entries.  public   sealed   class   RantDictionaryTable   :   Rant . Resources . RantResource",
            "title": "RantDictionaryTable class (Rant.Vocabulary)"
        },
        {
            "location": "/api/#constructors_10",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/api/#rantdictionarytablestring-int-hashset",
            "text": "Initializes a new instance of the RantDictionaryTable class with the specified name and term count.  public   RantDictionaryTable ( string   name ,   int   termsPerEntry ,   HashSet < string >   hidden   =   null )   Parameters   name : The name of the table.  termsPerEntry : The number of terms to store in each entry.  hidden : Collection of hidden classes.",
            "title": "RantDictionaryTable(string, int, HashSet)"
        },
        {
            "location": "/api/#properties_11",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#cacheneedsrebuild",
            "text": "Indicates whether the cache needs to be rebuilt.  public   bool   CacheNeedsRebuild  { \n     get ;  }",
            "title": "CacheNeedsRebuild"
        },
        {
            "location": "/api/#enableweighting_1",
            "text": "Determines whether weights are enabled on this table.  public   bool   EnableWeighting  { \n     get ; \n     set ;  }",
            "title": "EnableWeighting"
        },
        {
            "location": "/api/#entrycount",
            "text": "Gets the number of entries stored in the table.  public   int   EntryCount  { \n     get ;  }",
            "title": "EntryCount"
        },
        {
            "location": "/api/#hiddenclasses",
            "text": "Gets the hidden classes of the table.  public   IEnumerable < string >   HiddenClasses  { \n     get ;  }",
            "title": "HiddenClasses"
        },
        {
            "location": "/api/#language",
            "text": "Gets the language code associated with the table (not yet used).  public   string   Language  { \n     get ; \n     set ;  }",
            "title": "Language"
        },
        {
            "location": "/api/#name_5",
            "text": "Gets the name of the table.  public   string   Name  { \n     get ; \n     set ;  }",
            "title": "Name"
        },
        {
            "location": "/api/#termsperentry",
            "text": "Gets the number of terms required for entries contained in the current table.  public   int   TermsPerEntry  { \n     get ; \n     set ;  }",
            "title": "TermsPerEntry"
        },
        {
            "location": "/api/#indexers_2",
            "text": "",
            "title": "Indexers"
        },
        {
            "location": "/api/#thisint-index_1",
            "text": "Gets the entry at the specified index in the current  object.  public   RantDictionaryEntry   this [ int   index ]  { \n     get ;  }",
            "title": "this[int index]"
        },
        {
            "location": "/api/#methods_19",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#addentryrantdictionaryentry",
            "text": "Adds the specified entry to the table.  public   bool   AddEntry ( RantDictionaryEntry   entry )   Parameters   entry : The entry to add to the table.",
            "title": "AddEntry(RantDictionaryEntry)"
        },
        {
            "location": "/api/#returns_1",
            "text": "True if successfully added; otherwise, False.",
            "title": "Returns"
        },
        {
            "location": "/api/#addsubtypestring-int",
            "text": "Adds a subtype of the specified name to the table.\n            If a subtype with the name already exists, it will be overwritten.\n            Subtypes are case insensitive.\n            If the name is not a valid identifier string, it will not be accepted.  public   bool   AddSubtype ( string   subtypeName ,   int   index )   Parameters   subtypeName : The name of the subtype to add.  index : The term index to associate with the name.",
            "title": "AddSubtype(string, int)"
        },
        {
            "location": "/api/#returns_2",
            "text": "FALSE if the name was not a valid identifier or the index was out of range. TRUE if the operation was\n            successful.",
            "title": "Returns"
        },
        {
            "location": "/api/#containsclassstring_1",
            "text": "Returns a boolean value indicating whether the current  instance contains one or more entries containing the specified class name.  public   bool   ContainsClass ( string   clName )   Parameters   clName : The class name to search for.",
            "title": "ContainsClass(string)"
        },
        {
            "location": "/api/#containsentryrantdictionaryentry",
            "text": "Checks if the table contains the specified entry.  public   bool   ContainsEntry ( RantDictionaryEntry   entry )   Parameters   entry : The entry to search for.",
            "title": "ContainsEntry(RantDictionaryEntry)"
        },
        {
            "location": "/api/#returns_3",
            "text": "True if found, False if not.",
            "title": "Returns"
        },
        {
            "location": "/api/#equalsobject_17",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#fromstreamstring-stream",
            "text": "Loads a table from the specified stream.  public   static   Rant . Vocabulary . RantDictionaryTable   FromStream ( string   origin ,   Stream   stream )   Parameters   origin : The origin of the stream. This will typically be a file path or package name.  stream : The stream to load the table from.",
            "title": "FromStream(string, Stream)"
        },
        {
            "location": "/api/#getclasses_1",
            "text": "Searches entries in the current table and enumerates every single distinct class found.  public   System . Collections . Generic . IEnumerable < string >   GetClasses ()",
            "title": "GetClasses()"
        },
        {
            "location": "/api/#getentries",
            "text": "Enumerates the entries stored in the table.  public   System . Collections . Generic . IEnumerable < Rant . Vocabulary . RantDictionaryEntry >   GetEntries ()",
            "title": "GetEntries()"
        },
        {
            "location": "/api/#gethashcode_17",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#getsubtypeindexstring",
            "text": "Retrieves the term index assigned to the specified subtype.\n            If the subtype is not found, the method will return -1.\n            If the subtype is a null, whitespace, or an empty string, the method will return 0.  public   int   GetSubtypeIndex ( string   subtype )   Parameters   subtype : The subtype to look up.",
            "title": "GetSubtypeIndex(string)"
        },
        {
            "location": "/api/#getsubtypes",
            "text": "Enumerates the subtypes contained in the current table.  public   System . Collections . Generic . IEnumerable < string >   GetSubtypes ()",
            "title": "GetSubtypes()"
        },
        {
            "location": "/api/#getsubtypesforindexint",
            "text": "Enumerates the subtypes associated with the specified term index.  public   System . Collections . Generic . IEnumerable < string >   GetSubtypesForIndex ( int   index )   Parameters   index : The index to get subtypes for.",
            "title": "GetSubtypesForIndex(int)"
        },
        {
            "location": "/api/#gettype_18",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#hideclassstring",
            "text": "Hides the specified class.  public   bool   HideClass ( string   className )   Parameters   className : The name of the class to hide.",
            "title": "HideClass(string)"
        },
        {
            "location": "/api/#isclasshiddenstring",
            "text": "Determines whether the specified class is hidden by the table.  public   bool   IsClassHidden ( string   className )   Parameters   className : The name of the class to check.",
            "title": "IsClassHidden(string)"
        },
        {
            "location": "/api/#mergerantdictionarytable",
            "text": "Adds another table's entries to the current table, given that they share the same name and term count.  public   bool   Merge ( RantDictionaryTable   other )   Parameters   other : The table whose entries will be added to the current instance.",
            "title": "Merge(RantDictionaryTable)"
        },
        {
            "location": "/api/#returns_4",
            "text": "True if merge succeeded; otherwise, False.",
            "title": "Returns"
        },
        {
            "location": "/api/#rebuildcache",
            "text": "Optimizes the table. Call this after writing items to the table or removing items from a table.\n            If you're writing or removing multiple items, call this after all the actions have been performed.  public   void   RebuildCache ()",
            "title": "RebuildCache()"
        },
        {
            "location": "/api/#removeentryrantdictionaryentry",
            "text": "Removes the specified entry from the table.  public   bool   RemoveEntry ( RantDictionaryEntry   entry )   Parameters   entry : The entry to remove from the table.",
            "title": "RemoveEntry(RantDictionaryEntry)"
        },
        {
            "location": "/api/#returns_5",
            "text": "True if successfully removed; otherwise, False.",
            "title": "Returns"
        },
        {
            "location": "/api/#removesubtypestring",
            "text": "Removes the specified subtype from the table, if it exists.\n            Subtypes are case insensitive.  public   bool   RemoveSubtype ( string   subtypeName )   Parameters   subtypeName : The name of the subtype to remove.",
            "title": "RemoveSubtype(string)"
        },
        {
            "location": "/api/#returns_6",
            "text": "TRUE if the subtype was found and removed. FALSE if the subtype was not found.",
            "title": "Returns"
        },
        {
            "location": "/api/#tostring_17",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#unhideclassstring",
            "text": "Unhides the specified class.  public   bool   UnhideClass ( string   className )   Parameters   className : The name of the class to unhide.",
            "title": "UnhideClass(string)"
        },
        {
            "location": "/api/#rantdictionaryterm-class-rantvocabulary",
            "text": "Namespace:  Rant.Vocabulary  Inheritance:  Object \u2192 RantDictionaryTerm  Represents a single term of a dictionary entry.  public   sealed   class   RantDictionaryTerm",
            "title": "RantDictionaryTerm class (Rant.Vocabulary)"
        },
        {
            "location": "/api/#constructors_11",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/api/#rantdictionarytermstring-int",
            "text": "Intializes a new instance of the  class with the specified value string.  public   RantDictionaryTerm ( string   value ,   int   splitIndex   =   - 1 )   Parameters   value : The value of the term.  splitIndex : The split index of the term value. Specify -1 for no split.",
            "title": "RantDictionaryTerm(string, int)"
        },
        {
            "location": "/api/#rantdictionarytermstring-string",
            "text": "Intializes a new instance of the  class with the specified value and pronunciation\n            strings.  public   RantDictionaryTerm ( string   value ,   string   pronunciation )   Parameters   value : The value of the term.  pronunciation : The pronunciation of the term value.",
            "title": "RantDictionaryTerm(string, string)"
        },
        {
            "location": "/api/#rantdictionarytermstring-string-int-int",
            "text": "Intializes a new instance of the  class with the specified value, pronunciation, and\n            split indices.  public   RantDictionaryTerm ( string   value ,   string   pronunciation ,   int   valueSplitIndex ,   int   pronSplitIndex )   Parameters   value : The value of the term.  pronunciation : The pronunciation of the term value.  valueSplitIndex : The split index of the term value. Specify -1 for no split.  pronSplitIndex : The split index of the term pronunciation string. Specify -1 for no split. Must be\n            positive if the value is split and pronunciation data is present.",
            "title": "RantDictionaryTerm(string, string, int, int)"
        },
        {
            "location": "/api/#properties_12",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#issplit",
            "text": "Determines whether the term is a split word.  public   bool   IsSplit  { \n     get ;  }",
            "title": "IsSplit"
        },
        {
            "location": "/api/#leftside",
            "text": "Gets the term value substring on the left side of the split.  public   string   LeftSide  { \n     get ;  }",
            "title": "LeftSide"
        },
        {
            "location": "/api/#pronunciation",
            "text": "The pronunciation of the term.  public   string   Pronunciation  { \n     get ; \n     set ;  }",
            "title": "Pronunciation"
        },
        {
            "location": "/api/#pronunciationsplitindex",
            "text": "Gets the split index of the term pronunciation string.  public   int   PronunciationSplitIndex  { \n     get ; \n     set ;  }",
            "title": "PronunciationSplitIndex"
        },
        {
            "location": "/api/#rightside",
            "text": "Gets the term value substring on the right side of the split.  public   string   RightSide  { \n     get ;  }",
            "title": "RightSide"
        },
        {
            "location": "/api/#syllablecount",
            "text": "The number of syllables in the pronunciation string.  public   int   SyllableCount  { \n     get ;  }",
            "title": "SyllableCount"
        },
        {
            "location": "/api/#syllables",
            "text": "An array containing the individual syllables of the pronunciation string.  public   string []   Syllables  { \n     get ;  }",
            "title": "Syllables"
        },
        {
            "location": "/api/#value",
            "text": "The value string of the term.  public   string   Value  { \n     get ; \n     set ;  }",
            "title": "Value"
        },
        {
            "location": "/api/#valuesplitindex",
            "text": "Gets the split index of the term value.  public   int   ValueSplitIndex  { \n     get ; \n     set ;  }",
            "title": "ValueSplitIndex"
        },
        {
            "location": "/api/#methods_20",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#equalsobject_18",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_18",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_19",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#tostring_18",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#rantengine-class-rant",
            "text": "Namespace:  Rant  Inheritance:  Object \u2192 RantEngine  The central class of the Rant engine that allows the execution of patterns.  public   sealed   class   RantEngine",
            "title": "RantEngine class (Rant)"
        },
        {
            "location": "/api/#constructors_12",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/api/#rantengine",
            "text": "Creates a new RantEngine object without a dictionary.  public   RantEngine ()",
            "title": "RantEngine()"
        },
        {
            "location": "/api/#rantenginerantdictionary",
            "text": "Creates a new RantEngine object with the specified vocabulary.  public   RantEngine ( RantDictionary   dictionary )   Parameters   dictionary : The vocabulary to load in this instance.",
            "title": "RantEngine(RantDictionary)"
        },
        {
            "location": "/api/#properties_13",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#dependencyresolver",
            "text": "Gets or sets the depdendency resolver used for packages.  public   RantDependencyResolver   DependencyResolver  { \n     get ; \n     set ;  }",
            "title": "DependencyResolver"
        },
        {
            "location": "/api/#dictionary",
            "text": "The vocabulary associated with this instance.  public   RantDictionary   Dictionary  { \n     get ; \n     set ;  }",
            "title": "Dictionary"
        },
        {
            "location": "/api/#format",
            "text": "The current formatting settings for the engine.  public   RantFormat   Format  { \n     get ; \n     set ;  }",
            "title": "Format"
        },
        {
            "location": "/api/#maxstacksize",
            "text": "Gets or sets the maximum stack size allowed for a pattern.  public   static   int   MaxStackSize  { \n     get ; \n     set ;  }",
            "title": "MaxStackSize"
        },
        {
            "location": "/api/#preservecarrierstate",
            "text": "Specifies whether to preserve carrier states between patterns.  public   bool   PreserveCarrierState  { \n     get ; \n     set ;  }",
            "title": "PreserveCarrierState"
        },
        {
            "location": "/api/#indexers_3",
            "text": "",
            "title": "Indexers"
        },
        {
            "location": "/api/#thisstring-name_1",
            "text": "Accesses global variables.  public   RantObject   this [ string   name ]  { \n     get ; \n     set ;  }",
            "title": "this[string name]"
        },
        {
            "location": "/api/#fields_3",
            "text": "",
            "title": "Fields"
        },
        {
            "location": "/api/#flags",
            "text": "The currently set flags.  public   readonly   HashSet < string >   Flags ;",
            "title": "Flags"
        },
        {
            "location": "/api/#methods_21",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#dostring-int-double-rantprogramargs",
            "text": "Warning  This item is deprecated. \nUse an overload of Do() that accepts a RantProgram instead of a string.   Compiles the specified string into a pattern, executes it, and returns the resulting output.  public   Rant . RantOutput   Do ( string   input ,   int   charLimit   =   0 ,   double   timeout   =   - 1d ,   RantProgramArgs   args   =   null )   Parameters   input : The input string to execute.  charLimit : The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.  timeout : The maximum number of seconds that the pattern will execute for.  args : The arguments to pass to the pattern.",
            "title": "Do(string, int, double, RantProgramArgs)"
        },
        {
            "location": "/api/#dorantprogram-int-double-rantprogramargs",
            "text": "Executes the specified pattern and returns the resulting output.  public   Rant . RantOutput   Do ( RantProgram   input ,   int   charLimit   =   0 ,   double   timeout   =   - 1d ,   RantProgramArgs   args   =   null )   Parameters   input : The pattern to execute.  charLimit : The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.  timeout : The maximum number of seconds that the pattern will execute for.  args : The arguments to pass to the pattern.",
            "title": "Do(RantProgram, int, double, RantProgramArgs)"
        },
        {
            "location": "/api/#dostring-long-int-double-rantprogramargs",
            "text": "Warning  This item is deprecated. \nUse an overload of Do() that accepts a RantProgram instead of a string.   Compiles the specified string into a pattern, executes it using a custom seed, and returns the resulting output.  public   Rant . RantOutput   Do ( string   input ,   long   seed ,   int   charLimit   =   0 ,   double   timeout   =   - 1d ,   RantProgramArgs   args   =   null )   Parameters   input : The input string to execute.  seed : The seed to generate output with.  charLimit : The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.  timeout : The maximum number of seconds that the pattern will execute for.  args : The arguments to pass to the pattern.",
            "title": "Do(string, long, int, double, RantProgramArgs)"
        },
        {
            "location": "/api/#dostring-rng-int-double-rantprogramargs",
            "text": "Warning  This item is deprecated. \nUse an overload of Do() that accepts a RantProgram instead of a string.   Compiles the specified string into a pattern, executes it using a custom RNG, and returns the resulting output.  public   Rant . RantOutput   Do ( string   input ,   RNG   rng ,   int   charLimit   =   0 ,   double   timeout   =   - 1d ,   RantProgramArgs   args   =   null )   Parameters   input : The input string to execute.  rng : The random number generator to use when generating output.  charLimit : The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.  timeout : The maximum number of seconds that the pattern will execute for.  args : The arguments to pass to the pattern.",
            "title": "Do(string, RNG, int, double, RantProgramArgs)"
        },
        {
            "location": "/api/#dorantprogram-long-int-double-rantprogramargs",
            "text": "Executes the specified pattern using a custom seed and returns the resulting output.  public   Rant . RantOutput   Do ( RantProgram   input ,   long   seed ,   int   charLimit   =   0 ,   double   timeout   =   - 1d ,   RantProgramArgs   args   =   null )   Parameters   input : The pattern to execute.  seed : The seed to generate output with.  charLimit : The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.  timeout : The maximum number of seconds that the pattern will execute for.  args : The arguments to pass to the pattern.",
            "title": "Do(RantProgram, long, int, double, RantProgramArgs)"
        },
        {
            "location": "/api/#dorantprogram-rng-int-double-rantprogramargs",
            "text": "Executes the specified pattern using a custom random number generator and returns the resulting output.  public   Rant . RantOutput   Do ( RantProgram   input ,   RNG   rng ,   int   charLimit   =   0 ,   double   timeout   =   - 1d ,   RantProgramArgs   args   =   null )   Parameters   input : The pattern to execute.  rng : The random number generator to use when generating output.  charLimit : The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.  timeout : The maximum number of seconds that the pattern will execute for.  args : The arguments to pass to the pattern.",
            "title": "Do(RantProgram, RNG, int, double, RantProgramArgs)"
        },
        {
            "location": "/api/#dofilestring-int-double-rantprogramargs",
            "text": "Warning  This item is deprecated. \nUse an overload of Do() that accepts a RantProgram instead of a string.   Loads the file located at the specified path and executes it, returning the resulting output.  public   Rant . RantOutput   DoFile ( string   path ,   int   charLimit   =   0 ,   double   timeout   =   - 1d ,   RantProgramArgs   args   =   null )   Parameters   path : The path to the file to execute.  charLimit : The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.  timeout : The maximum number of seconds that the pattern will execute for.  args : The arguments to pass to the pattern.",
            "title": "DoFile(string, int, double, RantProgramArgs)"
        },
        {
            "location": "/api/#dofilestring-long-int-double-rantprogramargs",
            "text": "Loads the file located at the specified path and executes it using a custom seed, returning the resulting output.  public   Rant . RantOutput   DoFile ( string   path ,   long   seed ,   int   charLimit   =   0 ,   double   timeout   =   - 1d ,   RantProgramArgs   args   =   null )   Parameters   path : The path to the file to execute.  seed : The seed to generate output with.  charLimit : The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.  timeout : The maximum number of seconds that the pattern will execute for.  args : The arguments to pass to the pattern.",
            "title": "DoFile(string, long, int, double, RantProgramArgs)"
        },
        {
            "location": "/api/#dofilestring-rng-int-double-rantprogramargs",
            "text": "Loads the file located at the specified path and executes it using a custom seed, returning the resulting output.  public   Rant . RantOutput   DoFile ( string   path ,   RNG   rng ,   int   charLimit   =   0 ,   double   timeout   =   - 1d ,   RantProgramArgs   args   =   null )   Parameters   path : The path to the file to execute.  rng : The random number generator to use when generating output.  charLimit : The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.  timeout : The maximum number of seconds that the pattern will execute for.  args : The arguments to pass to the pattern.",
            "title": "DoFile(string, RNG, int, double, RantProgramArgs)"
        },
        {
            "location": "/api/#donamestring-int-double-rantprogramargs",
            "text": "Executes a pattern that has been loaded from a package and returns the resulting output.  public   Rant . RantOutput   DoName ( string   patternName ,   int   charLimit   =   0 ,   double   timeout   =   - 1d ,   RantProgramArgs   args   =   null )   Parameters   patternName : The name of the pattern to execute.  charLimit : The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.  timeout : The maximum number of seconds that the pattern will execute for.  args : The arguments to pass to the pattern.",
            "title": "DoName(string, int, double, RantProgramArgs)"
        },
        {
            "location": "/api/#donamestring-long-int-double-rantprogramargs",
            "text": "Executes a pattern that has been loaded from a package and returns the resulting output.  public   Rant . RantOutput   DoName ( string   patternName ,   long   seed ,   int   charLimit   =   0 ,   double   timeout   =   - 1d ,   RantProgramArgs   args   =   null )   Parameters   patternName : The name of the pattern to execute.  seed : The seed to generate output with.  charLimit : The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.  timeout : The maximum number of seconds that the pattern will execute for.  args : The arguments to pass to the pattern.",
            "title": "DoName(string, long, int, double, RantProgramArgs)"
        },
        {
            "location": "/api/#donamestring-rng-int-double-rantprogramargs",
            "text": "Executes a pattern that has been loaded from a package using a custom random number generator and returns the resulting\n            output.  public   Rant . RantOutput   DoName ( string   patternName ,   RNG   rng ,   int   charLimit   =   0 ,   double   timeout   =   - 1d ,   RantProgramArgs   args   =   null )   Parameters   patternName : The name of the pattern to execute.  rng : The random number generator to use when generating output.  charLimit : The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.  timeout : The maximum number of seconds that the pattern will execute for.  args : The arguments to pass to the pattern.",
            "title": "DoName(string, RNG, int, double, RantProgramArgs)"
        },
        {
            "location": "/api/#doserialrantprogram-int-double-rantprogramargs",
            "text": "Executes the specified pattern and returns a series of outputs.  public   System . Collections . Generic . IEnumerable < Rant . RantOutput >   DoSerial ( RantProgram   input ,   int   charLimit   =   0 ,   double   timeout   =   - 1d ,   RantProgramArgs   args   =   null )   Parameters   input : The pattern to execute.  charLimit : The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.  timeout : The maximum number of seconds that the pattern will execute for.  args : The arguments to pass to the pattern.",
            "title": "DoSerial(RantProgram, int, double, RantProgramArgs)"
        },
        {
            "location": "/api/#doserialstring-int-double-rantprogramargs",
            "text": "Warning  This item is deprecated. \nUse an overload of DoSerial() that accepts a RantProgram instead of a string.   Executes the specified pattern and returns a series of outputs.  public   System . Collections . Generic . IEnumerable < Rant . RantOutput >   DoSerial ( string   input ,   int   charLimit   =   0 ,   double   timeout   =   - 1d ,   RantProgramArgs   args   =   null )   Parameters   input : The pattern to execute.  charLimit : The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.  timeout : The maximum number of seconds that the pattern will execute for.  args : The arguments to pass to the pattern.",
            "title": "DoSerial(string, int, double, RantProgramArgs)"
        },
        {
            "location": "/api/#doserialrantprogram-long-int-double-rantprogramargs",
            "text": "Executes the specified pattern and returns a series of outputs.  public   System . Collections . Generic . IEnumerable < Rant . RantOutput >   DoSerial ( RantProgram   input ,   long   seed ,   int   charLimit   =   0 ,   double   timeout   =   - 1d ,   RantProgramArgs   args   =   null )   Parameters   input : The patten to execute.  seed : The seed to generate output with.  charLimit : The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.  timeout : The maximum number of seconds that the pattern will execute for.  args : The arguments to pass to the pattern.",
            "title": "DoSerial(RantProgram, long, int, double, RantProgramArgs)"
        },
        {
            "location": "/api/#doserialrantprogram-rng-int-double-rantprogramargs",
            "text": "Executes the specified pattern and returns a series of outputs.  public   System . Collections . Generic . IEnumerable < Rant . RantOutput >   DoSerial ( RantProgram   input ,   RNG   rng ,   int   charLimit   =   0 ,   double   timeout   =   - 1d ,   RantProgramArgs   args   =   null )   Parameters   input : The pattero to execute.  rng : The random number generator to use when generating output.  charLimit : The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.  timeout : The maximum number of seconds that the pattern will execute for.  args : The arguments to pass to the pattern.",
            "title": "DoSerial(RantProgram, RNG, int, double, RantProgramArgs)"
        },
        {
            "location": "/api/#doserialstring-long-int-double-rantprogramargs",
            "text": "Warning  This item is deprecated. \nUse an overload of DoSerial() that accepts a RantProgram instead of a string.   Executes the specified pattern and returns a series of outputs.  public   System . Collections . Generic . IEnumerable < Rant . RantOutput >   DoSerial ( string   input ,   long   seed ,   int   charLimit   =   0 ,   double   timeout   =   - 1d ,   RantProgramArgs   args   =   null )   Parameters   input : The pattern to execute.  seed : The seed to generate output with.  charLimit : The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.  timeout : The maximum number of seconds that the pattern will execute for.  args : The arguments to pass to the pattern.",
            "title": "DoSerial(string, long, int, double, RantProgramArgs)"
        },
        {
            "location": "/api/#doserialstring-rng-int-double-rantprogramargs",
            "text": "Warning  This item is deprecated. \nUse an overload of DoSerial() that accepts a RantProgram instead of a string.   Executes the specified pattern and returns a series of outputs.  public   System . Collections . Generic . IEnumerable < Rant . RantOutput >   DoSerial ( string   input ,   RNG   rng ,   int   charLimit   =   0 ,   double   timeout   =   - 1d ,   RantProgramArgs   args   =   null )   Parameters   input : The pattern to execute.  rng : The random number generator to use when generating output.  charLimit : The maximum number of characters that can be printed. An exception will be thrown if the limit\n            is exceeded. Set to zero or below for unlimited characters.  timeout : The maximum number of seconds that the pattern will execute for.  args : The arguments to pass to the pattern.",
            "title": "DoSerial(string, RNG, int, double, RantProgramArgs)"
        },
        {
            "location": "/api/#equalsobject_19",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_19",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_20",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#loadpackagerantpackage",
            "text": "Loads the specified package into the engine.  public   void   LoadPackage ( RantPackage   package )   Parameters   package : The package to load.",
            "title": "LoadPackage(RantPackage)"
        },
        {
            "location": "/api/#loadpackagestring",
            "text": "Loads the package at the specified file path into the engine.  public   void   LoadPackage ( string   path )   Parameters   path : The path to the package to load.",
            "title": "LoadPackage(string)"
        },
        {
            "location": "/api/#programnameloadedstring",
            "text": "Returns a boolean value indicating whether a program by the specified name has been loaded from a package.  public   bool   ProgramNameLoaded ( string   patternName )   Parameters   patternName : The name of the program to check.",
            "title": "ProgramNameLoaded(string)"
        },
        {
            "location": "/api/#resetcarrierstate",
            "text": "Deletes all state data in the engine's persisted carrier state, if available.  public   void   ResetCarrierState ()",
            "title": "ResetCarrierState()"
        },
        {
            "location": "/api/#tostring_19",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#rantformat-class-rantformats",
            "text": "Namespace:  Rant.Formats  Inheritance:  Object \u2192 RantFormat  Describes language-specific formatting instructions for localizing interpreter output.  public   sealed   class   RantFormat",
            "title": "RantFormat class (Rant.Formats)"
        },
        {
            "location": "/api/#constructors_13",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/api/#rantformat",
            "text": "Creates a new RantFormat instance with default values.  public   RantFormat ()",
            "title": "RantFormat()"
        },
        {
            "location": "/api/#rantformatcultureinfo-writingsystem-ienumerable-pluralizer-numberverbalizer",
            "text": "Creates a new RantFormat instance with the specified configuration data.  public   RantFormat ( CultureInfo   culture ,   WritingSystem   writingSystem ,   IEnumerable < string >   titleCaseExclusions ,   Pluralizer   pluralizer ,   NumberVerbalizer   numVerbalizer )   Parameters   culture : The culture to associate with the format.  writingSystem : The writing system to use.  titleCaseExclusions : A collection of words to exclude from title case capitalization.  pluralizer : The pluralizer to use.  numVerbalizer : The number verbalizer to use.",
            "title": "RantFormat(CultureInfo, WritingSystem, IEnumerable, Pluralizer, NumberVerbalizer)"
        },
        {
            "location": "/api/#properties_14",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#culture",
            "text": "The culture to format output strings with.  public   CultureInfo   Culture  { \n     get ;  }",
            "title": "Culture"
        },
        {
            "location": "/api/#numberverbalizer",
            "text": "The number verbalizer for the current format.  public   NumberVerbalizer   NumberVerbalizer  { \n     get ;  }",
            "title": "NumberVerbalizer"
        },
        {
            "location": "/api/#pluralizer",
            "text": "The pluralizer used by the [plural] function to infer plural nouns.  public   Pluralizer   Pluralizer  { \n     get ;  }",
            "title": "Pluralizer"
        },
        {
            "location": "/api/#writingsystem",
            "text": "The writing system for the current format.  public   WritingSystem   WritingSystem  { \n     get ;  }",
            "title": "WritingSystem"
        },
        {
            "location": "/api/#fields_4",
            "text": "",
            "title": "Fields"
        },
        {
            "location": "/api/#english",
            "text": "English formatting.  public   static   readonly   RantFormat   English ;",
            "title": "English"
        },
        {
            "location": "/api/#german",
            "text": "German formatting.  public   static   readonly   RantFormat   German ;",
            "title": "German"
        },
        {
            "location": "/api/#methods_22",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#equalsobject_20",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_20",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_21",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#tostring_20",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#rantfunctionparametertype-enum-rantcoreframework",
            "text": "Namespace:  Rant.Core.Framework  Inheritance:  Object \u2192 ValueType \u2192 Enum \u2192 RantFunctionParameterType  Defines parameter types for Rant functions.  public   enum   RantFunctionParameterType",
            "title": "RantFunctionParameterType enum (Rant.Core.Framework)"
        },
        {
            "location": "/api/#fields_5",
            "text": "",
            "title": "Fields"
        },
        {
            "location": "/api/#boolean",
            "text": "Parameter is a boolean.  public   const   RantFunctionParameterType   Boolean   =   6 ;",
            "title": "Boolean"
        },
        {
            "location": "/api/#flags_1",
            "text": "Parameter uses combinable flags.  public   const   RantFunctionParameterType   Flags   =   4 ;",
            "title": "Flags"
        },
        {
            "location": "/api/#mode",
            "text": "Parameter describes a mode, which is one of a specific set of allowed values.  public   const   RantFunctionParameterType   Mode   =   3 ;",
            "title": "Mode"
        },
        {
            "location": "/api/#number",
            "text": "Parameter is numeric.  public   const   RantFunctionParameterType   Number   =   2 ;",
            "title": "Number"
        },
        {
            "location": "/api/#pattern",
            "text": "Parameter is a lazily evaluated pattern.  public   const   RantFunctionParameterType   Pattern   =   1 ;",
            "title": "Pattern"
        },
        {
            "location": "/api/#rantobject",
            "text": "Parameter is a RantObject.  public   const   RantFunctionParameterType   RantObject   =   5 ;",
            "title": "RantObject"
        },
        {
            "location": "/api/#string",
            "text": "Parameter is a static string.  public   const   RantFunctionParameterType   String   =   0 ;",
            "title": "String"
        },
        {
            "location": "/api/#methods_23",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#comparetoobject_3",
            "text": "No Summary  public   override   int   CompareTo ( object   target )   Parameters   target :  No Description",
            "title": "CompareTo(object)"
        },
        {
            "location": "/api/#equalsobject_21",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_21",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_22",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#gettypecode_3",
            "text": "No Summary  public   override   System . TypeCode   GetTypeCode ()",
            "title": "GetTypeCode()"
        },
        {
            "location": "/api/#hasflagenum_3",
            "text": "No Summary  public   override   bool   HasFlag ( Enum   flag )   Parameters   flag :  No Description",
            "title": "HasFlag(Enum)"
        },
        {
            "location": "/api/#tostring_21",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#tostringstring_3",
            "text": "No Summary  public   override   string   ToString ( string   format )   Parameters   format :  No Description",
            "title": "ToString(string)"
        },
        {
            "location": "/api/#tostringiformatprovider_3",
            "text": "Warning  This item is deprecated. \nThe provider argument is not used. Please use ToString().   No Summary  public   override   string   ToString ( IFormatProvider   provider )   Parameters   provider :  No Description",
            "title": "ToString(IFormatProvider)"
        },
        {
            "location": "/api/#tostringstring-iformatprovider_3",
            "text": "Warning  This item is deprecated. \nThe provider argument is not used. Please use ToString(String).   No Summary  public   override   string   ToString ( string   format ,   IFormatProvider   provider )   Parameters   format :  No Description  provider :  No Description",
            "title": "ToString(string, IFormatProvider)"
        },
        {
            "location": "/api/#rantinternalexception-class-rant",
            "text": "Namespace:  Rant  Inheritance:  Object \u2192 Exception \u2192 RantInternalException  Represents an error that has been caused by a problem inside the Rant engine. This typically indicates the presence of\n            a bug.  public   sealed   class   RantInternalException   :   System . Exception ,   System . Runtime . Serialization . ISerializable ,   System . Runtime . InteropServices . _Exception",
            "title": "RantInternalException class (Rant)"
        },
        {
            "location": "/api/#properties_15",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#data_1",
            "text": "No Summary  public   override   IDictionary   Data  { \n     get ;  }",
            "title": "Data"
        },
        {
            "location": "/api/#helplink_1",
            "text": "No Summary  public   override   string   HelpLink  { \n     get ; \n     set ;  }",
            "title": "HelpLink"
        },
        {
            "location": "/api/#hresult_1",
            "text": "No Summary  public   override   int   HResult  { \n     get ; \n     set ;  }",
            "title": "HResult"
        },
        {
            "location": "/api/#innerexception_1",
            "text": "No Summary  public   override   Exception   InnerException  { \n     get ;  }",
            "title": "InnerException"
        },
        {
            "location": "/api/#message_2",
            "text": "No Summary  public   override   string   Message  { \n     get ;  }",
            "title": "Message"
        },
        {
            "location": "/api/#source_2",
            "text": "No Summary  public   override   string   Source  { \n     get ; \n     set ;  }",
            "title": "Source"
        },
        {
            "location": "/api/#stacktrace_1",
            "text": "No Summary  public   override   string   StackTrace  { \n     get ;  }",
            "title": "StackTrace"
        },
        {
            "location": "/api/#targetsite_1",
            "text": "No Summary  public   override   MethodBase   TargetSite  { \n     get ;  }",
            "title": "TargetSite"
        },
        {
            "location": "/api/#methods_24",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#equalsobject_22",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#getbaseexception_1",
            "text": "No Summary  public   override   System . Exception   GetBaseException ()",
            "title": "GetBaseException()"
        },
        {
            "location": "/api/#gethashcode_22",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#getobjectdataserializationinfo-streamingcontext_1",
            "text": "No Summary  public   override   void   GetObjectData ( SerializationInfo   info ,   StreamingContext   context )   Parameters   info :  No Description  context :  No Description",
            "title": "GetObjectData(SerializationInfo, StreamingContext)"
        },
        {
            "location": "/api/#gettype_23",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#gettype_24",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#tostring_22",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#rantobject-class-rantcoreobjectmodel",
            "text": "Namespace:  Rant.Core.ObjectModel  Inheritance:  Object \u2192 RantObject  Represents a Rant variable.  public   sealed   class   RantObject",
            "title": "RantObject class (Rant.Core.ObjectModel)"
        },
        {
            "location": "/api/#constructors_14",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/api/#rantobject_1",
            "text": "Creates a null object.  public   RantObject ()",
            "title": "RantObject()"
        },
        {
            "location": "/api/#rantobjectobject",
            "text": "Initializes a new instance of the  class from the specified object.  public   RantObject ( object   o )   Parameters   o : The object to store in the  instance.",
            "title": "RantObject(object)"
        },
        {
            "location": "/api/#rantobjectrantobjecttype",
            "text": "Creates a new RantObject with the specified object type and a default value.  public   RantObject ( RantObjectType   type )   Parameters   type : The type of object to create.",
            "title": "RantObject(RantObjectType)"
        },
        {
            "location": "/api/#properties_16",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#length_1",
            "text": "Gets the length of the object. For strings, this is the character count. For lists, this is the item count. For all other types, -1 is returned.  public   int   Length  { \n     get ;  }",
            "title": "Length"
        },
        {
            "location": "/api/#type_1",
            "text": "The type of the object.  public   RantObjectType   Type  { \n     get ; \n     set ;  }",
            "title": "Type"
        },
        {
            "location": "/api/#value_1",
            "text": "The value of the object.  public   object   Value  { \n     get ;  }",
            "title": "Value"
        },
        {
            "location": "/api/#indexers_4",
            "text": "",
            "title": "Indexers"
        },
        {
            "location": "/api/#thisint-index_2",
            "text": "Gets or sets the object at the specified index in the object.\n            Only works with list objects.  public   RantObject   this [ int   index ]  { \n     get ; \n     set ;  }",
            "title": "this[int index]"
        },
        {
            "location": "/api/#fields_6",
            "text": "",
            "title": "Fields"
        },
        {
            "location": "/api/#false",
            "text": "False  public   static   readonly   RantObject   False ;",
            "title": "False"
        },
        {
            "location": "/api/#null",
            "text": "Null  public   static   readonly   RantObject   Null ;",
            "title": "Null"
        },
        {
            "location": "/api/#true",
            "text": "True  public   static   readonly   RantObject   True ;",
            "title": "True"
        },
        {
            "location": "/api/#methods_25",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#clone",
            "text": "Returns another RantObject instance with the exact same value as the current instance.  public   Rant . Core . ObjectModel . RantObject   Clone ()",
            "title": "Clone()"
        },
        {
            "location": "/api/#converttorantobjecttype",
            "text": "Converts the current object to a RantObject of the specified type and returns it.  public   Rant . Core . ObjectModel . RantObject   ConvertTo ( RantObjectType   targetType )   Parameters   targetType : The object type to convert to.",
            "title": "ConvertTo(RantObjectType)"
        },
        {
            "location": "/api/#equalsobject_23",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_23",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_25",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#tostring_23",
            "text": "Returns a string representation of the current RantObject.  public   virtual   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#rantobjecttype-enum-rantcoreobjectmodel",
            "text": "Namespace:  Rant.Core.ObjectModel  Inheritance:  Object \u2192 ValueType \u2192 Enum \u2192 RantObjectType  Defines object types used by Rant.  public   enum   RantObjectType",
            "title": "RantObjectType enum (Rant.Core.ObjectModel)"
        },
        {
            "location": "/api/#fields_7",
            "text": "",
            "title": "Fields"
        },
        {
            "location": "/api/#action",
            "text": "Represents a VM action.  public   const   RantObjectType   Action   =   4 ;",
            "title": "Action"
        },
        {
            "location": "/api/#boolean_1",
            "text": "Represents a boolean value.  public   const   RantObjectType   Boolean   =   2 ;",
            "title": "Boolean"
        },
        {
            "location": "/api/#list",
            "text": "Represents a resizable set of values.  public   const   RantObjectType   List   =   3 ;",
            "title": "List"
        },
        {
            "location": "/api/#null_1",
            "text": "Represents a lack of a value.  public   const   RantObjectType   Null   =   6 ;",
            "title": "Null"
        },
        {
            "location": "/api/#number_1",
            "text": "Represents a decimal number.  public   const   RantObjectType   Number   =   0 ;",
            "title": "Number"
        },
        {
            "location": "/api/#string_1",
            "text": "Represents a series of Unicode characters.  public   const   RantObjectType   String   =   1 ;",
            "title": "String"
        },
        {
            "location": "/api/#subroutine",
            "text": "Represents a subroutine.  public   const   RantObjectType   Subroutine   =   5 ;",
            "title": "Subroutine"
        },
        {
            "location": "/api/#undefined",
            "text": "Represents a lack of any variable at all.  public   const   RantObjectType   Undefined   =   7 ;",
            "title": "Undefined"
        },
        {
            "location": "/api/#methods_26",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#comparetoobject_4",
            "text": "No Summary  public   override   int   CompareTo ( object   target )   Parameters   target :  No Description",
            "title": "CompareTo(object)"
        },
        {
            "location": "/api/#equalsobject_24",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_24",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_26",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#gettypecode_4",
            "text": "No Summary  public   override   System . TypeCode   GetTypeCode ()",
            "title": "GetTypeCode()"
        },
        {
            "location": "/api/#hasflagenum_4",
            "text": "No Summary  public   override   bool   HasFlag ( Enum   flag )   Parameters   flag :  No Description",
            "title": "HasFlag(Enum)"
        },
        {
            "location": "/api/#tostring_24",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#tostringstring_4",
            "text": "No Summary  public   override   string   ToString ( string   format )   Parameters   format :  No Description",
            "title": "ToString(string)"
        },
        {
            "location": "/api/#tostringiformatprovider_4",
            "text": "Warning  This item is deprecated. \nThe provider argument is not used. Please use ToString().   No Summary  public   override   string   ToString ( IFormatProvider   provider )   Parameters   provider :  No Description",
            "title": "ToString(IFormatProvider)"
        },
        {
            "location": "/api/#tostringstring-iformatprovider_4",
            "text": "Warning  This item is deprecated. \nThe provider argument is not used. Please use ToString(String).   No Summary  public   override   string   ToString ( string   format ,   IFormatProvider   provider )   Parameters   format :  No Description  provider :  No Description",
            "title": "ToString(string, IFormatProvider)"
        },
        {
            "location": "/api/#rantoutput-class-rant",
            "text": "Namespace:  Rant  Inheritance:  Object \u2192 RantOutput  Represents a collection of strings generated by a pattern.  public   sealed   class   RantOutput   :   System . Collections . Generic . IEnumerable < Rant . RantOutputEntry >,   System . Collections . IEnumerable",
            "title": "RantOutput class (Rant)"
        },
        {
            "location": "/api/#properties_17",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#basegeneration",
            "text": "The generation at which the RNG was initially set before the pattern was run.  public   long   BaseGeneration  { \n     get ;  }",
            "title": "BaseGeneration"
        },
        {
            "location": "/api/#main",
            "text": "The main output string.  public   string   Main  { \n     get ;  }",
            "title": "Main"
        },
        {
            "location": "/api/#seed",
            "text": "The seed used to generate the output.  public   long   Seed  { \n     get ;  }",
            "title": "Seed"
        },
        {
            "location": "/api/#indexers_5",
            "text": "",
            "title": "Indexers"
        },
        {
            "location": "/api/#thisstring-channel",
            "text": "Gets the output of the channel with the specified name.  public   string   this [ string   channel ]  { \n     get ;  }",
            "title": "this[string channel]"
        },
        {
            "location": "/api/#thisparams-string-channels",
            "text": "Gets an array containing the values of the specified channels, in the order they appear.  public   string []   this [ params   string []   channels ]  { \n     get ;  }",
            "title": "this[params string[] channels]"
        },
        {
            "location": "/api/#methods_27",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#equalsobject_25",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#getenumerator",
            "text": "Returns an enumerator that iterates through the outputs in the collection.  public   virtual   System . Collections . Generic . IEnumerator < Rant . RantOutputEntry >   GetEnumerator ()",
            "title": "GetEnumerator()"
        },
        {
            "location": "/api/#gethashcode_25",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_27",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#tostring_25",
            "text": "Returns the output from the \"main\" channel.  public   virtual   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#rantoutputentry-class-rant",
            "text": "Namespace:  Rant  Inheritance:  Object \u2192 RantOutputEntry  Represents the output of a single channel.  public   sealed   class   RantOutputEntry",
            "title": "RantOutputEntry class (Rant)"
        },
        {
            "location": "/api/#properties_18",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#name_6",
            "text": "Gets the name of the channel.  public   string   Name  { \n     get ;  }",
            "title": "Name"
        },
        {
            "location": "/api/#value_2",
            "text": "Gets the value of the channel.  public   string   Value  { \n     get ;  }",
            "title": "Value"
        },
        {
            "location": "/api/#visiblity",
            "text": "The visibility of the channel that created the output entry.  public   ChannelVisibility   Visiblity  { \n     get ;  }",
            "title": "Visiblity"
        },
        {
            "location": "/api/#methods_28",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#equalsobject_26",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_26",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_28",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#tostring_26",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#rantpackage-class-rantresources",
            "text": "Namespace:  Rant.Resources  Inheritance:  Object \u2192 RantPackage  Represents a collection of patterns and tables that can be exported to an archive file.  public   sealed   class   RantPackage",
            "title": "RantPackage class (Rant.Resources)"
        },
        {
            "location": "/api/#constructors_15",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/api/#rantpackage",
            "text": "No Summary  public   RantPackage ()",
            "title": "RantPackage()"
        },
        {
            "location": "/api/#properties_19",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#authors",
            "text": "The authors of the package.  public   string []   Authors  { \n     get ; \n     set ;  }",
            "title": "Authors"
        },
        {
            "location": "/api/#description_3",
            "text": "The description for the package.  public   string   Description  { \n     get ; \n     set ;  }",
            "title": "Description"
        },
        {
            "location": "/api/#id",
            "text": "The ID of the package.  public   string   ID  { \n     get ; \n     set ;  }",
            "title": "ID"
        },
        {
            "location": "/api/#tags",
            "text": "The tags associated with the package.  public   string []   Tags  { \n     get ; \n     set ;  }",
            "title": "Tags"
        },
        {
            "location": "/api/#title",
            "text": "The display name of the package.  public   string   Title  { \n     get ; \n     set ;  }",
            "title": "Title"
        },
        {
            "location": "/api/#version",
            "text": "The package version.  public   RantPackageVersion   Version  { \n     get ; \n     set ;  }",
            "title": "Version"
        },
        {
            "location": "/api/#methods_29",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#adddependencyrantpackagedependency",
            "text": "Adds the specified dependency to the package.  public   void   AddDependency ( RantPackageDependency   dependency )   Parameters   dependency : The dependency to add.",
            "title": "AddDependency(RantPackageDependency)"
        },
        {
            "location": "/api/#adddependencystring-string",
            "text": "Adds the specified dependency to the package.  public   void   AddDependency ( string   id ,   string   version )   Parameters   id : The ID of the package.  version : The package version to target.",
            "title": "AddDependency(string, string)"
        },
        {
            "location": "/api/#addresourcerantresource",
            "text": "Adds the specified resource to the package.  public   bool   AddResource ( RantResource   resource )   Parameters   resource : The resource to add.",
            "title": "AddResource(RantResource)"
        },
        {
            "location": "/api/#cleardependencies",
            "text": "Removes all dependencies from the package.  public   void   ClearDependencies ()",
            "title": "ClearDependencies()"
        },
        {
            "location": "/api/#containsresourcerantresource",
            "text": "Determines whether the package contains the specified resource.  public   bool   ContainsResource ( RantResource   resource )   Parameters   resource : The resource to search for.",
            "title": "ContainsResource(RantResource)"
        },
        {
            "location": "/api/#dependsonrantpackagedependency",
            "text": "Determines whether the package has the specified dependency.  public   bool   DependsOn ( RantPackageDependency   dependency )   Parameters   dependency : The dependency to check for.",
            "title": "DependsOn(RantPackageDependency)"
        },
        {
            "location": "/api/#dependsonstring-string",
            "text": "Determines whether the package depends on the specified package.  public   bool   DependsOn ( string   id ,   string   version )   Parameters   id : The ID of the package to check for.  version : The version of the package to check for.",
            "title": "DependsOn(string, string)"
        },
        {
            "location": "/api/#equalsobject_27",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#getdependencies",
            "text": "Enumerates the package's dependencies.  public   System . Collections . Generic . IEnumerable < Rant . Resources . RantPackageDependency >   GetDependencies ()",
            "title": "GetDependencies()"
        },
        {
            "location": "/api/#gethashcode_27",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#getresources",
            "text": "Enumerates all resources in the package.  public   System . Collections . Generic . IEnumerable < Rant . Resources . RantResource >   GetResources ()",
            "title": "GetResources()"
        },
        {
            "location": "/api/#getresourcestresource62",
            "text": "Enumerates all resources in the package.  public   System . Collections . Generic . IEnumerable < TResource >   GetResources < TResource >()   Type Parameters   TResource : (No Description)",
            "title": "GetResources\\&lt;TResource>()"
        },
        {
            "location": "/api/#gettype_29",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#loadstring",
            "text": "Loads a package from the specified path and returns it as a RantPackage object.  public   static   Rant . Resources . RantPackage   Load ( string   path )   Parameters   path : The path to the package file to load.",
            "title": "Load(string)"
        },
        {
            "location": "/api/#loadstream",
            "text": "Loads a package from the specified stream and returns it as a RantPackage object.  public   static   Rant . Resources . RantPackage   Load ( Stream   source )   Parameters   source : The stream to load the package data from.",
            "title": "Load(Stream)"
        },
        {
            "location": "/api/#removedependencyrantpackagedependency",
            "text": "Removes the specified dependency from the package.  public   bool   RemoveDependency ( RantPackageDependency   dependency )   Parameters   dependency : The dependency to remove.",
            "title": "RemoveDependency(RantPackageDependency)"
        },
        {
            "location": "/api/#removedependencystring-string",
            "text": "Removes the specified dependency from the package.  public   bool   RemoveDependency ( string   id ,   string   version )   Parameters   id : The ID of the dependency to remove.  version : The version of the dependency to remove.",
            "title": "RemoveDependency(string, string)"
        },
        {
            "location": "/api/#removeresourcerantresource",
            "text": "Removes the specified resource from the package.  public   bool   RemoveResource ( RantResource   resource )   Parameters   resource : The resource to remove.",
            "title": "RemoveResource(RantResource)"
        },
        {
            "location": "/api/#savestring-bool",
            "text": "Saves the package to the specified file path.  public   void   Save ( string   path ,   bool   compress   =   True )   Parameters   path : The path to the file to create.  compress : Specifies whether to compress the package contents.",
            "title": "Save(string, bool)"
        },
        {
            "location": "/api/#tostring_27",
            "text": "Returns a string containing the title and version of the package.  public   virtual   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#rantpackagedependency-class-rantresources",
            "text": "Namespace:  Rant.Resources  Inheritance:  Object \u2192 RantPackageDependency  Represents a dependency for a Rant package.  public   sealed   class   RantPackageDependency",
            "title": "RantPackageDependency class (Rant.Resources)"
        },
        {
            "location": "/api/#constructors_16",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/api/#rantpackagedependencystring-string",
            "text": "Initializes a new RantPackageDependency object.  public   RantPackageDependency ( string   id ,   string   version )   Parameters   id : The ID of the package.  version : The targeted version of the package.",
            "title": "RantPackageDependency(string, string)"
        },
        {
            "location": "/api/#rantpackagedependencystring-rantpackageversion",
            "text": "Initializes a new RantPackageDependency object.  public   RantPackageDependency ( string   id ,   RantPackageVersion   version )   Parameters   id : The ID of the package.  version : The targeted version of the package.",
            "title": "RantPackageDependency(string, RantPackageVersion)"
        },
        {
            "location": "/api/#properties_20",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#allownewer",
            "text": "Specifies whether the dependency will accept a package newer than the one given.  public   bool   AllowNewer  { \n     get ; \n     set ;  }",
            "title": "AllowNewer"
        },
        {
            "location": "/api/#id_1",
            "text": "The ID of the package.  public   string   ID  { \n     get ; \n     set ;  }",
            "title": "ID"
        },
        {
            "location": "/api/#version_1",
            "text": "The targeted version of the package.  public   RantPackageVersion   Version  { \n     get ; \n     set ;  }",
            "title": "Version"
        },
        {
            "location": "/api/#methods_30",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#checkversionrantpackageversion",
            "text": "Checks if the specified version is compatible with the current dependency.  public   bool   CheckVersion ( RantPackageVersion   version )   Parameters   version : The version to check.",
            "title": "CheckVersion(RantPackageVersion)"
        },
        {
            "location": "/api/#createrantpackage",
            "text": "Creates a dependency for the specified package.  public   static   Rant . Resources . RantPackageDependency   Create ( RantPackage   package )   Parameters   package : The package to create the dependency for.",
            "title": "Create(RantPackage)"
        },
        {
            "location": "/api/#equalsobject_28",
            "text": "Determines whether the current RantPackageDependency is shares an ID with the specified object.  public   virtual   bool   Equals ( object   obj )   Parameters   obj : The object to compare to.",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_28",
            "text": "Gets the hash code for the instance.  public   virtual   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_30",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#tostring_28",
            "text": "Returns a string representation of the current dependency.  public   virtual   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#rantpackageversion-class-rantresources",
            "text": "Namespace:  Rant.Resources  Inheritance:  Object \u2192 RantPackageVersion  Represents a version number for a Rant package.  public   sealed   class   RantPackageVersion",
            "title": "RantPackageVersion class (Rant.Resources)"
        },
        {
            "location": "/api/#constructors_17",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/api/#rantpackageversionint-int-int",
            "text": "Initializes a new RantPackageVersion instance with the specified values.  public   RantPackageVersion ( int   major ,   int   minor ,   int   revision )   Parameters   major : The major version.  minor : The minor version.  revision : The revision number.",
            "title": "RantPackageVersion(int, int, int)"
        },
        {
            "location": "/api/#rantpackageversion",
            "text": "Initializes a new RantPackageVersion instance with all values set to zero.  public   RantPackageVersion ()",
            "title": "RantPackageVersion()"
        },
        {
            "location": "/api/#properties_21",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#major",
            "text": "The major version.  public   int   Major  { \n     get ; \n     set ;  }",
            "title": "Major"
        },
        {
            "location": "/api/#minor",
            "text": "The minor version.  public   int   Minor  { \n     get ; \n     set ;  }",
            "title": "Minor"
        },
        {
            "location": "/api/#revision",
            "text": "The revision number.  public   int   Revision  { \n     get ; \n     set ;  }",
            "title": "Revision"
        },
        {
            "location": "/api/#methods_31",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#equalsobject_29",
            "text": "Determines whether the current version is equal to the specified object.  public   virtual   bool   Equals ( object   obj )   Parameters   obj : The object to compare to.",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_29",
            "text": "No Summary  public   virtual   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_31",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#parsestring",
            "text": "Attempts to parse a version string and returns the equivalent RantPackageVersion.  public   static   Rant . Resources . RantPackageVersion   Parse ( string   version )   Parameters   version : The version string to parse.",
            "title": "Parse(string)"
        },
        {
            "location": "/api/#tostring_29",
            "text": "Returns a string representation of the current version.  public   virtual   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#tryparsestring-out-rantpackageversion",
            "text": "No Summary  public   static   bool   TryParse ( string   version ,   out   RantPackageVersion &   result )   Parameters   version :  No Description  result :  No Description",
            "title": "TryParse(string, out RantPackageVersion&amp;)"
        },
        {
            "location": "/api/#rantprogram-class-rant",
            "text": "Namespace:  Rant  Inheritance:  Object \u2192 RantResource \u2192 RantProgram  Represents a compiled pattern that can be executed by the engine. It is recommended to use this class when running the\n            same pattern multiple times.  public   sealed   class   RantProgram   :   Rant . Resources . RantResource",
            "title": "RantProgram class (Rant)"
        },
        {
            "location": "/api/#properties_22",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#code",
            "text": "The pattern from which the program was compiled.  public   string   Code  { \n     get ;  }",
            "title": "Code"
        },
        {
            "location": "/api/#name_7",
            "text": "Gets or sets the name of the source code.  public   string   Name  { \n     get ; \n     set ;  }",
            "title": "Name"
        },
        {
            "location": "/api/#type_2",
            "text": "Describes the origin of the program.  public   RantProgramOrigin   Type  { \n     get ;  }",
            "title": "Type"
        },
        {
            "location": "/api/#methods_32",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#compilefilestring",
            "text": "Loads the file located at the specified path and compiles a program from its contents.  public   static   Rant . RantProgram   CompileFile ( string   path )   Parameters   path : The path to the file to load.",
            "title": "CompileFile(string)"
        },
        {
            "location": "/api/#compilestringstring",
            "text": "Compiles a program from the specified pattern.  public   static   Rant . RantProgram   CompileString ( string   code )   Parameters   code : The pattern to compile.",
            "title": "CompileString(string)"
        },
        {
            "location": "/api/#compilestringstring-string",
            "text": "Compiles a program from a pattern with the specified name.  public   static   Rant . RantProgram   CompileString ( string   name ,   string   code )   Parameters   name : The name to give the source.  code : The pattern to compile.",
            "title": "CompileString(string, string)"
        },
        {
            "location": "/api/#equalsobject_30",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_30",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_32",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#loadfilestring",
            "text": "Loads a compiled Rant program from the file at the specified path.  public   static   Rant . RantProgram   LoadFile ( string   path )   Parameters   path : The path to load the program from.",
            "title": "LoadFile(string)"
        },
        {
            "location": "/api/#loadstreamstring-stream",
            "text": "Loads a compiled Rant program from the specified stream.  public   static   Rant . RantProgram   LoadStream ( string   programName ,   Stream   stream )   Parameters   programName : The name to give to the program.  stream : The stream to load the program from.",
            "title": "LoadStream(string, Stream)"
        },
        {
            "location": "/api/#savetofilestring",
            "text": "Saves the compiled program to the file at the specified path.  public   void   SaveToFile ( string   path )   Parameters   path : The path to save the program to.",
            "title": "SaveToFile(string)"
        },
        {
            "location": "/api/#savetostreamstream",
            "text": "Saves the compiled program to the specified stream.  public   void   SaveToStream ( Stream   stream )   Parameters   stream : The stream to save the program to.",
            "title": "SaveToStream(Stream)"
        },
        {
            "location": "/api/#tostring_30",
            "text": "Returns a string describing the pattern.  public   virtual   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#rantprogramargs-class-rant",
            "text": "Namespace:  Rant  Inheritance:  Object \u2192 RantProgramArgs  Represents a set of arguments that can be passed to a pattern.  public   sealed   class   RantProgramArgs",
            "title": "RantProgramArgs class (Rant)"
        },
        {
            "location": "/api/#constructors_18",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/api/#rantprogramargs",
            "text": "Create a new, empty RantPatternArgs instance.  public   RantProgramArgs ()",
            "title": "RantProgramArgs()"
        },
        {
            "location": "/api/#indexers_6",
            "text": "",
            "title": "Indexers"
        },
        {
            "location": "/api/#thisstring-key",
            "text": "Gets or sets an argument of the specified name.  public   string   this [ string   key ]  { \n     get ; \n     set ;  }",
            "title": "this[string key]"
        },
        {
            "location": "/api/#methods_33",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#clear",
            "text": "Clears all values.  public   void   Clear ()",
            "title": "Clear()"
        },
        {
            "location": "/api/#containsstring",
            "text": "Determines whether an argument by the specified name exists in the current list.  public   bool   Contains ( string   key )   Parameters   key : The name of the argument to search for.",
            "title": "Contains(string)"
        },
        {
            "location": "/api/#createfromobject",
            "text": "Creates a RantPatternArgs instance from the specified object.\n            Works with anonymous types!  public   static   Rant . RantProgramArgs   CreateFrom ( object   value )   Parameters   value : The object to create an argument set from.",
            "title": "CreateFrom(object)"
        },
        {
            "location": "/api/#equalsobject_31",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_31",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_33",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#removestring",
            "text": "Removes the specified argument.  public   bool   Remove ( string   key )   Parameters   key : The name of the argument to remove.",
            "title": "Remove(string)"
        },
        {
            "location": "/api/#tostring_31",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#rantprogramorigin-enum-rant",
            "text": "Namespace:  Rant  Inheritance:  Object \u2192 ValueType \u2192 Enum \u2192 RantProgramOrigin  Indicates the manner in which a referenced code source was created.  public   enum   RantProgramOrigin",
            "title": "RantProgramOrigin enum (Rant)"
        },
        {
            "location": "/api/#fields_8",
            "text": "",
            "title": "Fields"
        },
        {
            "location": "/api/#file",
            "text": "Source was loaded from a file.  public   const   RantProgramOrigin   File   =   0 ;",
            "title": "File"
        },
        {
            "location": "/api/#string_2",
            "text": "Source was loaded from a string.  public   const   RantProgramOrigin   String   =   1 ;",
            "title": "String"
        },
        {
            "location": "/api/#methods_34",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#comparetoobject_5",
            "text": "No Summary  public   override   int   CompareTo ( object   target )   Parameters   target :  No Description",
            "title": "CompareTo(object)"
        },
        {
            "location": "/api/#equalsobject_32",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_32",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_34",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#gettypecode_5",
            "text": "No Summary  public   override   System . TypeCode   GetTypeCode ()",
            "title": "GetTypeCode()"
        },
        {
            "location": "/api/#hasflagenum_5",
            "text": "No Summary  public   override   bool   HasFlag ( Enum   flag )   Parameters   flag :  No Description",
            "title": "HasFlag(Enum)"
        },
        {
            "location": "/api/#tostring_32",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#tostringstring_5",
            "text": "No Summary  public   override   string   ToString ( string   format )   Parameters   format :  No Description",
            "title": "ToString(string)"
        },
        {
            "location": "/api/#tostringiformatprovider_5",
            "text": "Warning  This item is deprecated. \nThe provider argument is not used. Please use ToString().   No Summary  public   override   string   ToString ( IFormatProvider   provider )   Parameters   provider :  No Description",
            "title": "ToString(IFormatProvider)"
        },
        {
            "location": "/api/#tostringstring-iformatprovider_5",
            "text": "Warning  This item is deprecated. \nThe provider argument is not used. Please use ToString(String).   No Summary  public   override   string   ToString ( string   format ,   IFormatProvider   provider )   Parameters   format :  No Description  provider :  No Description",
            "title": "ToString(string, IFormatProvider)"
        },
        {
            "location": "/api/#rantresource-class-rantresources",
            "text": "Namespace:  Rant.Resources  Inheritance:  Object \u2192 RantResource  The base class for Rant resources that can be included in a package.  public   abstract   class   RantResource",
            "title": "RantResource class (Rant.Resources)"
        },
        {
            "location": "/api/#methods_35",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#equalsobject_33",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_33",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_35",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#tostring_33",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#rantruntimeexception-class-rant",
            "text": "Namespace:  Rant  Inheritance:  Object \u2192 Exception \u2192 RantRuntimeException  Represents a runtime error raised by the Rant engine.  public   sealed   class   RantRuntimeException   :   System . Exception ,   System . Runtime . Serialization . ISerializable ,   System . Runtime . InteropServices . _Exception",
            "title": "RantRuntimeException class (Rant)"
        },
        {
            "location": "/api/#properties_23",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#code_1",
            "text": "The source of the error.  public   string   Code  { \n     get ;  }",
            "title": "Code"
        },
        {
            "location": "/api/#column_1",
            "text": "The column on which the error occurred.  public   int   Column  { \n     get ;  }",
            "title": "Column"
        },
        {
            "location": "/api/#data_2",
            "text": "No Summary  public   override   IDictionary   Data  { \n     get ;  }",
            "title": "Data"
        },
        {
            "location": "/api/#helplink_2",
            "text": "No Summary  public   override   string   HelpLink  { \n     get ; \n     set ;  }",
            "title": "HelpLink"
        },
        {
            "location": "/api/#hresult_2",
            "text": "No Summary  public   override   int   HResult  { \n     get ; \n     set ;  }",
            "title": "HResult"
        },
        {
            "location": "/api/#index_1",
            "text": "The character index on which the error occurred.  public   int   Index  { \n     get ;  }",
            "title": "Index"
        },
        {
            "location": "/api/#innerexception_2",
            "text": "No Summary  public   override   Exception   InnerException  { \n     get ;  }",
            "title": "InnerException"
        },
        {
            "location": "/api/#line_1",
            "text": "The line on which the error occurred.  public   int   Line  { \n     get ;  }",
            "title": "Line"
        },
        {
            "location": "/api/#message_3",
            "text": "No Summary  public   override   string   Message  { \n     get ;  }",
            "title": "Message"
        },
        {
            "location": "/api/#rantstacktrace",
            "text": "The stack trace from the pattern.  public   string   RantStackTrace  { \n     get ;  }",
            "title": "RantStackTrace"
        },
        {
            "location": "/api/#source_3",
            "text": "No Summary  public   override   string   Source  { \n     get ; \n     set ;  }",
            "title": "Source"
        },
        {
            "location": "/api/#stacktrace_2",
            "text": "No Summary  public   override   string   StackTrace  { \n     get ;  }",
            "title": "StackTrace"
        },
        {
            "location": "/api/#targetsite_2",
            "text": "No Summary  public   override   MethodBase   TargetSite  { \n     get ;  }",
            "title": "TargetSite"
        },
        {
            "location": "/api/#methods_36",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#equalsobject_34",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#getbaseexception_2",
            "text": "No Summary  public   override   System . Exception   GetBaseException ()",
            "title": "GetBaseException()"
        },
        {
            "location": "/api/#gethashcode_34",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#getobjectdataserializationinfo-streamingcontext_2",
            "text": "No Summary  public   override   void   GetObjectData ( SerializationInfo   info ,   StreamingContext   context )   Parameters   info :  No Description  context :  No Description",
            "title": "GetObjectData(SerializationInfo, StreamingContext)"
        },
        {
            "location": "/api/#gettype_36",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#gettype_37",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#tostring_34",
            "text": "Returns a string representation of the runtime error, including the message and stack trace.  public   virtual   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#ranttableloadexception-class-rantvocabulary",
            "text": "Namespace:  Rant.Vocabulary  Inheritance:  Object \u2192 Exception \u2192 RantTableLoadException  Thrown when Rant encounters an error while loading a dictionary table.  public   sealed   class   RantTableLoadException   :   System . Exception ,   System . Runtime . Serialization . ISerializable ,   System . Runtime . InteropServices . _Exception",
            "title": "RantTableLoadException class (Rant.Vocabulary)"
        },
        {
            "location": "/api/#properties_24",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#column_2",
            "text": "Gets the column on which the error occurred.  public   int   Column  { \n     get ;  }",
            "title": "Column"
        },
        {
            "location": "/api/#data_3",
            "text": "No Summary  public   override   IDictionary   Data  { \n     get ;  }",
            "title": "Data"
        },
        {
            "location": "/api/#helplink_3",
            "text": "No Summary  public   override   string   HelpLink  { \n     get ; \n     set ;  }",
            "title": "HelpLink"
        },
        {
            "location": "/api/#hresult_3",
            "text": "No Summary  public   override   int   HResult  { \n     get ; \n     set ;  }",
            "title": "HResult"
        },
        {
            "location": "/api/#innerexception_3",
            "text": "No Summary  public   override   Exception   InnerException  { \n     get ;  }",
            "title": "InnerException"
        },
        {
            "location": "/api/#line_2",
            "text": "Gets the line number on which the error occurred.  public   int   Line  { \n     get ;  }",
            "title": "Line"
        },
        {
            "location": "/api/#message_4",
            "text": "No Summary  public   override   string   Message  { \n     get ;  }",
            "title": "Message"
        },
        {
            "location": "/api/#origin",
            "text": "Gets a string describing where the table was loaded from. For tables loaded from disk, this will be the file path.  public   string   Origin  { \n     get ;  }",
            "title": "Origin"
        },
        {
            "location": "/api/#source_4",
            "text": "No Summary  public   override   string   Source  { \n     get ; \n     set ;  }",
            "title": "Source"
        },
        {
            "location": "/api/#stacktrace_3",
            "text": "No Summary  public   override   string   StackTrace  { \n     get ;  }",
            "title": "StackTrace"
        },
        {
            "location": "/api/#targetsite_3",
            "text": "No Summary  public   override   MethodBase   TargetSite  { \n     get ;  }",
            "title": "TargetSite"
        },
        {
            "location": "/api/#methods_37",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#equalsobject_35",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#getbaseexception_3",
            "text": "No Summary  public   override   System . Exception   GetBaseException ()",
            "title": "GetBaseException()"
        },
        {
            "location": "/api/#gethashcode_35",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#getobjectdataserializationinfo-streamingcontext_3",
            "text": "No Summary  public   override   void   GetObjectData ( SerializationInfo   info ,   StreamingContext   context )   Parameters   info :  No Description  context :  No Description",
            "title": "GetObjectData(SerializationInfo, StreamingContext)"
        },
        {
            "location": "/api/#gettype_38",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#gettype_39",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#tostring_35",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#rantutils-class-rant",
            "text": "Namespace:  Rant  Inheritance:  Object \u2192 RantUtils  Contains miscellaneous utility methods that provide information about the Rant engine.  public   static   class   RantUtils",
            "title": "RantUtils class (Rant)"
        },
        {
            "location": "/api/#methods_38",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#equalsobject_36",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#functionexistsstring",
            "text": "Determines whether a function with the specified name is defined in the current engine version.  public   static   bool   FunctionExists ( string   functionName )   Parameters   functionName : The name of the function to search for. Argument is not case-sensitive.",
            "title": "FunctionExists(string)"
        },
        {
            "location": "/api/#getfunctionstring",
            "text": "Returns the function with the specified name. The return value will be null if the function is not found.  public   static   Rant . Metadata . IRantFunctionGroup   GetFunction ( string   functionName )   Parameters   functionName : The name of the function to retrieve.",
            "title": "GetFunction(string)"
        },
        {
            "location": "/api/#getfunctionaliasesstring",
            "text": "Enumerates the aliases assigned to the specified function name.  public   static   System . Collections . Generic . IEnumerable < string >   GetFunctionAliases ( string   functionName )   Parameters   functionName : The function name to retrieve aliases for.",
            "title": "GetFunctionAliases(string)"
        },
        {
            "location": "/api/#getfunctiondescriptionstring-int",
            "text": "Returns the description for the function with the specified name.  public   static   string   GetFunctionDescription ( string   functionName ,   int   argc )   Parameters   functionName : The name of the function to get the description for.  argc : The number of arguments in the overload to get the description for.",
            "title": "GetFunctionDescription(string, int)"
        },
        {
            "location": "/api/#getfunctionnames",
            "text": "Enumerates the names of all available Rant functions.  public   static   System . Collections . Generic . IEnumerable < string >   GetFunctionNames ()",
            "title": "GetFunctionNames()"
        },
        {
            "location": "/api/#getfunctionnamesandaliases",
            "text": "Enumerates all function names and their aliases.  public   static   System . Collections . Generic . IEnumerable < string >   GetFunctionNamesAndAliases ()",
            "title": "GetFunctionNamesAndAliases()"
        },
        {
            "location": "/api/#getfunctions",
            "text": "Enumerates the available functions.  public   static   System . Collections . Generic . IEnumerable < Rant . Metadata . IRantFunctionGroup >   GetFunctions ()",
            "title": "GetFunctions()"
        },
        {
            "location": "/api/#gethashcode_36",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_40",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#tostring_36",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#rng-class-rant",
            "text": "Namespace:  Rant  Inheritance:  Object \u2192 RNG  Represents a non-linear random number generator.  public   class   RNG",
            "title": "RNG class (Rant)"
        },
        {
            "location": "/api/#constructors_19",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/api/#rnglong",
            "text": "Creates a new RNG instance with the specified seed.  public   RNG ( long   seed )   Parameters   seed : The seed for the generator.",
            "title": "RNG(long)"
        },
        {
            "location": "/api/#rnglong-long",
            "text": "Creates a new RNG instance with the specified seed and generation.  public   RNG ( long   seed ,   long   generation )   Parameters   seed : The seed for the generator.  generation : The generation to start at.",
            "title": "RNG(long, long)"
        },
        {
            "location": "/api/#rng",
            "text": "Creates a new RNG instance seeded with the system tick count.  public   RNG ()",
            "title": "RNG()"
        },
        {
            "location": "/api/#properties_25",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#baseseed",
            "text": "The root seed.  public   long   BaseSeed  { \n     get ; \n     set ;  }",
            "title": "BaseSeed"
        },
        {
            "location": "/api/#depth",
            "text": "The current branching depth of the generator.  public   int   Depth  { \n     get ;  }",
            "title": "Depth"
        },
        {
            "location": "/api/#generation",
            "text": "The current generation.  public   long   Generation  { \n     get ; \n     set ;  }",
            "title": "Generation"
        },
        {
            "location": "/api/#seed_1",
            "text": "The seed of the top branch.  public   long   Seed  { \n     get ; \n     set ;  }",
            "title": "Seed"
        },
        {
            "location": "/api/#indexers_7",
            "text": "",
            "title": "Indexers"
        },
        {
            "location": "/api/#thisint-g",
            "text": "Calculates the raw 64-bit value for a given generation.  public   long   this [ int   g ]  { \n     get ;  }",
            "title": "this[int g]"
        },
        {
            "location": "/api/#methods_39",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#branchlong",
            "text": "Creates a new branch based off the current seed and the specified seed.  public   Rant . RNG   Branch ( long   seed )   Parameters   seed : The seed to create the branch with.",
            "title": "Branch(long)"
        },
        {
            "location": "/api/#equalsobject_37",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#gethashcode_37",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#getrawlong-long",
            "text": "Calculates the raw 64-bit value for a given seed/generation pair.  public   static   long   GetRaw ( long   s ,   long   g )   Parameters   s : The seed.  g : The generation.",
            "title": "GetRaw(long, long)"
        },
        {
            "location": "/api/#gettype_41",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#merge",
            "text": "Removes the topmost branch and resumes generation on the next one down.  public   Rant . RNG   Merge ()",
            "title": "Merge()"
        },
        {
            "location": "/api/#next",
            "text": "Calculates a 32-bit, non-negative integer from the next generation and increases the current generation by 1.  public   int   Next ()",
            "title": "Next()"
        },
        {
            "location": "/api/#nextint",
            "text": "Calculates a 32-bit integer between 0 and a specified upper bound for the current generation and increases the current\n            generation by 1.  public   int   Next ( int   max )   Parameters   max : The exclusive maximum value.",
            "title": "Next(int)"
        },
        {
            "location": "/api/#nextint-int",
            "text": "Calculates a 32-bit integer between the specified minimum and maximum values for the current generation, and increases\n            the current generation by 1.  public   int   Next ( int   min ,   int   max )   Parameters   min : The inclusive minimum value.  max : The exclusive maximum value.",
            "title": "Next(int, int)"
        },
        {
            "location": "/api/#nextboolean",
            "text": "Returns a random boolean value and advances the generation by 1.  public   bool   NextBoolean ()",
            "title": "NextBoolean()"
        },
        {
            "location": "/api/#nextdouble",
            "text": "Returns a double-precision floating point number between 0 and 1, and advances the generation by 1.  public   double   NextDouble ()",
            "title": "NextDouble()"
        },
        {
            "location": "/api/#nextdoubledouble",
            "text": "Returns a double-precision floating point number between 0 and the specified maximum value, and advances the generation\n            by 1.  public   double   NextDouble ( double   max )   Parameters   max : (No Description)",
            "title": "NextDouble(double)"
        },
        {
            "location": "/api/#nextdoubledouble-double",
            "text": "Returns a double-precision floating point number between the specified minimum and maximum values, and advances the\n            generation by 1.  public   double   NextDouble ( double   min ,   double   max )   Parameters   min : (No Description)  max : (No Description)",
            "title": "NextDouble(double, double)"
        },
        {
            "location": "/api/#nextraw",
            "text": "Calculates the raw 64-bit value for the next generation, and increases the current generation by 1.  public   long   NextRaw ()",
            "title": "NextRaw()"
        },
        {
            "location": "/api/#peek",
            "text": "Calculates a 32-bit, non-negative integer for the current generation.  public   int   Peek ()",
            "title": "Peek()"
        },
        {
            "location": "/api/#peekint",
            "text": "Calculates a 32-bit integer between 0 and a specified upper bound for the current generation.  public   int   Peek ( int   max )   Parameters   max : The exclusive maximum value.",
            "title": "Peek(int)"
        },
        {
            "location": "/api/#peekint-int",
            "text": "Calculates a 32-bit integer between the specified minimum and maximum values for the current generation.  public   int   Peek ( int   min ,   int   max )   Parameters   min : The inclusive minimum value.  max : The exclusive maximum value.",
            "title": "Peek(int, int)"
        },
        {
            "location": "/api/#peekatlong",
            "text": "Calculates the 32-bitnon-negative integer for the specified generation.  public   int   PeekAt ( long   generation )   Parameters   generation : The generation to peek at.",
            "title": "PeekAt(long)"
        },
        {
            "location": "/api/#peekatlong-int",
            "text": "Calculates a 32-bit integer between 0 and a specified upper bound for the specified generation.  public   int   PeekAt ( long   generation ,   int   max )   Parameters   generation : The generation whose value to calculate.  max : The exclusive maximum value.",
            "title": "PeekAt(long, int)"
        },
        {
            "location": "/api/#peekatint-int-int",
            "text": "Calculates a 32-bit integer between the specified minimum and maximum values for the specified generation.  public   int   PeekAt ( int   generation ,   int   min ,   int   max )   Parameters   generation : The generation whose value to calculate.  min : The inclusive minimum value.  max : The exclusive maximum value.",
            "title": "PeekAt(int, int, int)"
        },
        {
            "location": "/api/#prev",
            "text": "Calculates a 32-bit, non-negative integer from the previous generation and decreases the current generation by 1.  public   int   Prev ()",
            "title": "Prev()"
        },
        {
            "location": "/api/#prevint",
            "text": "Calculates a 32-bit integer between 0 and a specified upper bound from the previous generation and decreases the\n            current generation by 1.  public   int   Prev ( int   max )   Parameters   max : The exclusive maximum value.",
            "title": "Prev(int)"
        },
        {
            "location": "/api/#prevint-int",
            "text": "Calculates a 32-bit integer between the specified minimum and maximum values for the previous generation, and decreases\n            the current generation by 1.  public   int   Prev ( int   min ,   int   max )   Parameters   min : The inclusive minimum value.  max : The exclusive maximum value.",
            "title": "Prev(int, int)"
        },
        {
            "location": "/api/#prevraw",
            "text": "Calculates the raw 64-bit value for the previous generation, and decreases the current generation by 1.  public   long   PrevRaw ()",
            "title": "PrevRaw()"
        },
        {
            "location": "/api/#reset",
            "text": "Sets the current generation to zero.  public   void   Reset ()",
            "title": "Reset()"
        },
        {
            "location": "/api/#resetlong",
            "text": "Sets the seed to the specified value and the current generation to zero.  public   void   Reset ( long   newSeed )   Parameters   newSeed : The new seed to apply to the generator.",
            "title": "Reset(long)"
        },
        {
            "location": "/api/#tostring_37",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/api/#writingsystem-class-rantformats",
            "text": "Namespace:  Rant.Formats  Inheritance:  Object \u2192 WritingSystem  Represents configuration settings for a language's writing system.  public   sealed   class   WritingSystem",
            "title": "WritingSystem class (Rant.Formats)"
        },
        {
            "location": "/api/#constructors_20",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/api/#writingsystemienumerable-string-quotationmarks",
            "text": "Creates a new writing system with the specified configuration.  public   WritingSystem ( IEnumerable < char >   alphabet ,   string   space ,   QuotationMarks   quotations )   Parameters   alphabet : The alphabet to use.  space : The standard space to use.  quotations : The quotation marks to use.",
            "title": "WritingSystem(IEnumerable, string, QuotationMarks)"
        },
        {
            "location": "/api/#writingsystem_1",
            "text": "Creates a new writing system with the default configuration.  public   WritingSystem ()",
            "title": "WritingSystem()"
        },
        {
            "location": "/api/#properties_26",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/api/#quotations",
            "text": "The quotation marks used by the format.  public   QuotationMarks   Quotations  { \n     get ;  }",
            "title": "Quotations"
        },
        {
            "location": "/api/#space",
            "text": "The standard space used by series and phrasals.  public   string   Space  { \n     get ;  }",
            "title": "Space"
        },
        {
            "location": "/api/#methods_40",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#equalsobject_38",
            "text": "No Summary  public   override   bool   Equals ( object   obj )   Parameters   obj :  No Description",
            "title": "Equals(object)"
        },
        {
            "location": "/api/#getalphabet",
            "text": "The alphabet used by the format.  public   System . Collections . Generic . IEnumerable < char >   GetAlphabet ()",
            "title": "GetAlphabet()"
        },
        {
            "location": "/api/#gethashcode_38",
            "text": "No Summary  public   override   int   GetHashCode ()",
            "title": "GetHashCode()"
        },
        {
            "location": "/api/#gettype_42",
            "text": "No Summary  public   override   System . Type   GetType ()",
            "title": "GetType()"
        },
        {
            "location": "/api/#tostring_38",
            "text": "No Summary  public   override   string   ToString ()",
            "title": "ToString()"
        },
        {
            "location": "/language/functions-overview/",
            "text": "Functions\n are instructions that allow the Rant language to interact with the underlying engine and framework,\ncontrolling all aspects of generation from configuration of automatic formatting to block attributes to channel creation.\nThese provide the vast majority of useful functionality to Rant.\n\n\nIf you are already familiar with the syntax, skip over to the \nfunction reference\n for a full list of available functions.\n\n\nFunction calls\n[link]\n\n\nFunctions are called upon by using a pair of square brackets with the function name inside.\nSome functions require arguments, which are placed after the name in a specific way.\n\n\nIf a function requires arguments, they are separated from the function name by a colon. Individual arguments are then separated from one another by semicolons.\n\n\n# No arguments\n[repeach]\n\n# One argument\n[rep: 10]\n\n# Two arguments\n[rs: 10; ,\\s]\n\n# Three arguments. Notice how you can also use functions inside of args!\n[chan: shush; private; s[r:[n:2;10]]{h}...]\n\n# Etc etc etc\n\n\n\n\n\nArgument types\n[link]\n\n\nFunctions that take arguments can handle arguments in two different ways:\n\n\nGreedy arguments\n[link]\n\n\nAn argument can be immediately interpreted to a string before the function is called. This is called a \ngreedy\n argument.\n\n\n\n\nNote\n\n\nAn example of a greedy argument is the repetition count on the \n[rep]\n function.\nSince it is only needed once, it's interpreted immediately.\n\n\n\n\nLazy arguments\n[link]\n\n\nAn argument can also be stored as code and is only run when accessed by the engine. This is called a \nlazy\n argument.\nLazy arguments may be run more than once, depending on the function.\n\n\n\n\nNote\n\n\nAn example of a lazy argument is the separator pattern on the \n[sep]\n function.  \n\nSince the separator may be dynamic, it is allowed to run multiple times.",
            "title": "Functions Overview"
        },
        {
            "location": "/language/functions-overview/#function-calls",
            "text": "Functions are called upon by using a pair of square brackets with the function name inside.\nSome functions require arguments, which are placed after the name in a specific way.  If a function requires arguments, they are separated from the function name by a colon. Individual arguments are then separated from one another by semicolons.  # No arguments\n[repeach]\n\n# One argument\n[rep: 10]\n\n# Two arguments\n[rs: 10; ,\\s]\n\n# Three arguments. Notice how you can also use functions inside of args!\n[chan: shush; private; s[r:[n:2;10]]{h}...]\n\n# Etc etc etc",
            "title": "Function calls"
        },
        {
            "location": "/language/functions-overview/#argument-types",
            "text": "Functions that take arguments can handle arguments in two different ways:",
            "title": "Argument types"
        },
        {
            "location": "/language/functions-overview/#greedy-arguments",
            "text": "An argument can be immediately interpreted to a string before the function is called. This is called a  greedy  argument.   Note  An example of a greedy argument is the repetition count on the  [rep]  function.\nSince it is only needed once, it's interpreted immediately.",
            "title": "Greedy arguments"
        },
        {
            "location": "/language/functions-overview/#lazy-arguments",
            "text": "An argument can also be stored as code and is only run when accessed by the engine. This is called a  lazy  argument.\nLazy arguments may be run more than once, depending on the function.   Note  An example of a lazy argument is the separator pattern on the  [sep]  function.   \nSince the separator may be dynamic, it is allowed to run multiple times.",
            "title": "Lazy arguments"
        },
        {
            "location": "/language/functions/",
            "text": "Function reference\n[link]\n\n\nabbr\n[link]\n\n\nOverloads:\n 1\n\n\n[abbr: value]\n[link]\n\n\nAbbreviates the specified string.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nThe string to abbreviate.\n\n\n\n\n\n\n\n\n\n\naccent\n[link]\n\n\nOverloads:\n 2\n\n\n[accent: accent]\n[link]\n\n\nAccents the previous character.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naccent\n\n\nMode\n\n\nacute\ngrave\ncircumflex\ntilde\nring\ndiaeresis\ncaron\nmacron\n\n\n\n\n\n\n\n\n\n\n[accent: character; accent]\n[link]\n\n\nAccents the specified character.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncharacter\n\n\nString\n\n\nNo description\n\n\n\n\n\n\naccent\n\n\nMode\n\n\nacute\ngrave\ncircumflex\ntilde\nring\ndiaeresis\ncaron\nmacron\n\n\n\n\n\n\n\n\n\n\nacute\n[link]\n\n\nAliases:\n \nact\nOverloads:\n 1\n\n\n[acute: character]\n[link]\n\n\nAccents the specified character with an acute (a\u0301) accent.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncharacter\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nadd\n[link]\n\n\nOverloads:\n 1\n\n\n[add: a; b]\n[link]\n\n\nPrints the num of the specified values.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nNumber\n\n\nThe first operand.\n\n\n\n\n\n\nb\n\n\nNumber\n\n\nThe second operand.\n\n\n\n\n\n\n\n\n\n\nafter\n[link]\n\n\nOverloads:\n 1\n\n\n[after: after-action]\n[link]\n\n\nSets the postfix pattern for the next block.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nafter-action\n\n\nPattern\n\n\nThe pattern to run after each iteration of the next block.\n\n\n\n\n\n\n\n\n\n\nand\n[link]\n\n\nOverloads:\n 1\n\n\n[and: a; b...]\n[link]\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nBoolean\n\n\nNo description\n\n\n\n\n\n\nb...\n\n\nBoolean\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\narg\n[link]\n\n\nOverloads:\n 1\n\n\n[arg: name]\n[link]\n\n\nReturns the specified argument from the current subroutine.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe name of the argument to retrieve.\n\n\n\n\n\n\n\n\n\n\nat\n[link]\n\n\nOverloads:\n 1\n\n\n[at: input; pos]\n[link]\n\n\nPrints the character at the specified position in the input. Throws an exception if the position is outside of the string.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninput\n\n\nString\n\n\nThe input string.\n\n\n\n\n\n\npos\n\n\nNumber\n\n\nThe position of the character to find.\n\n\n\n\n\n\n\n\n\n\nb\n[link]\n\n\nOverloads:\n 1\n\n\n[b]\n[link]\n\n\nPrints a bullet character.\n\n\n\n\nbefore\n[link]\n\n\nOverloads:\n 1\n\n\n[before: before-action]\n[link]\n\n\nSets the prefix pattern for the next block.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbefore-action\n\n\nPattern\n\n\nThe pattern to run before each iteration of the next block.\n\n\n\n\n\n\n\n\n\n\nbranch\n[link]\n\n\nOverloads:\n 2\n\n\n[branch: seed]\n[link]\n\n\nBranches the internal RNG according to a seed.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nseed\n\n\nString\n\n\nThe seed for the branch.\n\n\n\n\n\n\n\n\n\n\n[branch: seed; branch-action]\n[link]\n\n\nBranches the internal RNG, executes the specified pattern, and then merges the branch.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nseed\n\n\nString\n\n\nThe seed for the branch.\n\n\n\n\n\n\nbranch-action\n\n\nPattern\n\n\nThe pattern to run on the branch.\n\n\n\n\n\n\n\n\n\n\nc\n[link]\n\n\nOverloads:\n 1\n\n\n[c]\n[link]\n\n\nPrints the copyright symbol.\n\n\n\n\ncapsinfer\n[link]\n\n\nOverloads:\n 1\n\n\n[capsinfer: sample]\n[link]\n\n\nInfers the capitalization of a given string and sets the capitalization mode to match it.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsample\n\n\nString\n\n\nA string that is capitalized in the format to be set.\n\n\n\n\n\n\n\n\n\n\ncaron\n[link]\n\n\nAliases:\n \ncrn\nOverloads:\n 1\n\n\n[caron: character]\n[link]\n\n\nAccents the specified character with a caron (c\u030c) accent.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncharacter\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\ncase\n[link]\n\n\nAliases:\n \ncaps\nOverloads:\n 1\n\n\n[case: mode]\n[link]\n\n\nChanges the capitalization mode for all open channels.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmode\n\n\nMode\n\n\nThe capitalization mode to use.\nnone\nNo capitalization.\nlower\nConvert to lowercase.\nupper\nConvert to uppercase.\ntitle\nConvert to title case.\nfirst\nCapitalize the first letter.\nsentence\nCapitalize the first letter of every sentence.\nword\nCapitalize the first letter of every word.\n\n\n\n\n\n\n\n\n\n\ncedilla\n[link]\n\n\nAliases:\n \nced\nOverloads:\n 1\n\n\n[cedilla: character]\n[link]\n\n\nAccents the specified character with a cedilla (c\u0327) accent.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncharacter\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nchan\n[link]\n\n\nOverloads:\n 1\n\n\n[chan: channel-name; visibility; pattern]\n[link]\n\n\nOpens a channel for writing and executes the specified pattern inside of it.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nchannel-name\n\n\nString\n\n\nNo description\n\n\n\n\n\n\nvisibility\n\n\nMode\n\n\npublic\nChannel outputs to itself and 'main'.\nprivate\nChannel outputs only to itself.\ninternal\nChannel outputs only to itself and all immediate parent channels also set to Internal.\n\n\n\n\n\n\npattern\n\n\nPattern\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nchance\n[link]\n\n\nOverloads:\n 1\n\n\n[chance: chance]\n[link]\n\n\nModifies the likelihood that the next block will execute. Specified in percentage.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nchance\n\n\nNumber\n\n\nThe percent probability that the next block will execute.\n\n\n\n\n\n\n\n\n\n\nchar\n[link]\n\n\nOverloads:\n 1\n\n\n[char: name]\n[link]\n\n\nPrints a Unicode character given its official Unicode-designated name (e.g. 'LATIN CAPITAL LETTER R' -> 'R').\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe name of the character to print (case-insensitive).\n\n\n\n\n\n\n\n\n\n\nchlen\n[link]\n\n\nOverloads:\n 1\n\n\n[chlen: channel-name]\n[link]\n\n\nPrints the current length of the specified channel, in characters.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nchannel-name\n\n\nString\n\n\nThe channel for which to retrieve the length.\n\n\n\n\n\n\n\n\n\n\ncircumflex\n[link]\n\n\nAliases:\n \ncflex\nOverloads:\n 1\n\n\n[circumflex: character]\n[link]\n\n\nAccents the specified character with a circumflex (a\u0302) accent.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncharacter\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nclrt\n[link]\n\n\nOverloads:\n 1\n\n\n[clrt: target-name]\n[link]\n\n\nClears the contents of the specified target.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntarget-name\n\n\nString\n\n\nThe name of the target to be cleared.\n\n\n\n\n\n\n\n\n\n\ndefine\n[link]\n\n\nOverloads:\n 1\n\n\n[define: flags...]\n[link]\n\n\nDefines the specified flags.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nflags...\n\n\nString\n\n\nThe list of flags to define.\n\n\n\n\n\n\n\n\n\n\ndepth\n[link]\n\n\nOverloads:\n 1\n\n\n[depth]\n[link]\n\n\nPrints the number of currently active blocks.\n\n\n\n\ndiaeresis\n[link]\n\n\nAliases:\n \ndia\nOverloads:\n 1\n\n\n[diaeresis: character]\n[link]\n\n\nAccents the specified character with a diaeresis (a\u0308) accent.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncharacter\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\ndigits\n[link]\n\n\nOverloads:\n 1\n\n\n[digits: format; digits]\n[link]\n\n\nSpecifies the current digit formatting mode for numbers.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nformat\n\n\nMode\n\n\nThe digit format to use.\nnormal\nUse as many digits as necessary to accomodate the number.\npad\nPad numbers to a specific number of digits.\ntruncate\nTruncate numbers over a specific number of digits.\n\n\n\n\n\n\ndigits\n\n\nNumber\n\n\nThe digit count to associate with the mode.\n\n\n\n\n\n\n\n\n\n\ndiv\n[link]\n\n\nOverloads:\n 1\n\n\n[div: a; b]\n[link]\n\n\nPrints the quotient of the two specified numbers.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nNumber\n\n\nThe dividend.\n\n\n\n\n\n\nb\n\n\nNumber\n\n\nThe divisor.\n\n\n\n\n\n\n\n\n\n\nelse\n[link]\n\n\nOverloads:\n 1\n\n\n[else: condition-fail-pattern]\n[link]\n\n\nExecutes a pattern if the current flag condition fails.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncondition-fail-pattern\n\n\nPattern\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nem\n[link]\n\n\nOverloads:\n 1\n\n\n[em]\n[link]\n\n\nPrints an emdash.\n\n\n\n\nemoji\n[link]\n\n\nOverloads:\n 1\n\n\n[emoji: shortcode]\n[link]\n\n\nTakes an emoji shortcode and prints the corresponding emoji.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nshortcode\n\n\nString\n\n\nThe emoji shortcode to use, without colons.\n\n\n\n\n\n\n\n\n\n\nen\n[link]\n\n\nOverloads:\n 1\n\n\n[en]\n[link]\n\n\nPrints an endash.\n\n\n\n\nend\n[link]\n\n\nOverloads:\n 1\n\n\n[end: end-pattern]\n[link]\n\n\nSets a pattern that will run after the next block.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nend-pattern\n\n\nPattern\n\n\nThe pattern to run after the next block.\n\n\n\n\n\n\n\n\n\n\nendian\n[link]\n\n\nOverloads:\n 1\n\n\n[endian: endianness]\n[link]\n\n\nSets the current endianness for hex and binary formatted numbers.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nendianness\n\n\nMode\n\n\nThe endianness to use.\nbig\nBig endian.\nlittle\nLittle endian.\ndefault\nWhatever endianness your system uses.\n\n\n\n\n\n\n\n\n\n\nends\n[link]\n\n\nOverloads:\n 1\n\n\n[ends: action]\n[link]\n\n\nRuns a pattern if the current block iteration is either the first or last.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naction\n\n\nPattern\n\n\nThe pattern to run when the condition is met.\n\n\n\n\n\n\n\n\n\n\neq\n[link]\n\n\nOverloads:\n 1\n\n\n[eq: a; b]\n[link]\n\n\nPrints a boolean value indicating whether the two values have equal string representations.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nString\n\n\nNo description\n\n\n\n\n\n\nb\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\neqi\n[link]\n\n\nOverloads:\n 1\n\n\n[eqi: a; b]\n[link]\n\n\nPrints a boolean value indicating whether the two values have equal string representations, ignoring case.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nString\n\n\nNo description\n\n\n\n\n\n\nb\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\neven\n[link]\n\n\nOverloads:\n 1\n\n\n[even: action]\n[link]\n\n\nRuns a pattern if the current block iteration is an even number.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naction\n\n\nPattern\n\n\nThe pattern to run when the condition is met.\n\n\n\n\n\n\n\n\n\n\nfirst\n[link]\n\n\nOverloads:\n 1\n\n\n[first: action]\n[link]\n\n\nRuns a pattern if the current block iteration is the first.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naction\n\n\nPattern\n\n\nThe pattern to run when the condition is met.\n\n\n\n\n\n\n\n\n\n\nge\n[link]\n\n\nOverloads:\n 1\n\n\n[ge: a; b]\n[link]\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nNumber\n\n\nNo description\n\n\n\n\n\n\nb\n\n\nNumber\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\ngrave\n[link]\n\n\nAliases:\n \ngrv\nOverloads:\n 1\n\n\n[grave: character]\n[link]\n\n\nAccents the specified character with a grave (a\u0300) accent.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncharacter\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\ngroup\n[link]\n\n\nOverloads:\n 1\n\n\n[group: group-name]\n[link]\n\n\nRetrieves and prints the specified group value of the current match from the active replacer.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroup-name\n\n\nString\n\n\nThe name of the match group whose value will be retrieved.\n\n\n\n\n\n\n\n\n\n\ngt\n[link]\n\n\nOverloads:\n 1\n\n\n[gt: a; b]\n[link]\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nNumber\n\n\nNo description\n\n\n\n\n\n\nb\n\n\nNumber\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nif\n[link]\n\n\nOverloads:\n 2\n\n\n[if: condition; body]\n[link]\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncondition\n\n\nBoolean\n\n\nNo description\n\n\n\n\n\n\nbody\n\n\nPattern\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\n[if: condition; body; else-body]\n[link]\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncondition\n\n\nBoolean\n\n\nNo description\n\n\n\n\n\n\nbody\n\n\nPattern\n\n\nNo description\n\n\n\n\n\n\nelse-body\n\n\nPattern\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nifdef\n[link]\n\n\nOverloads:\n 1\n\n\n[ifdef: flags...]\n[link]\n\n\nSets the current flag condition for [then] ... [else] calls to be true if all the specified flags are set.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nflags...\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nifndef\n[link]\n\n\nOverloads:\n 1\n\n\n[ifndef: flags...]\n[link]\n\n\nSets the current flag condition for [then] ... [else] calls to be true if all the specified flags are unset.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nflags...\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nifnot\n[link]\n\n\nAliases:\n \nifn\nOverloads:\n 2\n\n\n[ifnot: condition; body]\n[link]\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncondition\n\n\nBoolean\n\n\nNo description\n\n\n\n\n\n\nbody\n\n\nPattern\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\n[ifnot: condition; body; else-body]\n[link]\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncondition\n\n\nBoolean\n\n\nNo description\n\n\n\n\n\n\nbody\n\n\nPattern\n\n\nNo description\n\n\n\n\n\n\nelse-body\n\n\nPattern\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nin\n[link]\n\n\nOverloads:\n 1\n\n\n[in: arg-name]\n[link]\n\n\nPrints the value of the specified pattern argument.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg-name\n\n\nString\n\n\nThe name of the argument to access.\n\n\n\n\n\n\n\n\n\n\nindex\n[link]\n\n\nAliases:\n \ni\nOverloads:\n 1\n\n\n[index]\n[link]\n\n\nPrints the zero-based index of the block item currently being executed.\n\n\n\n\nindex1\n[link]\n\n\nAliases:\n \ni1\nOverloads:\n 1\n\n\n[index1]\n[link]\n\n\nPrints the one-based index of the block item currently being executed.\n\n\n\n\ninit\n[link]\n\n\nOverloads:\n 1\n\n\n[init: index]\n[link]\n\n\nSets the index of the element to execute on the next block. Set to -1 to disable.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nindex\n\n\nNumber\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nitem\n[link]\n\n\nOverloads:\n 2\n\n\n[item]\n[link]\n\n\nPrints the main output from the current block iteration.\n\n\n\n\n[item: channel]\n[link]\n\n\nPrints the specified channel from the current block iteration.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nchannel\n\n\nString\n\n\nThe output channel to print from.\n\n\n\n\n\n\n\n\n\n\njoin\n[link]\n\n\nOverloads:\n 2\n\n\n[join: list-obj]\n[link]\n\n\nJoins the specified list into a string.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nThe list to join.\n\n\n\n\n\n\n\n\n\n\n[join: list-obj; delimiter]\n[link]\n\n\nJoins the specified list into a string seperated by the delimiter and returns it.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nThe list to join.\n\n\n\n\n\n\ndelimiter\n\n\nString\n\n\nThe delimiter.\n\n\n\n\n\n\n\n\n\n\nladd\n[link]\n\n\nAliases:\n \nladds\nOverloads:\n 1\n\n\n[ladd: list-obj; values...]\n[link]\n\n\nAdds one or more strings to a list.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nThe list to add to.\n\n\n\n\n\n\nvalues...\n\n\nString\n\n\nThe strings to add.\n\n\n\n\n\n\n\n\n\n\nladdn\n[link]\n\n\nOverloads:\n 1\n\n\n[laddn: list-obj; values...]\n[link]\n\n\nAdds one or more numbers to a list.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nThe list to add to.\n\n\n\n\n\n\nvalues...\n\n\nNumber\n\n\nThe numbers to add.\n\n\n\n\n\n\n\n\n\n\nladdp\n[link]\n\n\nOverloads:\n 1\n\n\n[laddp: list-obj; values...]\n[link]\n\n\nAdds one or more patterns to a list.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nThe list to add to.\n\n\n\n\n\n\nvalues...\n\n\nPattern\n\n\nThe patterns to add.\n\n\n\n\n\n\n\n\n\n\nladdv\n[link]\n\n\nOverloads:\n 1\n\n\n[laddv: list-obj; values...]\n[link]\n\n\nAdds one or more variables to a list.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nThe list to add to.\n\n\n\n\n\n\nvalues...\n\n\nRantObject\n\n\nThe variables to add.\n\n\n\n\n\n\n\n\n\n\nlast\n[link]\n\n\nOverloads:\n 1\n\n\n[last: action]\n[link]\n\n\nRuns a pattern if the current block iteration is the last.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naction\n\n\nPattern\n\n\nThe pattern to run when the condition is met.\n\n\n\n\n\n\n\n\n\n\nlclone\n[link]\n\n\nOverloads:\n 1\n\n\n[lclone: list-obj; variable]\n[link]\n\n\nClones a list to another variable.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\nvariable\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nlclr\n[link]\n\n\nOverloads:\n 1\n\n\n[lclr: list-obj]\n[link]\n\n\nClears the specified list.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nlcpy\n[link]\n\n\nOverloads:\n 1\n\n\n[lcpy: list-obj; index; variable]\n[link]\n\n\nCopies an item from a list into a variable.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\nindex\n\n\nNumber\n\n\nNo description\n\n\n\n\n\n\nvariable\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nle\n[link]\n\n\nOverloads:\n 1\n\n\n[le: a; b]\n[link]\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nNumber\n\n\nNo description\n\n\n\n\n\n\nb\n\n\nNumber\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nlen\n[link]\n\n\nOverloads:\n 1\n\n\n[len: str]\n[link]\n\n\nGets the length of the specified string.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstr\n\n\nString\n\n\nThe string to measure.\n\n\n\n\n\n\n\n\n\n\nlfilter\n[link]\n\n\nOverloads:\n 2\n\n\n[lfilter: list-name; varname; condition]\n[link]\n\n\nFilters out elements of a list when the condition returns false. Mutates list.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-name\n\n\nString\n\n\nThe name of the list object to filter.\n\n\n\n\n\n\nvarname\n\n\nString\n\n\nThe name of the variable that will contain the current item within the condition.\n\n\n\n\n\n\ncondition\n\n\nPattern\n\n\nThe condition that will be checked for each item.\n\n\n\n\n\n\n\n\n\n\n[lfilter: list-name; output-list-name; varname; condition]\n[link]\n\n\nFilters out elements of a list when the condition returns false. Creates new list with results.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-name\n\n\nString\n\n\nThe name of the list object to filter.\n\n\n\n\n\n\noutput-list-name\n\n\nString\n\n\nThe name of the list that will contain the filtered result.\n\n\n\n\n\n\nvarname\n\n\nString\n\n\nThe name of the variable that will contain the current item within the condition.\n\n\n\n\n\n\ncondition\n\n\nPattern\n\n\nThe condition that will be checked for each item.\n\n\n\n\n\n\n\n\n\n\nlfind\n[link]\n\n\nOverloads:\n 1\n\n\n[lfind: list-obj; value]\n[link]\n\n\nSearches a list for the specified value and prints the index if found. Otherwise, prints -1.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nlfindi\n[link]\n\n\nOverloads:\n 1\n\n\n[lfindi: list-obj; value]\n[link]\n\n\nSearches a list for the specified value, ignoring case, and prints the index if found. Otherwise, prints -1.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nlfindv\n[link]\n\n\nOverloads:\n 1\n\n\n[lfindv: list-obj; value]\n[link]\n\n\nSearches a list for the specified variable and prints the index if found. Otherwise, prints -1.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\nvalue\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nlget\n[link]\n\n\nOverloads:\n 1\n\n\n[lget: list-obj; index]\n[link]\n\n\nPrints a list item from the specified index.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\nindex\n\n\nNumber\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nlins\n[link]\n\n\nOverloads:\n 1\n\n\n[lins: list-obj; index; value]\n[link]\n\n\nInserts a string at the specified index in a list.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\nindex\n\n\nNumber\n\n\nNo description\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nlinsn\n[link]\n\n\nOverloads:\n 1\n\n\n[linsn: list-obj; index; value]\n[link]\n\n\nInserts a number at the specified index in a list.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\nindex\n\n\nNumber\n\n\nNo description\n\n\n\n\n\n\nvalue\n\n\nNumber\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nlinsp\n[link]\n\n\nOverloads:\n 1\n\n\n[linsp: list-obj; index; value]\n[link]\n\n\nInserts a pattern at the specified index in a list.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\nindex\n\n\nNumber\n\n\nNo description\n\n\n\n\n\n\nvalue\n\n\nPattern\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nlinsv\n[link]\n\n\nOverloads:\n 1\n\n\n[linsv: list-obj; index; value]\n[link]\n\n\nInserts a variable at the specified index in a list.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\nindex\n\n\nNumber\n\n\nNo description\n\n\n\n\n\n\nvalue\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nlmap\n[link]\n\n\nOverloads:\n 2\n\n\n[lmap: list-name; varname; body]\n[link]\n\n\nReplaces each item in the input list with its value when run through body.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-name\n\n\nString\n\n\nThe name of the list object to map.\n\n\n\n\n\n\nvarname\n\n\nString\n\n\nThe name of the variable that will contain the current item within the body.\n\n\n\n\n\n\nbody\n\n\nPattern\n\n\nThe body that will be run for each item.\n\n\n\n\n\n\n\n\n\n\n[lmap: list-name; output-list-name; varname; body]\n[link]\n\n\nRuns each item in the input list through the body and adds results to output list.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-name\n\n\nString\n\n\nThe name of the list object to map.\n\n\n\n\n\n\noutput-list-name\n\n\nString\n\n\nThe name of the list that will contain the mapped result.\n\n\n\n\n\n\nvarname\n\n\nString\n\n\nThe name of the variable that will contain the current item within the body.\n\n\n\n\n\n\nbody\n\n\nPattern\n\n\nThe body that will be run for each item.\n\n\n\n\n\n\n\n\n\n\nlpop\n[link]\n\n\nOverloads:\n 1\n\n\n[lpop: list-obj]\n[link]\n\n\nRemoves the last item from a list.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nlpopf\n[link]\n\n\nOverloads:\n 1\n\n\n[lpopf: list-obj]\n[link]\n\n\nRemoves the first item from a list.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nlpre\n[link]\n\n\nAliases:\n \nlpres\nOverloads:\n 1\n\n\n[lpre: list-obj; value]\n[link]\n\n\nPrepends a string to a list.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nlpren\n[link]\n\n\nOverloads:\n 1\n\n\n[lpren: list-obj; value]\n[link]\n\n\nPrepends a number to a list.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\nvalue\n\n\nNumber\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nlprep\n[link]\n\n\nOverloads:\n 1\n\n\n[lprep: list-obj; value]\n[link]\n\n\nPrepends a pattern to a list.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\nvalue\n\n\nPattern\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nlrand\n[link]\n\n\nOverloads:\n 1\n\n\n[lrand: obj]\n[link]\n\n\nReturns a random value from the specified list.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nobj\n\n\nRantObject\n\n\nThe list to pick from.\n\n\n\n\n\n\n\n\n\n\nlset\n[link]\n\n\nOverloads:\n 1\n\n\n[lset: list-obj; index; value]\n[link]\n\n\nSets the item at a specified index in a list.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\nindex\n\n\nNumber\n\n\nNo description\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nlsetn\n[link]\n\n\nOverloads:\n 1\n\n\n[lsetn: list-obj; index; value]\n[link]\n\n\nSets the item at a specified index in a list to a number.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\nindex\n\n\nNumber\n\n\nNo description\n\n\n\n\n\n\nvalue\n\n\nNumber\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nlsetp\n[link]\n\n\nOverloads:\n 1\n\n\n[lsetp: list-obj; index; value]\n[link]\n\n\nSets the item at a specified index in a list to a pattern.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\nindex\n\n\nNumber\n\n\nNo description\n\n\n\n\n\n\nvalue\n\n\nPattern\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nlsetv\n[link]\n\n\nOverloads:\n 1\n\n\n[lsetv: list-obj; index; value]\n[link]\n\n\nSets the item at a specified index in a list to a variable.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-obj\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\nindex\n\n\nNumber\n\n\nNo description\n\n\n\n\n\n\nvalue\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nlt\n[link]\n\n\nOverloads:\n 1\n\n\n[lt: a; b]\n[link]\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nNumber\n\n\nNo description\n\n\n\n\n\n\nb\n\n\nNumber\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nmacron\n[link]\n\n\nAliases:\n \nmcn\nOverloads:\n 1\n\n\n[macron: character]\n[link]\n\n\nAccents the specified character with a macron (c\u0304) accent.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncharacter\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nmatch\n[link]\n\n\nOverloads:\n 1\n\n\n[match]\n[link]\n\n\nRetrieves and prints the current match string of the active replacer.\n\n\n\n\nmaybe\n[link]\n\n\nOverloads:\n 1\n\n\n[maybe]\n[link]\n\n\n\n\nmerge\n[link]\n\n\nOverloads:\n 1\n\n\n[merge]\n[link]\n\n\nMerges the topmost branch of the internal RNG, if it has been branched at least once.\n\n\n\n\nmiddle\n[link]\n\n\nOverloads:\n 1\n\n\n[middle: action]\n[link]\n\n\nRuns a pattern if the current block iteration is neither the first nor last.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naction\n\n\nPattern\n\n\nThe pattern to run when the condition is met.\n\n\n\n\n\n\n\n\n\n\nmod\n[link]\n\n\nOverloads:\n 1\n\n\n[mod: a; b]\n[link]\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nNumber\n\n\nNo description\n\n\n\n\n\n\nb\n\n\nNumber\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nmul\n[link]\n\n\nOverloads:\n 1\n\n\n[mul: a; b]\n[link]\n\n\nPrints the product of the specified numbers.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nNumber\n\n\nThe first operand.\n\n\n\n\n\n\nb\n\n\nNumber\n\n\nThe second operand.\n\n\n\n\n\n\n\n\n\n\nnand\n[link]\n\n\nOverloads:\n 1\n\n\n[nand: a; b...]\n[link]\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nBoolean\n\n\nNo description\n\n\n\n\n\n\nb...\n\n\nBoolean\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nne\n[link]\n\n\nOverloads:\n 1\n\n\n[ne: a; b]\n[link]\n\n\nPrints a boolean value indicating whether the two values do not have equal string representations.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nString\n\n\nNo description\n\n\n\n\n\n\nb\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nnei\n[link]\n\n\nOverloads:\n 1\n\n\n[nei: a; b]\n[link]\n\n\nPrints a boolean value indicating whether two values do not have equal string representations, ignoring case.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nString\n\n\nNo description\n\n\n\n\n\n\nb\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nnot\n[link]\n\n\nOverloads:\n 1\n\n\n[not: a]\n[link]\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nBoolean\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nnotfirst\n[link]\n\n\nOverloads:\n 1\n\n\n[notfirst: action]\n[link]\n\n\nRuns a pattern if the current block iteration is not the first.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naction\n\n\nPattern\n\n\nThe pattern to run when the condition is met.\n\n\n\n\n\n\n\n\n\n\nnotlast\n[link]\n\n\nOverloads:\n 1\n\n\n[notlast: action]\n[link]\n\n\nRuns a pattern if the current block iteration is not the last.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naction\n\n\nPattern\n\n\nThe pattern to run when the condition is met.\n\n\n\n\n\n\n\n\n\n\nnotnth\n[link]\n\n\nOverloads:\n 1\n\n\n[notnth: interval; pattern]\n[link]\n\n\nRuns a pattern if the current block iteration is not a multiple of the specified number.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninterval\n\n\nNumber\n\n\nThe interval at which the pattern should not be run.\n\n\n\n\n\n\npattern\n\n\nPattern\n\n\nThe pattern to run when the condition is satisfied.\n\n\n\n\n\n\n\n\n\n\nnotntho\n[link]\n\n\nOverloads:\n 1\n\n\n[notntho: interval; offset; pattern]\n[link]\n\n\nRuns a pattern if the current block iteration is not a multiple of the specified number offset by a specific amount.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninterval\n\n\nNumber\n\n\nThe interval at which the pattern should not be run.\n\n\n\n\n\n\noffset\n\n\nNumber\n\n\nThe number of iterations to offset the interval by.\n\n\n\n\n\n\npattern\n\n\nPattern\n\n\nThe pattern to run when the condition is satisfied.\n\n\n\n\n\n\n\n\n\n\nnth\n[link]\n\n\nOverloads:\n 1\n\n\n[nth: interval; pattern]\n[link]\n\n\nRuns a pattern if the current block iteration is a multiple of the specified number.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninterval\n\n\nNumber\n\n\nThe interval at which the pattern should be run.\n\n\n\n\n\n\npattern\n\n\nPattern\n\n\nThe pattern to run when the condition is satisfied.\n\n\n\n\n\n\n\n\n\n\nntho\n[link]\n\n\nOverloads:\n 1\n\n\n[ntho: interval; offset; pattern]\n[link]\n\n\nRuns a pattern if the current block iteration is a multiple of the specified number offset by a specific amount.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninterval\n\n\nNumber\n\n\nThe interval at which the pattern should be run.\n\n\n\n\n\n\noffset\n\n\nNumber\n\n\nThe number of iterations to offset the interval by.\n\n\n\n\n\n\npattern\n\n\nPattern\n\n\nThe pattern to run when the condition is satisfied.\n\n\n\n\n\n\n\n\n\n\nnum\n[link]\n\n\nAliases:\n \nn\nOverloads:\n 2\n\n\n[num: input]\n[link]\n\n\nFormats an input string using the current number format settings and prints the result.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninput\n\n\nString\n\n\nThe string to convert into a number.\n\n\n\n\n\n\n\n\n\n\n[num: min; max]\n[link]\n\n\nPrints a random number between the specified minimum and maximum bounds.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmin\n\n\nNumber\n\n\nThe minimum value of the number to generate.\n\n\n\n\n\n\nmax\n\n\nNumber\n\n\nThe maximum value of the number to generate.\n\n\n\n\n\n\n\n\n\n\nnumfmt\n[link]\n\n\nOverloads:\n 2\n\n\n[numfmt: format]\n[link]\n\n\nSets the current number formatting mode.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nformat\n\n\nMode\n\n\nThe number format to use.\nnormal\nNo special formatting.\ngroup\nGroup digits with the system's digit separator.\ngroup-commas\nGroup digits by commas.\ngroup-dots\nGroup digits by dots.\nroman\nUppercase Roman numerals.\nroman-upper\nUppercase Roman numerals.\nroman-lower\nLowercase Roman numerals.\nverbal\nNumber verbalization. Only works with integers.\nhex\nUppercase hexadecimal.\nhex-upper\nUppercase hexadecimal.\nhex-lower\nLowercase hexadecimal.\nbinary\nRobot language.\n\n\n\n\n\n\n\n\n\n\n[numfmt: format; range-action]\n[link]\n\n\nRuns the specified pattern under a specific number formatting mode.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nformat\n\n\nMode\n\n\nThe number format to use.\nnormal\nNo special formatting.\ngroup\nGroup digits with the system's digit separator.\ngroup-commas\nGroup digits by commas.\ngroup-dots\nGroup digits by dots.\nroman\nUppercase Roman numerals.\nroman-upper\nUppercase Roman numerals.\nroman-lower\nLowercase Roman numerals.\nverbal\nNumber verbalization. Only works with integers.\nhex\nUppercase hexadecimal.\nhex-upper\nUppercase hexadecimal.\nhex-lower\nLowercase hexadecimal.\nbinary\nRobot language.\n\n\n\n\n\n\nrange-action\n\n\nPattern\n\n\nThe pattern to run.\n\n\n\n\n\n\n\n\n\n\nodd\n[link]\n\n\nOverloads:\n 1\n\n\n[odd: action]\n[link]\n\n\nRuns a pattern if the current block iteration is an odd number.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naction\n\n\nPattern\n\n\nThe pattern to run when the condition is met.\n\n\n\n\n\n\n\n\n\n\nor\n[link]\n\n\nOverloads:\n 1\n\n\n[or: a; b...]\n[link]\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nBoolean\n\n\nNo description\n\n\n\n\n\n\nb...\n\n\nBoolean\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\npipe\n[link]\n\n\nOverloads:\n 1\n\n\n[pipe: redirect-callback]\n[link]\n\n\nRedirects the output from the next block into the specified callback. Access block output with [item].\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nredirect-callback\n\n\nPattern\n\n\nThe callback to redirect block output to.\n\n\n\n\n\n\n\n\n\n\nplural\n[link]\n\n\nAliases:\n \npl\nOverloads:\n 1\n\n\n[plural: word]\n[link]\n\n\nInfers and prints the plural form of the specified word.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nword\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nprotect\n[link]\n\n\nOverloads:\n 1\n\n\n[protect: pattern]\n[link]\n\n\nSpawns a new block attribute context for the specified callback so any blocks therein will not consume the current attributes.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npattern\n\n\nPattern\n\n\nThe callback to protect.\n\n\n\n\n\n\n\n\n\n\nqcc\n[link]\n\n\nOverloads:\n 1\n\n\n[qcc: id; component-id; component-type]\n[link]\n\n\nAdds a carrier component to a constructed query.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nString\n\n\nThe ID string for the constructed query.\n\n\n\n\n\n\ncomponent-id\n\n\nString\n\n\nThe ID to assign to the carrier component.\n\n\n\n\n\n\ncomponent-type\n\n\nMode\n\n\nThe component type.\nmatch\ndissociative\nmatch-dissociative\nassociative\nmatch-associative\ndivergent\nmatch-divergent\nrelational\nmatch-relational\nunique\nmatch-unique\nrhyme\n\n\n\n\n\n\n\n\n\n\nqcf\n[link]\n\n\nOverloads:\n 1\n\n\n[qcf: id; classes...]\n[link]\n\n\nAdds positive class filters to a constructed query.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nString\n\n\nThe ID string for the constructed query.\n\n\n\n\n\n\nclasses...\n\n\nString\n\n\nThe names of the classes that the returned entry must belong to.\n\n\n\n\n\n\n\n\n\n\nqcfn\n[link]\n\n\nOverloads:\n 1\n\n\n[qcfn: id; classes...]\n[link]\n\n\nAdds negative class filters to a constructed query.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nString\n\n\nThe ID string for the constructed query.\n\n\n\n\n\n\nclasses...\n\n\nString\n\n\nThe names of the classes that the returned entry must not belong to.\n\n\n\n\n\n\n\n\n\n\nqdel\n[link]\n\n\nOverloads:\n 1\n\n\n[qdel: id]\n[link]\n\n\nRemoves all stored data associated with the specified constructed query ID.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nString\n\n\nThe ID string for the constructed query.\n\n\n\n\n\n\n\n\n\n\nqexists\n[link]\n\n\nOverloads:\n 1\n\n\n[qexists: id]\n[link]\n\n\nPrints a boolean value indicating whether a constructed query with the specified ID exists.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nString\n\n\nThe ID string for the constructed query.\n\n\n\n\n\n\n\n\n\n\nqhas\n[link]\n\n\nOverloads:\n 1\n\n\n[qhas: id; regex-pattern; options]\n[link]\n\n\nAdds a positive regex filter to a constructed query.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nString\n\n\nThe ID string for the constructed query.\n\n\n\n\n\n\nregex-pattern\n\n\nString\n\n\nThe regex pattern for the filter.\n\n\n\n\n\n\noptions\n\n\nString\n\n\nThe regex option string for the filter.\n\n\n\n\n\n\n\n\n\n\nqhasno\n[link]\n\n\nOverloads:\n 1\n\n\n[qhasno: id; regex-pattern; options]\n[link]\n\n\nAdds a positive regex filter to a constructed query.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nString\n\n\nThe ID string for the constructed query.\n\n\n\n\n\n\nregex-pattern\n\n\nString\n\n\nThe regex pattern for the filter.\n\n\n\n\n\n\noptions\n\n\nString\n\n\nThe regex option string for the filter.\n\n\n\n\n\n\n\n\n\n\nqname\n[link]\n\n\nOverloads:\n 1\n\n\n[qname: id; name]\n[link]\n\n\nSets the table name for a constructed query.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nString\n\n\nThe ID string for the constructed query.\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe name of the table.\n\n\n\n\n\n\n\n\n\n\nqphr\n[link]\n\n\nOverloads:\n 1\n\n\n[qphr: id; complement]\n[link]\n\n\nAdds a phrasal complement to a constructed query.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nString\n\n\nThe ID string for the constructed query.\n\n\n\n\n\n\ncomplement\n\n\nPattern\n\n\nThe phrasal complement pattern.\n\n\n\n\n\n\n\n\n\n\nqsub\n[link]\n\n\nOverloads:\n 1\n\n\n[qsub: id; subtype]\n[link]\n\n\nSets the subtype for a constructed query.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nString\n\n\nThe ID string for the constructed query.\n\n\n\n\n\n\nsubtype\n\n\nString\n\n\nThe subtype of the term to select from the returned entry.\n\n\n\n\n\n\n\n\n\n\nqsubp\n[link]\n\n\nOverloads:\n 1\n\n\n[qsubp: id; plural-subtype]\n[link]\n\n\nSets the plural subtype for a constructed query.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nString\n\n\nThe ID string for the constructed query.\n\n\n\n\n\n\nplural-subtype\n\n\nString\n\n\nThe subtype of the term to select from the returned entry, if the plural flag is set.\n\n\n\n\n\n\n\n\n\n\nqsyl\n[link]\n\n\nOverloads:\n 2\n\n\n[qsyl: id; syllables]\n[link]\n\n\nAdds an syllable count range filter to a constructed query that defines an absolute syllable count.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nString\n\n\nThe ID string for the constructed query.\n\n\n\n\n\n\nsyllables\n\n\nNumber\n\n\nThe number of syllables.\n\n\n\n\n\n\n\n\n\n\n[qsyl: id; min-syllables; max-syllables]\n[link]\n\n\nAdds a syllable count range filter to a constructed query.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nString\n\n\nThe ID string for the constructed query.\n\n\n\n\n\n\nmin-syllables\n\n\nNumber\n\n\nThe minimum syllable count.\n\n\n\n\n\n\nmax-syllables\n\n\nNumber\n\n\nThe maximum syllable count.\n\n\n\n\n\n\n\n\n\n\nqsylmax\n[link]\n\n\nOverloads:\n 1\n\n\n[qsylmax: id; max-syllables]\n[link]\n\n\nAdds a syllable count range filter to a constructed query that defines only a maximum bound.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nString\n\n\nThe ID string for the constructed query.\n\n\n\n\n\n\nmax-syllables\n\n\nNumber\n\n\nThe maximum syllable count.\n\n\n\n\n\n\n\n\n\n\nqsylmin\n[link]\n\n\nOverloads:\n 1\n\n\n[qsylmin: id; min-syllables]\n[link]\n\n\nAdds a syllable count range filter to a constructed query that defines only a minimum bound.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nString\n\n\nThe ID string for the constructed query.\n\n\n\n\n\n\nmin-syllables\n\n\nNumber\n\n\nThe minimum syllable count.\n\n\n\n\n\n\n\n\n\n\nquery\n[link]\n\n\nAliases:\n \nq\nOverloads:\n 2\n\n\n[query]\n[link]\n\n\nRuns the last-accessed constructed query.\n\n\n\n\n[query: id]\n[link]\n\n\nRuns the constructed query with the specified identifier.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nString\n\n\nThe ID string for the constructed query.\n\n\n\n\n\n\n\n\n\n\nquote\n[link]\n\n\nAliases:\n \nquot\nOverloads:\n 1\n\n\n[quote: quote-action]\n[link]\n\n\nSurrounds the specified pattern in quotes. Nested quotes use the secondary quotes defined in the format settings.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nquote-action\n\n\nPattern\n\n\nThe pattern to run whose output will be surrounded in quotes.\n\n\n\n\n\n\n\n\n\n\nrcc\n[link]\n\n\nOverloads:\n 1\n\n\n[rcc: ids...]\n[link]\n\n\nResets the specified carrier components.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nids...\n\n\nString\n\n\nThe list of carrier component identifiers to reset.\n\n\n\n\n\n\n\n\n\n\nreg\n[link]\n\n\nOverloads:\n 1\n\n\n[reg]\n[link]\n\n\nPrints the registered trademark symbol.\n\n\n\n\nrep\n[link]\n\n\nAliases:\n \nr\nOverloads:\n 1\n\n\n[rep: times]\n[link]\n\n\nSets the repetition count for the next block.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntimes\n\n\nNumber\n\n\nThe number of times to repeat the next block.\n\n\n\n\n\n\n\n\n\n\nrepcount\n[link]\n\n\nAliases:\n \nrc\nOverloads:\n 1\n\n\n[repcount]\n[link]\n\n\nPrints the repetition count of the current block.\n\n\n\n\nrepeach\n[link]\n\n\nOverloads:\n 1\n\n\n[repeach]\n[link]\n\n\nSets the repetition count to the number of items in the next block.\n\n\n\n\nrepelapsed\n[link]\n\n\nAliases:\n \nre\nOverloads:\n 1\n\n\n[repelapsed]\n[link]\n\n\nPrints the number of iterations remaining to be performed on the current block.\n\n\n\n\nrepnum\n[link]\n\n\nAliases:\n \nrn\nOverloads:\n 1\n\n\n[repnum]\n[link]\n\n\nPrints the iteration number of the current block.\n\n\n\n\nrepqueued\n[link]\n\n\nAliases:\n \nrq\nOverloads:\n 1\n\n\n[repqueued]\n[link]\n\n\nPrints the number of repetitions remaining to be completed on the current block.\n\n\n\n\nreprem\n[link]\n\n\nAliases:\n \nrr\nOverloads:\n 1\n\n\n[reprem]\n[link]\n\n\nPrints the number of remaining repetitions queued after the current one.\n\n\n\n\nrequire\n[link]\n\n\nOverloads:\n 1\n\n\n[require: name]\n[link]\n\n\nLoads and runs a pattern from cache or file.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe name or path of the pattern to load.\n\n\n\n\n\n\n\n\n\n\nrev\n[link]\n\n\nOverloads:\n 1\n\n\n[rev: input]\n[link]\n\n\nReverses the specified string and prints it to the output.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninput\n\n\nString\n\n\nThe string to reverse.\n\n\n\n\n\n\n\n\n\n\nrevx\n[link]\n\n\nOverloads:\n 1\n\n\n[revx: input]\n[link]\n\n\nReverses the specified string and inverts common brackets and quotation marks, then prints the result to the output.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninput\n\n\nString\n\n\nThe string to reverse.\n\n\n\n\n\n\n\n\n\n\nrhyme\n[link]\n\n\nOverloads:\n 1\n\n\n[rhyme: flags]\n[link]\n\n\nSets the current rhyming mode for queries.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nflags\n\n\nFlags\n\n\nThe rhyme types to use.\nperfect\nEverything after the first stressed vowel matches in pronunciation (picky / icky).\nweak\nThe penultimate syllable is stressed and the final syllable rhymes (coffin / raisin).\nsyllabic\nThe final syllable rhymes (senator / otter).\nsemirhyme\nThe words would rhyme if not for the final syllable (broom / broomstick).\nforced\nThe words might rhyme if you really pushed it.\nslant-rhyme\nThe ending consonants are the same (rant / ant).\npararhyme\nAll the consonants match (tuna / teen).\nalliteration\nAll consonants up to the first vowel rhyme (dog / dude).\n\n\n\n\n\n\n\n\n\n\nring\n[link]\n\n\nOverloads:\n 1\n\n\n[ring: character]\n[link]\n\n\nAccents the specified character with a ring (a\u030a) accent.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncharacter\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nrs\n[link]\n\n\nOverloads:\n 1\n\n\n[rs: times; separator]\n[link]\n\n\nSets the repetitions and separator for the next block. A combination of rep and sep.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntimes\n\n\nNumber\n\n\nThe number of times to repeat the next block.\n\n\n\n\n\n\nseparator\n\n\nPattern\n\n\nThe separator pattern to run between iterations of the next block.\n\n\n\n\n\n\n\n\n\n\nrvl\n[link]\n\n\nOverloads:\n 1\n\n\n[rvl: var-names...]\n[link]\n\n\nRotates the values of a list of variables once to the left.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvar-names...\n\n\nString\n\n\nThe list of the names of variables whose values will be rotated in order.\n\n\n\n\n\n\n\n\n\n\nrvr\n[link]\n\n\nOverloads:\n 1\n\n\n[rvr: var-names...]\n[link]\n\n\nRotates the values of a list of variables once to the right.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvar-names...\n\n\nString\n\n\nThe list of the names of variables whose values will be rotated in order.\n\n\n\n\n\n\n\n\n\n\nsend\n[link]\n\n\nOverloads:\n 1\n\n\n[send: target-name; value]\n[link]\n\n\nAppends a string to the specified target's contents.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntarget-name\n\n\nString\n\n\nThe name of the target to send to.\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nThe string to send to the target.\n\n\n\n\n\n\n\n\n\n\nsendover\n[link]\n\n\nOverloads:\n 1\n\n\n[sendover: target-name; value]\n[link]\n\n\nOverwrites the specified target's contents with the provided value.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntarget-name\n\n\nString\n\n\nThe name of the target to send to.\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nThe string to send to the target.\n\n\n\n\n\n\n\n\n\n\nsep\n[link]\n\n\nAliases:\n \ns\nOverloads:\n 4\n\n\n[sep]\n[link]\n\n\n\n\n[sep: separator]\n[link]\n\n\nSets the separator pattern for the next block.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nseparator\n\n\nPattern\n\n\nThe separator pattern to run between iterations of the next block.\n\n\n\n\n\n\n\n\n\n\n[sep: separator; conjunction]\n[link]\n\n\nFlags the next block as a series and sets the separator and conjunction patterns.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nseparator\n\n\nPattern\n\n\nThe separator pattern to run between items.\n\n\n\n\n\n\nconjunction\n\n\nPattern\n\n\nThe conjunction pattern to run before the last item.\n\n\n\n\n\n\n\n\n\n\n[sep: separator; oxford; conjunction]\n[link]\n\n\nSets the separator, Oxford comma, and conjunction patterns for the next series.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nseparator\n\n\nPattern\n\n\nThe separator pattern to run between items.\n\n\n\n\n\n\noxford\n\n\nPattern\n\n\nThe Oxford comma pattern to run before the last item.\n\n\n\n\n\n\nconjunction\n\n\nPattern\n\n\nThe conjunction pattern to run before the last item in the series.\n\n\n\n\n\n\n\n\n\n\nsplit\n[link]\n\n\nOverloads:\n 2\n\n\n[split: list-name; input]\n[link]\n\n\nSplits the specified string into a list of chars.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-name\n\n\nString\n\n\nThe name of the variable that will contain the output list.\n\n\n\n\n\n\ninput\n\n\nString\n\n\nThe string to split.\n\n\n\n\n\n\n\n\n\n\n[split: list-name; delimiter; input]\n[link]\n\n\nSplits the specified string by the given delimiter.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist-name\n\n\nString\n\n\nThe name of the variable that will contain the output list.\n\n\n\n\n\n\ndelimiter\n\n\nString\n\n\nThe delimiter.\n\n\n\n\n\n\ninput\n\n\nString\n\n\nThe string to split.\n\n\n\n\n\n\n\n\n\n\nss\n[link]\n\n\nOverloads:\n 1\n\n\n[ss]\n[link]\n\n\nPrints an eszett (\u00df).\n\n\n\n\nstart\n[link]\n\n\nOverloads:\n 1\n\n\n[start: before-pattern]\n[link]\n\n\nSets a pattern that will run before the next block.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbefore-pattern\n\n\nPattern\n\n\nThe pattern to run before the next block.\n\n\n\n\n\n\n\n\n\n\nsub\n[link]\n\n\nOverloads:\n 1\n\n\n[sub: a; b]\n[link]\n\n\nPrints the difference of the specified values.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nNumber\n\n\nThe first operand.\n\n\n\n\n\n\nb\n\n\nNumber\n\n\nThe second operand.\n\n\n\n\n\n\n\n\n\n\nswap\n[link]\n\n\nOverloads:\n 1\n\n\n[swap: a; b]\n[link]\n\n\nSwaps the values of the variables with the two specified names.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nString\n\n\nThe name of the first variable.\n\n\n\n\n\n\nb\n\n\nString\n\n\nThe name of the second variable.\n\n\n\n\n\n\n\n\n\n\nswitch\n[link]\n\n\nOverloads:\n 1\n\n\n[switch: input; case-pairs...]\n[link]\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninput\n\n\nString\n\n\nNo description\n\n\n\n\n\n\ncase-pairs...\n\n\nPattern\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nsync\n[link]\n\n\nAliases:\n \nx\nOverloads:\n 1\n\n\n[sync: name; type]\n[link]\n\n\nCreates and applies a synchronizer with the specified name and type.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe name of the synchronizer.\n\n\n\n\n\n\ntype\n\n\nMode\n\n\nThe synchronization type to use.\nnone\nA random element is selected each time.\nforward\nExecutes from left to right.\nreverse\nExecutes from right to left.\ndeck\nShuffles items and executes in order. Re-shuffled each time all items are used up.\ncdeck\nShuffles items and executes in order. The same order is reused for each traversal.\nlocked\nChosen randomly, the same element is selected each time.\nping\nStarting at the first item, iterates through all elements in order and then reverses without repeating boundary elements.\npong\nStarting at the last item, iterates through all elements backwards and then reverses without repeating boundary elements.\nno-repeat\nThe same element will never be chosen twice in a row, as long as the block contains at least two elements.\n\n\n\n\n\n\n\n\n\n\ntarget\n[link]\n\n\nAliases:\n \nt\nOverloads:\n 1\n\n\n[target: target-name]\n[link]\n\n\nPlaces a target with the specified name at the current write position.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntarget-name\n\n\nString\n\n\nThe name of the target.\n\n\n\n\n\n\n\n\n\n\ntargetval\n[link]\n\n\nOverloads:\n 1\n\n\n[targetval: target-name]\n[link]\n\n\nPrints the current value of the specified target. This function will not spawn a target.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntarget-name\n\n\nString\n\n\nThe name of the target whose value to print.\n\n\n\n\n\n\n\n\n\n\nthen\n[link]\n\n\nOverloads:\n 1\n\n\n[then: condition-pass-pattern]\n[link]\n\n\nExecutes a pattern if the current flag condition passes.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncondition-pass-pattern\n\n\nPattern\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\ntilde\n[link]\n\n\nAliases:\n \ntld\nOverloads:\n 1\n\n\n[tilde: character]\n[link]\n\n\nAccents the specified character with a tilde (a\u0303) accent.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncharacter\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\ntm\n[link]\n\n\nOverloads:\n 1\n\n\n[tm]\n[link]\n\n\nPrints the trademark symbol.\n\n\n\n\ntoggle\n[link]\n\n\nOverloads:\n 1\n\n\n[toggle: flags...]\n[link]\n\n\nToggles the specified flags.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nflags...\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\ntxtfmt\n[link]\n\n\nOverloads:\n 1\n\n\n[txtfmt: format]\n[link]\n\n\nSets the text conversion format for all open channels.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nformat\n\n\nMode\n\n\nThe conversion mode to use.\nnone\nNo conversion.\nfullwidth\nFullwidth characters.\ncursive\nCursive script.\nbold-cursive\nBold cursive script.\n\n\n\n\n\n\n\n\n\n\ntypeof\n[link]\n\n\nOverloads:\n 1\n\n\n[typeof: name]\n[link]\n\n\nGets the type of the specified variable.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nundef\n[link]\n\n\nOverloads:\n 1\n\n\n[undef: flags...]\n[link]\n\n\nUndefines the specified flags.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nflags...\n\n\nString\n\n\nThe list of flags to undefine.\n\n\n\n\n\n\n\n\n\n\nv\n[link]\n\n\nOverloads:\n 1\n\n\n[v: name]\n[link]\n\n\nPrints the value of the specified variable.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe name of the variable to retrieve.\n\n\n\n\n\n\n\n\n\n\nvadd\n[link]\n\n\nOverloads:\n 1\n\n\n[vadd: a; b]\n[link]\n\n\nAdds a number to the specified variable.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nString\n\n\nThe name of the variable to add to.\n\n\n\n\n\n\nb\n\n\nNumber\n\n\nThe value to add.\n\n\n\n\n\n\n\n\n\n\nvb\n[link]\n\n\nOverloads:\n 1\n\n\n[vb: name; value]\n[link]\n\n\nCreates a new string variable with the specified name and value.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe name of the variable.\n\n\n\n\n\n\nvalue\n\n\nBoolean\n\n\nThe value of the variable.\n\n\n\n\n\n\n\n\n\n\nvcpy\n[link]\n\n\nOverloads:\n 1\n\n\n[vcpy: a; b]\n[link]\n\n\nCopies the value of the variable with the first name to the variable with the second name.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nString\n\n\nThe variable to copy from.\n\n\n\n\n\n\nb\n\n\nString\n\n\nThe variable to copy to.\n\n\n\n\n\n\n\n\n\n\nvdiv\n[link]\n\n\nOverloads:\n 1\n\n\n[vdiv: a; b]\n[link]\n\n\nDivides the specified variable by a number.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nString\n\n\nThe name of the variable to divide.\n\n\n\n\n\n\nb\n\n\nNumber\n\n\nThe divisor.\n\n\n\n\n\n\n\n\n\n\nveq\n[link]\n\n\nOverloads:\n 1\n\n\n[veq: a; b]\n[link]\n\n\nPrints a boolean value indicating whether the variables with the two specified names are equal to each other.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\nb\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nvexists\n[link]\n\n\nOverloads:\n 1\n\n\n[vexists: name]\n[link]\n\n\nPrints a boolean value indicating whether a variable with the specified name exists.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe name of the variable to check.\n\n\n\n\n\n\n\n\n\n\nvl\n[link]\n\n\nOverloads:\n 2\n\n\n[vl: name]\n[link]\n\n\nCreates a new list.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe name of the list.\n\n\n\n\n\n\n\n\n\n\n[vl: name; length]\n[link]\n\n\nCreates a new list with a specified length.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe name of the list.\n\n\n\n\n\n\nlength\n\n\nNumber\n\n\nThe length of the list.\n\n\n\n\n\n\n\n\n\n\nvlen\n[link]\n\n\nOverloads:\n 1\n\n\n[vlen: obj]\n[link]\n\n\nGets the length of the specified variable.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nobj\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nvmod\n[link]\n\n\nOverloads:\n 1\n\n\n[vmod: a; b]\n[link]\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nString\n\n\nNo description\n\n\n\n\n\n\nb\n\n\nNumber\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nvmul\n[link]\n\n\nOverloads:\n 1\n\n\n[vmul: a; b]\n[link]\n\n\nMultiplies the specified variable by a number.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nString\n\n\nThe name of the variable to multiply.\n\n\n\n\n\n\nb\n\n\nNumber\n\n\nThe value to multiply by.\n\n\n\n\n\n\n\n\n\n\nvn\n[link]\n\n\nOverloads:\n 2\n\n\n[vn: name; value]\n[link]\n\n\nCreates a new number variable with the specified name and value.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe name of the variable.\n\n\n\n\n\n\nvalue\n\n\nNumber\n\n\nThe value of the variable.\n\n\n\n\n\n\n\n\n\n\n[vn: name; min; max]\n[link]\n\n\nCreates a new number variable with a random value between the specified minimum and maximum bounds.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe name of the variable.\n\n\n\n\n\n\nmin\n\n\nNumber\n\n\nThe minimum bound of the value.\n\n\n\n\n\n\nmax\n\n\nNumber\n\n\nThe maximum bound of the value.\n\n\n\n\n\n\n\n\n\n\nvne\n[link]\n\n\nOverloads:\n 1\n\n\n[vne: a; b]\n[link]\n\n\nPrints a boolean value indicating whether the variables with the two specified names are not equal to each other.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\nb\n\n\nRantObject\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nvnot\n[link]\n\n\nOverloads:\n 1\n\n\n[vnot: a]\n[link]\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nString\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nvp\n[link]\n\n\nOverloads:\n 1\n\n\n[vp: name; value]\n[link]\n\n\nCreates a new pattern variable with the specified callback.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe name of the variable.\n\n\n\n\n\n\nvalue\n\n\nPattern\n\n\nThe value of the variable.\n\n\n\n\n\n\n\n\n\n\nvs\n[link]\n\n\nOverloads:\n 1\n\n\n[vs: name; value]\n[link]\n\n\nCreates a new string variable with the specified name and value.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe name of the variable.\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nThe value of the variable.\n\n\n\n\n\n\n\n\n\n\nvsub\n[link]\n\n\nOverloads:\n 1\n\n\n[vsub: a; b]\n[link]\n\n\nSubtracts a number from the specified variable.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nString\n\n\nThe name of the variable to subtract from.\n\n\n\n\n\n\nb\n\n\nNumber\n\n\nThe value to subtract.\n\n\n\n\n\n\n\n\n\n\nwhile\n[link]\n\n\nAliases:\n \nloop\nOverloads:\n 1\n\n\n[while: condition; body]\n[link]\n\n\nRuns the body over and over while condition remains true.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncondition\n\n\nPattern\n\n\nThe condition to check each iteration.\n\n\n\n\n\n\nbody\n\n\nPattern\n\n\nThe body of the loop.\n\n\n\n\n\n\n\n\n\n\nxdel\n[link]\n\n\nOverloads:\n 1\n\n\n[xdel: name]\n[link]\n\n\nDeletes a synchronizer.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe name of the synchronizer to delete.\n\n\n\n\n\n\n\n\n\n\nxor\n[link]\n\n\nOverloads:\n 1\n\n\n[xor: a; b...]\n[link]\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nBoolean\n\n\nNo description\n\n\n\n\n\n\nb...\n\n\nBoolean\n\n\nNo description\n\n\n\n\n\n\n\n\n\n\nxpin\n[link]\n\n\nOverloads:\n 1\n\n\n[xpin: name]\n[link]\n\n\nPins a synchronizer.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe name of the synchronizer to pin.\n\n\n\n\n\n\n\n\n\n\nxreset\n[link]\n\n\nOverloads:\n 1\n\n\n[xreset: name]\n[link]\n\n\nResets a synchronizer to its initial state.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe name of the synchronizer to reset.\n\n\n\n\n\n\n\n\n\n\nxstep\n[link]\n\n\nOverloads:\n 1\n\n\n[xstep: name]\n[link]\n\n\nIterates a synchronizer.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe name of the synchronizer to iterate.\n\n\n\n\n\n\n\n\n\n\nxunpin\n[link]\n\n\nOverloads:\n 1\n\n\n[xunpin: name]\n[link]\n\n\nUnpins a synchronizer.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe name of the synchronizer to unpin.\n\n\n\n\n\n\n\n\n\n\nyield\n[link]\n\n\nOverloads:\n 1\n\n\n[yield]\n[link]\n\n\nYields the currenty written output.",
            "title": "Function Reference"
        },
        {
            "location": "/language/functions/#function-reference",
            "text": "",
            "title": "Function reference"
        },
        {
            "location": "/language/functions/#abbr",
            "text": "Overloads:  1",
            "title": "abbr"
        },
        {
            "location": "/language/functions/#abbr-value",
            "text": "Abbreviates the specified string.  Parameters     Name  Type  Description      value  String  The string to abbreviate.",
            "title": "[abbr: value]"
        },
        {
            "location": "/language/functions/#accent",
            "text": "Overloads:  2",
            "title": "accent"
        },
        {
            "location": "/language/functions/#accent-accent",
            "text": "Accents the previous character.  Parameters     Name  Type  Description      accent  Mode  acute grave circumflex tilde ring diaeresis caron macron",
            "title": "[accent: accent]"
        },
        {
            "location": "/language/functions/#accent-character-accent",
            "text": "Accents the specified character.  Parameters     Name  Type  Description      character  String  No description    accent  Mode  acute grave circumflex tilde ring diaeresis caron macron",
            "title": "[accent: character; accent]"
        },
        {
            "location": "/language/functions/#acute",
            "text": "Aliases:   act Overloads:  1",
            "title": "acute"
        },
        {
            "location": "/language/functions/#acute-character",
            "text": "Accents the specified character with an acute (a\u0301) accent.  Parameters     Name  Type  Description      character  String  No description",
            "title": "[acute: character]"
        },
        {
            "location": "/language/functions/#add",
            "text": "Overloads:  1",
            "title": "add"
        },
        {
            "location": "/language/functions/#add-a-b",
            "text": "Prints the num of the specified values.  Parameters     Name  Type  Description      a  Number  The first operand.    b  Number  The second operand.",
            "title": "[add: a; b]"
        },
        {
            "location": "/language/functions/#after",
            "text": "Overloads:  1",
            "title": "after"
        },
        {
            "location": "/language/functions/#after-after-action",
            "text": "Sets the postfix pattern for the next block.  Parameters     Name  Type  Description      after-action  Pattern  The pattern to run after each iteration of the next block.",
            "title": "[after: after-action]"
        },
        {
            "location": "/language/functions/#and",
            "text": "Overloads:  1",
            "title": "and"
        },
        {
            "location": "/language/functions/#and-a-b",
            "text": "Parameters     Name  Type  Description      a  Boolean  No description    b...  Boolean  No description",
            "title": "[and: a; b...]"
        },
        {
            "location": "/language/functions/#arg",
            "text": "Overloads:  1",
            "title": "arg"
        },
        {
            "location": "/language/functions/#arg-name",
            "text": "Returns the specified argument from the current subroutine.  Parameters     Name  Type  Description      name  String  The name of the argument to retrieve.",
            "title": "[arg: name]"
        },
        {
            "location": "/language/functions/#at",
            "text": "Overloads:  1",
            "title": "at"
        },
        {
            "location": "/language/functions/#at-input-pos",
            "text": "Prints the character at the specified position in the input. Throws an exception if the position is outside of the string.  Parameters     Name  Type  Description      input  String  The input string.    pos  Number  The position of the character to find.",
            "title": "[at: input; pos]"
        },
        {
            "location": "/language/functions/#b",
            "text": "Overloads:  1",
            "title": "b"
        },
        {
            "location": "/language/functions/#b_1",
            "text": "Prints a bullet character.",
            "title": "[b]"
        },
        {
            "location": "/language/functions/#before",
            "text": "Overloads:  1",
            "title": "before"
        },
        {
            "location": "/language/functions/#before-before-action",
            "text": "Sets the prefix pattern for the next block.  Parameters     Name  Type  Description      before-action  Pattern  The pattern to run before each iteration of the next block.",
            "title": "[before: before-action]"
        },
        {
            "location": "/language/functions/#branch",
            "text": "Overloads:  2",
            "title": "branch"
        },
        {
            "location": "/language/functions/#branch-seed",
            "text": "Branches the internal RNG according to a seed.  Parameters     Name  Type  Description      seed  String  The seed for the branch.",
            "title": "[branch: seed]"
        },
        {
            "location": "/language/functions/#branch-seed-branch-action",
            "text": "Branches the internal RNG, executes the specified pattern, and then merges the branch.  Parameters     Name  Type  Description      seed  String  The seed for the branch.    branch-action  Pattern  The pattern to run on the branch.",
            "title": "[branch: seed; branch-action]"
        },
        {
            "location": "/language/functions/#c",
            "text": "Overloads:  1",
            "title": "c"
        },
        {
            "location": "/language/functions/#c_1",
            "text": "Prints the copyright symbol.",
            "title": "[c]"
        },
        {
            "location": "/language/functions/#capsinfer",
            "text": "Overloads:  1",
            "title": "capsinfer"
        },
        {
            "location": "/language/functions/#capsinfer-sample",
            "text": "Infers the capitalization of a given string and sets the capitalization mode to match it.  Parameters     Name  Type  Description      sample  String  A string that is capitalized in the format to be set.",
            "title": "[capsinfer: sample]"
        },
        {
            "location": "/language/functions/#caron",
            "text": "Aliases:   crn Overloads:  1",
            "title": "caron"
        },
        {
            "location": "/language/functions/#caron-character",
            "text": "Accents the specified character with a caron (c\u030c) accent.  Parameters     Name  Type  Description      character  String  No description",
            "title": "[caron: character]"
        },
        {
            "location": "/language/functions/#case",
            "text": "Aliases:   caps Overloads:  1",
            "title": "case"
        },
        {
            "location": "/language/functions/#case-mode",
            "text": "Changes the capitalization mode for all open channels.  Parameters     Name  Type  Description      mode  Mode  The capitalization mode to use. none No capitalization. lower Convert to lowercase. upper Convert to uppercase. title Convert to title case. first Capitalize the first letter. sentence Capitalize the first letter of every sentence. word Capitalize the first letter of every word.",
            "title": "[case: mode]"
        },
        {
            "location": "/language/functions/#cedilla",
            "text": "Aliases:   ced Overloads:  1",
            "title": "cedilla"
        },
        {
            "location": "/language/functions/#cedilla-character",
            "text": "Accents the specified character with a cedilla (c\u0327) accent.  Parameters     Name  Type  Description      character  String  No description",
            "title": "[cedilla: character]"
        },
        {
            "location": "/language/functions/#chan",
            "text": "Overloads:  1",
            "title": "chan"
        },
        {
            "location": "/language/functions/#chan-channel-name-visibility-pattern",
            "text": "Opens a channel for writing and executes the specified pattern inside of it.  Parameters     Name  Type  Description      channel-name  String  No description    visibility  Mode  public Channel outputs to itself and 'main'. private Channel outputs only to itself. internal Channel outputs only to itself and all immediate parent channels also set to Internal.    pattern  Pattern  No description",
            "title": "[chan: channel-name; visibility; pattern]"
        },
        {
            "location": "/language/functions/#chance",
            "text": "Overloads:  1",
            "title": "chance"
        },
        {
            "location": "/language/functions/#chance-chance",
            "text": "Modifies the likelihood that the next block will execute. Specified in percentage.  Parameters     Name  Type  Description      chance  Number  The percent probability that the next block will execute.",
            "title": "[chance: chance]"
        },
        {
            "location": "/language/functions/#char",
            "text": "Overloads:  1",
            "title": "char"
        },
        {
            "location": "/language/functions/#char-name",
            "text": "Prints a Unicode character given its official Unicode-designated name (e.g. 'LATIN CAPITAL LETTER R' -> 'R').  Parameters     Name  Type  Description      name  String  The name of the character to print (case-insensitive).",
            "title": "[char: name]"
        },
        {
            "location": "/language/functions/#chlen",
            "text": "Overloads:  1",
            "title": "chlen"
        },
        {
            "location": "/language/functions/#chlen-channel-name",
            "text": "Prints the current length of the specified channel, in characters.  Parameters     Name  Type  Description      channel-name  String  The channel for which to retrieve the length.",
            "title": "[chlen: channel-name]"
        },
        {
            "location": "/language/functions/#circumflex",
            "text": "Aliases:   cflex Overloads:  1",
            "title": "circumflex"
        },
        {
            "location": "/language/functions/#circumflex-character",
            "text": "Accents the specified character with a circumflex (a\u0302) accent.  Parameters     Name  Type  Description      character  String  No description",
            "title": "[circumflex: character]"
        },
        {
            "location": "/language/functions/#clrt",
            "text": "Overloads:  1",
            "title": "clrt"
        },
        {
            "location": "/language/functions/#clrt-target-name",
            "text": "Clears the contents of the specified target.  Parameters     Name  Type  Description      target-name  String  The name of the target to be cleared.",
            "title": "[clrt: target-name]"
        },
        {
            "location": "/language/functions/#define",
            "text": "Overloads:  1",
            "title": "define"
        },
        {
            "location": "/language/functions/#define-flags",
            "text": "Defines the specified flags.  Parameters     Name  Type  Description      flags...  String  The list of flags to define.",
            "title": "[define: flags...]"
        },
        {
            "location": "/language/functions/#depth",
            "text": "Overloads:  1",
            "title": "depth"
        },
        {
            "location": "/language/functions/#depth_1",
            "text": "Prints the number of currently active blocks.",
            "title": "[depth]"
        },
        {
            "location": "/language/functions/#diaeresis",
            "text": "Aliases:   dia Overloads:  1",
            "title": "diaeresis"
        },
        {
            "location": "/language/functions/#diaeresis-character",
            "text": "Accents the specified character with a diaeresis (a\u0308) accent.  Parameters     Name  Type  Description      character  String  No description",
            "title": "[diaeresis: character]"
        },
        {
            "location": "/language/functions/#digits",
            "text": "Overloads:  1",
            "title": "digits"
        },
        {
            "location": "/language/functions/#digits-format-digits",
            "text": "Specifies the current digit formatting mode for numbers.  Parameters     Name  Type  Description      format  Mode  The digit format to use. normal Use as many digits as necessary to accomodate the number. pad Pad numbers to a specific number of digits. truncate Truncate numbers over a specific number of digits.    digits  Number  The digit count to associate with the mode.",
            "title": "[digits: format; digits]"
        },
        {
            "location": "/language/functions/#div",
            "text": "Overloads:  1",
            "title": "div"
        },
        {
            "location": "/language/functions/#div-a-b",
            "text": "Prints the quotient of the two specified numbers.  Parameters     Name  Type  Description      a  Number  The dividend.    b  Number  The divisor.",
            "title": "[div: a; b]"
        },
        {
            "location": "/language/functions/#else",
            "text": "Overloads:  1",
            "title": "else"
        },
        {
            "location": "/language/functions/#else-condition-fail-pattern",
            "text": "Executes a pattern if the current flag condition fails.  Parameters     Name  Type  Description      condition-fail-pattern  Pattern  No description",
            "title": "[else: condition-fail-pattern]"
        },
        {
            "location": "/language/functions/#em",
            "text": "Overloads:  1",
            "title": "em"
        },
        {
            "location": "/language/functions/#em_1",
            "text": "Prints an emdash.",
            "title": "[em]"
        },
        {
            "location": "/language/functions/#emoji",
            "text": "Overloads:  1",
            "title": "emoji"
        },
        {
            "location": "/language/functions/#emoji-shortcode",
            "text": "Takes an emoji shortcode and prints the corresponding emoji.  Parameters     Name  Type  Description      shortcode  String  The emoji shortcode to use, without colons.",
            "title": "[emoji: shortcode]"
        },
        {
            "location": "/language/functions/#en",
            "text": "Overloads:  1",
            "title": "en"
        },
        {
            "location": "/language/functions/#en_1",
            "text": "Prints an endash.",
            "title": "[en]"
        },
        {
            "location": "/language/functions/#end",
            "text": "Overloads:  1",
            "title": "end"
        },
        {
            "location": "/language/functions/#end-end-pattern",
            "text": "Sets a pattern that will run after the next block.  Parameters     Name  Type  Description      end-pattern  Pattern  The pattern to run after the next block.",
            "title": "[end: end-pattern]"
        },
        {
            "location": "/language/functions/#endian",
            "text": "Overloads:  1",
            "title": "endian"
        },
        {
            "location": "/language/functions/#endian-endianness",
            "text": "Sets the current endianness for hex and binary formatted numbers.  Parameters     Name  Type  Description      endianness  Mode  The endianness to use. big Big endian. little Little endian. default Whatever endianness your system uses.",
            "title": "[endian: endianness]"
        },
        {
            "location": "/language/functions/#ends",
            "text": "Overloads:  1",
            "title": "ends"
        },
        {
            "location": "/language/functions/#ends-action",
            "text": "Runs a pattern if the current block iteration is either the first or last.  Parameters     Name  Type  Description      action  Pattern  The pattern to run when the condition is met.",
            "title": "[ends: action]"
        },
        {
            "location": "/language/functions/#eq",
            "text": "Overloads:  1",
            "title": "eq"
        },
        {
            "location": "/language/functions/#eq-a-b",
            "text": "Prints a boolean value indicating whether the two values have equal string representations.  Parameters     Name  Type  Description      a  String  No description    b  String  No description",
            "title": "[eq: a; b]"
        },
        {
            "location": "/language/functions/#eqi",
            "text": "Overloads:  1",
            "title": "eqi"
        },
        {
            "location": "/language/functions/#eqi-a-b",
            "text": "Prints a boolean value indicating whether the two values have equal string representations, ignoring case.  Parameters     Name  Type  Description      a  String  No description    b  String  No description",
            "title": "[eqi: a; b]"
        },
        {
            "location": "/language/functions/#even",
            "text": "Overloads:  1",
            "title": "even"
        },
        {
            "location": "/language/functions/#even-action",
            "text": "Runs a pattern if the current block iteration is an even number.  Parameters     Name  Type  Description      action  Pattern  The pattern to run when the condition is met.",
            "title": "[even: action]"
        },
        {
            "location": "/language/functions/#first",
            "text": "Overloads:  1",
            "title": "first"
        },
        {
            "location": "/language/functions/#first-action",
            "text": "Runs a pattern if the current block iteration is the first.  Parameters     Name  Type  Description      action  Pattern  The pattern to run when the condition is met.",
            "title": "[first: action]"
        },
        {
            "location": "/language/functions/#ge",
            "text": "Overloads:  1",
            "title": "ge"
        },
        {
            "location": "/language/functions/#ge-a-b",
            "text": "Parameters     Name  Type  Description      a  Number  No description    b  Number  No description",
            "title": "[ge: a; b]"
        },
        {
            "location": "/language/functions/#grave",
            "text": "Aliases:   grv Overloads:  1",
            "title": "grave"
        },
        {
            "location": "/language/functions/#grave-character",
            "text": "Accents the specified character with a grave (a\u0300) accent.  Parameters     Name  Type  Description      character  String  No description",
            "title": "[grave: character]"
        },
        {
            "location": "/language/functions/#group",
            "text": "Overloads:  1",
            "title": "group"
        },
        {
            "location": "/language/functions/#group-group-name",
            "text": "Retrieves and prints the specified group value of the current match from the active replacer.  Parameters     Name  Type  Description      group-name  String  The name of the match group whose value will be retrieved.",
            "title": "[group: group-name]"
        },
        {
            "location": "/language/functions/#gt",
            "text": "Overloads:  1",
            "title": "gt"
        },
        {
            "location": "/language/functions/#gt-a-b",
            "text": "Parameters     Name  Type  Description      a  Number  No description    b  Number  No description",
            "title": "[gt: a; b]"
        },
        {
            "location": "/language/functions/#if",
            "text": "Overloads:  2",
            "title": "if"
        },
        {
            "location": "/language/functions/#if-condition-body",
            "text": "Parameters     Name  Type  Description      condition  Boolean  No description    body  Pattern  No description",
            "title": "[if: condition; body]"
        },
        {
            "location": "/language/functions/#if-condition-body-else-body",
            "text": "Parameters     Name  Type  Description      condition  Boolean  No description    body  Pattern  No description    else-body  Pattern  No description",
            "title": "[if: condition; body; else-body]"
        },
        {
            "location": "/language/functions/#ifdef",
            "text": "Overloads:  1",
            "title": "ifdef"
        },
        {
            "location": "/language/functions/#ifdef-flags",
            "text": "Sets the current flag condition for [then] ... [else] calls to be true if all the specified flags are set.  Parameters     Name  Type  Description      flags...  String  No description",
            "title": "[ifdef: flags...]"
        },
        {
            "location": "/language/functions/#ifndef",
            "text": "Overloads:  1",
            "title": "ifndef"
        },
        {
            "location": "/language/functions/#ifndef-flags",
            "text": "Sets the current flag condition for [then] ... [else] calls to be true if all the specified flags are unset.  Parameters     Name  Type  Description      flags...  String  No description",
            "title": "[ifndef: flags...]"
        },
        {
            "location": "/language/functions/#ifnot",
            "text": "Aliases:   ifn Overloads:  2",
            "title": "ifnot"
        },
        {
            "location": "/language/functions/#ifnot-condition-body",
            "text": "Parameters     Name  Type  Description      condition  Boolean  No description    body  Pattern  No description",
            "title": "[ifnot: condition; body]"
        },
        {
            "location": "/language/functions/#ifnot-condition-body-else-body",
            "text": "Parameters     Name  Type  Description      condition  Boolean  No description    body  Pattern  No description    else-body  Pattern  No description",
            "title": "[ifnot: condition; body; else-body]"
        },
        {
            "location": "/language/functions/#in",
            "text": "Overloads:  1",
            "title": "in"
        },
        {
            "location": "/language/functions/#in-arg-name",
            "text": "Prints the value of the specified pattern argument.  Parameters     Name  Type  Description      arg-name  String  The name of the argument to access.",
            "title": "[in: arg-name]"
        },
        {
            "location": "/language/functions/#index",
            "text": "Aliases:   i Overloads:  1",
            "title": "index"
        },
        {
            "location": "/language/functions/#index_1",
            "text": "Prints the zero-based index of the block item currently being executed.",
            "title": "[index]"
        },
        {
            "location": "/language/functions/#index1",
            "text": "Aliases:   i1 Overloads:  1",
            "title": "index1"
        },
        {
            "location": "/language/functions/#index1_1",
            "text": "Prints the one-based index of the block item currently being executed.",
            "title": "[index1]"
        },
        {
            "location": "/language/functions/#init",
            "text": "Overloads:  1",
            "title": "init"
        },
        {
            "location": "/language/functions/#init-index",
            "text": "Sets the index of the element to execute on the next block. Set to -1 to disable.  Parameters     Name  Type  Description      index  Number  No description",
            "title": "[init: index]"
        },
        {
            "location": "/language/functions/#item",
            "text": "Overloads:  2",
            "title": "item"
        },
        {
            "location": "/language/functions/#item_1",
            "text": "Prints the main output from the current block iteration.",
            "title": "[item]"
        },
        {
            "location": "/language/functions/#item-channel",
            "text": "Prints the specified channel from the current block iteration.  Parameters     Name  Type  Description      channel  String  The output channel to print from.",
            "title": "[item: channel]"
        },
        {
            "location": "/language/functions/#join",
            "text": "Overloads:  2",
            "title": "join"
        },
        {
            "location": "/language/functions/#join-list-obj",
            "text": "Joins the specified list into a string.  Parameters     Name  Type  Description      list-obj  RantObject  The list to join.",
            "title": "[join: list-obj]"
        },
        {
            "location": "/language/functions/#join-list-obj-delimiter",
            "text": "Joins the specified list into a string seperated by the delimiter and returns it.  Parameters     Name  Type  Description      list-obj  RantObject  The list to join.    delimiter  String  The delimiter.",
            "title": "[join: list-obj; delimiter]"
        },
        {
            "location": "/language/functions/#ladd",
            "text": "Aliases:   ladds Overloads:  1",
            "title": "ladd"
        },
        {
            "location": "/language/functions/#ladd-list-obj-values",
            "text": "Adds one or more strings to a list.  Parameters     Name  Type  Description      list-obj  RantObject  The list to add to.    values...  String  The strings to add.",
            "title": "[ladd: list-obj; values...]"
        },
        {
            "location": "/language/functions/#laddn",
            "text": "Overloads:  1",
            "title": "laddn"
        },
        {
            "location": "/language/functions/#laddn-list-obj-values",
            "text": "Adds one or more numbers to a list.  Parameters     Name  Type  Description      list-obj  RantObject  The list to add to.    values...  Number  The numbers to add.",
            "title": "[laddn: list-obj; values...]"
        },
        {
            "location": "/language/functions/#laddp",
            "text": "Overloads:  1",
            "title": "laddp"
        },
        {
            "location": "/language/functions/#laddp-list-obj-values",
            "text": "Adds one or more patterns to a list.  Parameters     Name  Type  Description      list-obj  RantObject  The list to add to.    values...  Pattern  The patterns to add.",
            "title": "[laddp: list-obj; values...]"
        },
        {
            "location": "/language/functions/#laddv",
            "text": "Overloads:  1",
            "title": "laddv"
        },
        {
            "location": "/language/functions/#laddv-list-obj-values",
            "text": "Adds one or more variables to a list.  Parameters     Name  Type  Description      list-obj  RantObject  The list to add to.    values...  RantObject  The variables to add.",
            "title": "[laddv: list-obj; values...]"
        },
        {
            "location": "/language/functions/#last",
            "text": "Overloads:  1",
            "title": "last"
        },
        {
            "location": "/language/functions/#last-action",
            "text": "Runs a pattern if the current block iteration is the last.  Parameters     Name  Type  Description      action  Pattern  The pattern to run when the condition is met.",
            "title": "[last: action]"
        },
        {
            "location": "/language/functions/#lclone",
            "text": "Overloads:  1",
            "title": "lclone"
        },
        {
            "location": "/language/functions/#lclone-list-obj-variable",
            "text": "Clones a list to another variable.  Parameters     Name  Type  Description      list-obj  RantObject  No description    variable  String  No description",
            "title": "[lclone: list-obj; variable]"
        },
        {
            "location": "/language/functions/#lclr",
            "text": "Overloads:  1",
            "title": "lclr"
        },
        {
            "location": "/language/functions/#lclr-list-obj",
            "text": "Clears the specified list.  Parameters     Name  Type  Description      list-obj  RantObject  No description",
            "title": "[lclr: list-obj]"
        },
        {
            "location": "/language/functions/#lcpy",
            "text": "Overloads:  1",
            "title": "lcpy"
        },
        {
            "location": "/language/functions/#lcpy-list-obj-index-variable",
            "text": "Copies an item from a list into a variable.  Parameters     Name  Type  Description      list-obj  RantObject  No description    index  Number  No description    variable  String  No description",
            "title": "[lcpy: list-obj; index; variable]"
        },
        {
            "location": "/language/functions/#le",
            "text": "Overloads:  1",
            "title": "le"
        },
        {
            "location": "/language/functions/#le-a-b",
            "text": "Parameters     Name  Type  Description      a  Number  No description    b  Number  No description",
            "title": "[le: a; b]"
        },
        {
            "location": "/language/functions/#len",
            "text": "Overloads:  1",
            "title": "len"
        },
        {
            "location": "/language/functions/#len-str",
            "text": "Gets the length of the specified string.  Parameters     Name  Type  Description      str  String  The string to measure.",
            "title": "[len: str]"
        },
        {
            "location": "/language/functions/#lfilter",
            "text": "Overloads:  2",
            "title": "lfilter"
        },
        {
            "location": "/language/functions/#lfilter-list-name-varname-condition",
            "text": "Filters out elements of a list when the condition returns false. Mutates list.  Parameters     Name  Type  Description      list-name  String  The name of the list object to filter.    varname  String  The name of the variable that will contain the current item within the condition.    condition  Pattern  The condition that will be checked for each item.",
            "title": "[lfilter: list-name; varname; condition]"
        },
        {
            "location": "/language/functions/#lfilter-list-name-output-list-name-varname-condition",
            "text": "Filters out elements of a list when the condition returns false. Creates new list with results.  Parameters     Name  Type  Description      list-name  String  The name of the list object to filter.    output-list-name  String  The name of the list that will contain the filtered result.    varname  String  The name of the variable that will contain the current item within the condition.    condition  Pattern  The condition that will be checked for each item.",
            "title": "[lfilter: list-name; output-list-name; varname; condition]"
        },
        {
            "location": "/language/functions/#lfind",
            "text": "Overloads:  1",
            "title": "lfind"
        },
        {
            "location": "/language/functions/#lfind-list-obj-value",
            "text": "Searches a list for the specified value and prints the index if found. Otherwise, prints -1.  Parameters     Name  Type  Description      list-obj  RantObject  No description    value  String  No description",
            "title": "[lfind: list-obj; value]"
        },
        {
            "location": "/language/functions/#lfindi",
            "text": "Overloads:  1",
            "title": "lfindi"
        },
        {
            "location": "/language/functions/#lfindi-list-obj-value",
            "text": "Searches a list for the specified value, ignoring case, and prints the index if found. Otherwise, prints -1.  Parameters     Name  Type  Description      list-obj  RantObject  No description    value  String  No description",
            "title": "[lfindi: list-obj; value]"
        },
        {
            "location": "/language/functions/#lfindv",
            "text": "Overloads:  1",
            "title": "lfindv"
        },
        {
            "location": "/language/functions/#lfindv-list-obj-value",
            "text": "Searches a list for the specified variable and prints the index if found. Otherwise, prints -1.  Parameters     Name  Type  Description      list-obj  RantObject  No description    value  RantObject  No description",
            "title": "[lfindv: list-obj; value]"
        },
        {
            "location": "/language/functions/#lget",
            "text": "Overloads:  1",
            "title": "lget"
        },
        {
            "location": "/language/functions/#lget-list-obj-index",
            "text": "Prints a list item from the specified index.  Parameters     Name  Type  Description      list-obj  RantObject  No description    index  Number  No description",
            "title": "[lget: list-obj; index]"
        },
        {
            "location": "/language/functions/#lins",
            "text": "Overloads:  1",
            "title": "lins"
        },
        {
            "location": "/language/functions/#lins-list-obj-index-value",
            "text": "Inserts a string at the specified index in a list.  Parameters     Name  Type  Description      list-obj  RantObject  No description    index  Number  No description    value  String  No description",
            "title": "[lins: list-obj; index; value]"
        },
        {
            "location": "/language/functions/#linsn",
            "text": "Overloads:  1",
            "title": "linsn"
        },
        {
            "location": "/language/functions/#linsn-list-obj-index-value",
            "text": "Inserts a number at the specified index in a list.  Parameters     Name  Type  Description      list-obj  RantObject  No description    index  Number  No description    value  Number  No description",
            "title": "[linsn: list-obj; index; value]"
        },
        {
            "location": "/language/functions/#linsp",
            "text": "Overloads:  1",
            "title": "linsp"
        },
        {
            "location": "/language/functions/#linsp-list-obj-index-value",
            "text": "Inserts a pattern at the specified index in a list.  Parameters     Name  Type  Description      list-obj  RantObject  No description    index  Number  No description    value  Pattern  No description",
            "title": "[linsp: list-obj; index; value]"
        },
        {
            "location": "/language/functions/#linsv",
            "text": "Overloads:  1",
            "title": "linsv"
        },
        {
            "location": "/language/functions/#linsv-list-obj-index-value",
            "text": "Inserts a variable at the specified index in a list.  Parameters     Name  Type  Description      list-obj  RantObject  No description    index  Number  No description    value  RantObject  No description",
            "title": "[linsv: list-obj; index; value]"
        },
        {
            "location": "/language/functions/#lmap",
            "text": "Overloads:  2",
            "title": "lmap"
        },
        {
            "location": "/language/functions/#lmap-list-name-varname-body",
            "text": "Replaces each item in the input list with its value when run through body.  Parameters     Name  Type  Description      list-name  String  The name of the list object to map.    varname  String  The name of the variable that will contain the current item within the body.    body  Pattern  The body that will be run for each item.",
            "title": "[lmap: list-name; varname; body]"
        },
        {
            "location": "/language/functions/#lmap-list-name-output-list-name-varname-body",
            "text": "Runs each item in the input list through the body and adds results to output list.  Parameters     Name  Type  Description      list-name  String  The name of the list object to map.    output-list-name  String  The name of the list that will contain the mapped result.    varname  String  The name of the variable that will contain the current item within the body.    body  Pattern  The body that will be run for each item.",
            "title": "[lmap: list-name; output-list-name; varname; body]"
        },
        {
            "location": "/language/functions/#lpop",
            "text": "Overloads:  1",
            "title": "lpop"
        },
        {
            "location": "/language/functions/#lpop-list-obj",
            "text": "Removes the last item from a list.  Parameters     Name  Type  Description      list-obj  RantObject  No description",
            "title": "[lpop: list-obj]"
        },
        {
            "location": "/language/functions/#lpopf",
            "text": "Overloads:  1",
            "title": "lpopf"
        },
        {
            "location": "/language/functions/#lpopf-list-obj",
            "text": "Removes the first item from a list.  Parameters     Name  Type  Description      list-obj  RantObject  No description",
            "title": "[lpopf: list-obj]"
        },
        {
            "location": "/language/functions/#lpre",
            "text": "Aliases:   lpres Overloads:  1",
            "title": "lpre"
        },
        {
            "location": "/language/functions/#lpre-list-obj-value",
            "text": "Prepends a string to a list.  Parameters     Name  Type  Description      list-obj  RantObject  No description    value  String  No description",
            "title": "[lpre: list-obj; value]"
        },
        {
            "location": "/language/functions/#lpren",
            "text": "Overloads:  1",
            "title": "lpren"
        },
        {
            "location": "/language/functions/#lpren-list-obj-value",
            "text": "Prepends a number to a list.  Parameters     Name  Type  Description      list-obj  RantObject  No description    value  Number  No description",
            "title": "[lpren: list-obj; value]"
        },
        {
            "location": "/language/functions/#lprep",
            "text": "Overloads:  1",
            "title": "lprep"
        },
        {
            "location": "/language/functions/#lprep-list-obj-value",
            "text": "Prepends a pattern to a list.  Parameters     Name  Type  Description      list-obj  RantObject  No description    value  Pattern  No description",
            "title": "[lprep: list-obj; value]"
        },
        {
            "location": "/language/functions/#lrand",
            "text": "Overloads:  1",
            "title": "lrand"
        },
        {
            "location": "/language/functions/#lrand-obj",
            "text": "Returns a random value from the specified list.  Parameters     Name  Type  Description      obj  RantObject  The list to pick from.",
            "title": "[lrand: obj]"
        },
        {
            "location": "/language/functions/#lset",
            "text": "Overloads:  1",
            "title": "lset"
        },
        {
            "location": "/language/functions/#lset-list-obj-index-value",
            "text": "Sets the item at a specified index in a list.  Parameters     Name  Type  Description      list-obj  RantObject  No description    index  Number  No description    value  String  No description",
            "title": "[lset: list-obj; index; value]"
        },
        {
            "location": "/language/functions/#lsetn",
            "text": "Overloads:  1",
            "title": "lsetn"
        },
        {
            "location": "/language/functions/#lsetn-list-obj-index-value",
            "text": "Sets the item at a specified index in a list to a number.  Parameters     Name  Type  Description      list-obj  RantObject  No description    index  Number  No description    value  Number  No description",
            "title": "[lsetn: list-obj; index; value]"
        },
        {
            "location": "/language/functions/#lsetp",
            "text": "Overloads:  1",
            "title": "lsetp"
        },
        {
            "location": "/language/functions/#lsetp-list-obj-index-value",
            "text": "Sets the item at a specified index in a list to a pattern.  Parameters     Name  Type  Description      list-obj  RantObject  No description    index  Number  No description    value  Pattern  No description",
            "title": "[lsetp: list-obj; index; value]"
        },
        {
            "location": "/language/functions/#lsetv",
            "text": "Overloads:  1",
            "title": "lsetv"
        },
        {
            "location": "/language/functions/#lsetv-list-obj-index-value",
            "text": "Sets the item at a specified index in a list to a variable.  Parameters     Name  Type  Description      list-obj  RantObject  No description    index  Number  No description    value  RantObject  No description",
            "title": "[lsetv: list-obj; index; value]"
        },
        {
            "location": "/language/functions/#lt",
            "text": "Overloads:  1",
            "title": "lt"
        },
        {
            "location": "/language/functions/#lt-a-b",
            "text": "Parameters     Name  Type  Description      a  Number  No description    b  Number  No description",
            "title": "[lt: a; b]"
        },
        {
            "location": "/language/functions/#macron",
            "text": "Aliases:   mcn Overloads:  1",
            "title": "macron"
        },
        {
            "location": "/language/functions/#macron-character",
            "text": "Accents the specified character with a macron (c\u0304) accent.  Parameters     Name  Type  Description      character  String  No description",
            "title": "[macron: character]"
        },
        {
            "location": "/language/functions/#match",
            "text": "Overloads:  1",
            "title": "match"
        },
        {
            "location": "/language/functions/#match_1",
            "text": "Retrieves and prints the current match string of the active replacer.",
            "title": "[match]"
        },
        {
            "location": "/language/functions/#maybe",
            "text": "Overloads:  1",
            "title": "maybe"
        },
        {
            "location": "/language/functions/#maybe_1",
            "text": "",
            "title": "[maybe]"
        },
        {
            "location": "/language/functions/#merge",
            "text": "Overloads:  1",
            "title": "merge"
        },
        {
            "location": "/language/functions/#merge_1",
            "text": "Merges the topmost branch of the internal RNG, if it has been branched at least once.",
            "title": "[merge]"
        },
        {
            "location": "/language/functions/#middle",
            "text": "Overloads:  1",
            "title": "middle"
        },
        {
            "location": "/language/functions/#middle-action",
            "text": "Runs a pattern if the current block iteration is neither the first nor last.  Parameters     Name  Type  Description      action  Pattern  The pattern to run when the condition is met.",
            "title": "[middle: action]"
        },
        {
            "location": "/language/functions/#mod",
            "text": "Overloads:  1",
            "title": "mod"
        },
        {
            "location": "/language/functions/#mod-a-b",
            "text": "Parameters     Name  Type  Description      a  Number  No description    b  Number  No description",
            "title": "[mod: a; b]"
        },
        {
            "location": "/language/functions/#mul",
            "text": "Overloads:  1",
            "title": "mul"
        },
        {
            "location": "/language/functions/#mul-a-b",
            "text": "Prints the product of the specified numbers.  Parameters     Name  Type  Description      a  Number  The first operand.    b  Number  The second operand.",
            "title": "[mul: a; b]"
        },
        {
            "location": "/language/functions/#nand",
            "text": "Overloads:  1",
            "title": "nand"
        },
        {
            "location": "/language/functions/#nand-a-b",
            "text": "Parameters     Name  Type  Description      a  Boolean  No description    b...  Boolean  No description",
            "title": "[nand: a; b...]"
        },
        {
            "location": "/language/functions/#ne",
            "text": "Overloads:  1",
            "title": "ne"
        },
        {
            "location": "/language/functions/#ne-a-b",
            "text": "Prints a boolean value indicating whether the two values do not have equal string representations.  Parameters     Name  Type  Description      a  String  No description    b  String  No description",
            "title": "[ne: a; b]"
        },
        {
            "location": "/language/functions/#nei",
            "text": "Overloads:  1",
            "title": "nei"
        },
        {
            "location": "/language/functions/#nei-a-b",
            "text": "Prints a boolean value indicating whether two values do not have equal string representations, ignoring case.  Parameters     Name  Type  Description      a  String  No description    b  String  No description",
            "title": "[nei: a; b]"
        },
        {
            "location": "/language/functions/#not",
            "text": "Overloads:  1",
            "title": "not"
        },
        {
            "location": "/language/functions/#not-a",
            "text": "Parameters     Name  Type  Description      a  Boolean  No description",
            "title": "[not: a]"
        },
        {
            "location": "/language/functions/#notfirst",
            "text": "Overloads:  1",
            "title": "notfirst"
        },
        {
            "location": "/language/functions/#notfirst-action",
            "text": "Runs a pattern if the current block iteration is not the first.  Parameters     Name  Type  Description      action  Pattern  The pattern to run when the condition is met.",
            "title": "[notfirst: action]"
        },
        {
            "location": "/language/functions/#notlast",
            "text": "Overloads:  1",
            "title": "notlast"
        },
        {
            "location": "/language/functions/#notlast-action",
            "text": "Runs a pattern if the current block iteration is not the last.  Parameters     Name  Type  Description      action  Pattern  The pattern to run when the condition is met.",
            "title": "[notlast: action]"
        },
        {
            "location": "/language/functions/#notnth",
            "text": "Overloads:  1",
            "title": "notnth"
        },
        {
            "location": "/language/functions/#notnth-interval-pattern",
            "text": "Runs a pattern if the current block iteration is not a multiple of the specified number.  Parameters     Name  Type  Description      interval  Number  The interval at which the pattern should not be run.    pattern  Pattern  The pattern to run when the condition is satisfied.",
            "title": "[notnth: interval; pattern]"
        },
        {
            "location": "/language/functions/#notntho",
            "text": "Overloads:  1",
            "title": "notntho"
        },
        {
            "location": "/language/functions/#notntho-interval-offset-pattern",
            "text": "Runs a pattern if the current block iteration is not a multiple of the specified number offset by a specific amount.  Parameters     Name  Type  Description      interval  Number  The interval at which the pattern should not be run.    offset  Number  The number of iterations to offset the interval by.    pattern  Pattern  The pattern to run when the condition is satisfied.",
            "title": "[notntho: interval; offset; pattern]"
        },
        {
            "location": "/language/functions/#nth",
            "text": "Overloads:  1",
            "title": "nth"
        },
        {
            "location": "/language/functions/#nth-interval-pattern",
            "text": "Runs a pattern if the current block iteration is a multiple of the specified number.  Parameters     Name  Type  Description      interval  Number  The interval at which the pattern should be run.    pattern  Pattern  The pattern to run when the condition is satisfied.",
            "title": "[nth: interval; pattern]"
        },
        {
            "location": "/language/functions/#ntho",
            "text": "Overloads:  1",
            "title": "ntho"
        },
        {
            "location": "/language/functions/#ntho-interval-offset-pattern",
            "text": "Runs a pattern if the current block iteration is a multiple of the specified number offset by a specific amount.  Parameters     Name  Type  Description      interval  Number  The interval at which the pattern should be run.    offset  Number  The number of iterations to offset the interval by.    pattern  Pattern  The pattern to run when the condition is satisfied.",
            "title": "[ntho: interval; offset; pattern]"
        },
        {
            "location": "/language/functions/#num",
            "text": "Aliases:   n Overloads:  2",
            "title": "num"
        },
        {
            "location": "/language/functions/#num-input",
            "text": "Formats an input string using the current number format settings and prints the result.  Parameters     Name  Type  Description      input  String  The string to convert into a number.",
            "title": "[num: input]"
        },
        {
            "location": "/language/functions/#num-min-max",
            "text": "Prints a random number between the specified minimum and maximum bounds.  Parameters     Name  Type  Description      min  Number  The minimum value of the number to generate.    max  Number  The maximum value of the number to generate.",
            "title": "[num: min; max]"
        },
        {
            "location": "/language/functions/#numfmt",
            "text": "Overloads:  2",
            "title": "numfmt"
        },
        {
            "location": "/language/functions/#numfmt-format",
            "text": "Sets the current number formatting mode.  Parameters     Name  Type  Description      format  Mode  The number format to use. normal No special formatting. group Group digits with the system's digit separator. group-commas Group digits by commas. group-dots Group digits by dots. roman Uppercase Roman numerals. roman-upper Uppercase Roman numerals. roman-lower Lowercase Roman numerals. verbal Number verbalization. Only works with integers. hex Uppercase hexadecimal. hex-upper Uppercase hexadecimal. hex-lower Lowercase hexadecimal. binary Robot language.",
            "title": "[numfmt: format]"
        },
        {
            "location": "/language/functions/#numfmt-format-range-action",
            "text": "Runs the specified pattern under a specific number formatting mode.  Parameters     Name  Type  Description      format  Mode  The number format to use. normal No special formatting. group Group digits with the system's digit separator. group-commas Group digits by commas. group-dots Group digits by dots. roman Uppercase Roman numerals. roman-upper Uppercase Roman numerals. roman-lower Lowercase Roman numerals. verbal Number verbalization. Only works with integers. hex Uppercase hexadecimal. hex-upper Uppercase hexadecimal. hex-lower Lowercase hexadecimal. binary Robot language.    range-action  Pattern  The pattern to run.",
            "title": "[numfmt: format; range-action]"
        },
        {
            "location": "/language/functions/#odd",
            "text": "Overloads:  1",
            "title": "odd"
        },
        {
            "location": "/language/functions/#odd-action",
            "text": "Runs a pattern if the current block iteration is an odd number.  Parameters     Name  Type  Description      action  Pattern  The pattern to run when the condition is met.",
            "title": "[odd: action]"
        },
        {
            "location": "/language/functions/#or",
            "text": "Overloads:  1",
            "title": "or"
        },
        {
            "location": "/language/functions/#or-a-b",
            "text": "Parameters     Name  Type  Description      a  Boolean  No description    b...  Boolean  No description",
            "title": "[or: a; b...]"
        },
        {
            "location": "/language/functions/#pipe",
            "text": "Overloads:  1",
            "title": "pipe"
        },
        {
            "location": "/language/functions/#pipe-redirect-callback",
            "text": "Redirects the output from the next block into the specified callback. Access block output with [item].  Parameters     Name  Type  Description      redirect-callback  Pattern  The callback to redirect block output to.",
            "title": "[pipe: redirect-callback]"
        },
        {
            "location": "/language/functions/#plural",
            "text": "Aliases:   pl Overloads:  1",
            "title": "plural"
        },
        {
            "location": "/language/functions/#plural-word",
            "text": "Infers and prints the plural form of the specified word.  Parameters     Name  Type  Description      word  String  No description",
            "title": "[plural: word]"
        },
        {
            "location": "/language/functions/#protect",
            "text": "Overloads:  1",
            "title": "protect"
        },
        {
            "location": "/language/functions/#protect-pattern",
            "text": "Spawns a new block attribute context for the specified callback so any blocks therein will not consume the current attributes.  Parameters     Name  Type  Description      pattern  Pattern  The callback to protect.",
            "title": "[protect: pattern]"
        },
        {
            "location": "/language/functions/#qcc",
            "text": "Overloads:  1",
            "title": "qcc"
        },
        {
            "location": "/language/functions/#qcc-id-component-id-component-type",
            "text": "Adds a carrier component to a constructed query.  Parameters     Name  Type  Description      id  String  The ID string for the constructed query.    component-id  String  The ID to assign to the carrier component.    component-type  Mode  The component type. match dissociative match-dissociative associative match-associative divergent match-divergent relational match-relational unique match-unique rhyme",
            "title": "[qcc: id; component-id; component-type]"
        },
        {
            "location": "/language/functions/#qcf",
            "text": "Overloads:  1",
            "title": "qcf"
        },
        {
            "location": "/language/functions/#qcf-id-classes",
            "text": "Adds positive class filters to a constructed query.  Parameters     Name  Type  Description      id  String  The ID string for the constructed query.    classes...  String  The names of the classes that the returned entry must belong to.",
            "title": "[qcf: id; classes...]"
        },
        {
            "location": "/language/functions/#qcfn",
            "text": "Overloads:  1",
            "title": "qcfn"
        },
        {
            "location": "/language/functions/#qcfn-id-classes",
            "text": "Adds negative class filters to a constructed query.  Parameters     Name  Type  Description      id  String  The ID string for the constructed query.    classes...  String  The names of the classes that the returned entry must not belong to.",
            "title": "[qcfn: id; classes...]"
        },
        {
            "location": "/language/functions/#qdel",
            "text": "Overloads:  1",
            "title": "qdel"
        },
        {
            "location": "/language/functions/#qdel-id",
            "text": "Removes all stored data associated with the specified constructed query ID.  Parameters     Name  Type  Description      id  String  The ID string for the constructed query.",
            "title": "[qdel: id]"
        },
        {
            "location": "/language/functions/#qexists",
            "text": "Overloads:  1",
            "title": "qexists"
        },
        {
            "location": "/language/functions/#qexists-id",
            "text": "Prints a boolean value indicating whether a constructed query with the specified ID exists.  Parameters     Name  Type  Description      id  String  The ID string for the constructed query.",
            "title": "[qexists: id]"
        },
        {
            "location": "/language/functions/#qhas",
            "text": "Overloads:  1",
            "title": "qhas"
        },
        {
            "location": "/language/functions/#qhas-id-regex-pattern-options",
            "text": "Adds a positive regex filter to a constructed query.  Parameters     Name  Type  Description      id  String  The ID string for the constructed query.    regex-pattern  String  The regex pattern for the filter.    options  String  The regex option string for the filter.",
            "title": "[qhas: id; regex-pattern; options]"
        },
        {
            "location": "/language/functions/#qhasno",
            "text": "Overloads:  1",
            "title": "qhasno"
        },
        {
            "location": "/language/functions/#qhasno-id-regex-pattern-options",
            "text": "Adds a positive regex filter to a constructed query.  Parameters     Name  Type  Description      id  String  The ID string for the constructed query.    regex-pattern  String  The regex pattern for the filter.    options  String  The regex option string for the filter.",
            "title": "[qhasno: id; regex-pattern; options]"
        },
        {
            "location": "/language/functions/#qname",
            "text": "Overloads:  1",
            "title": "qname"
        },
        {
            "location": "/language/functions/#qname-id-name",
            "text": "Sets the table name for a constructed query.  Parameters     Name  Type  Description      id  String  The ID string for the constructed query.    name  String  The name of the table.",
            "title": "[qname: id; name]"
        },
        {
            "location": "/language/functions/#qphr",
            "text": "Overloads:  1",
            "title": "qphr"
        },
        {
            "location": "/language/functions/#qphr-id-complement",
            "text": "Adds a phrasal complement to a constructed query.  Parameters     Name  Type  Description      id  String  The ID string for the constructed query.    complement  Pattern  The phrasal complement pattern.",
            "title": "[qphr: id; complement]"
        },
        {
            "location": "/language/functions/#qsub",
            "text": "Overloads:  1",
            "title": "qsub"
        },
        {
            "location": "/language/functions/#qsub-id-subtype",
            "text": "Sets the subtype for a constructed query.  Parameters     Name  Type  Description      id  String  The ID string for the constructed query.    subtype  String  The subtype of the term to select from the returned entry.",
            "title": "[qsub: id; subtype]"
        },
        {
            "location": "/language/functions/#qsubp",
            "text": "Overloads:  1",
            "title": "qsubp"
        },
        {
            "location": "/language/functions/#qsubp-id-plural-subtype",
            "text": "Sets the plural subtype for a constructed query.  Parameters     Name  Type  Description      id  String  The ID string for the constructed query.    plural-subtype  String  The subtype of the term to select from the returned entry, if the plural flag is set.",
            "title": "[qsubp: id; plural-subtype]"
        },
        {
            "location": "/language/functions/#qsyl",
            "text": "Overloads:  2",
            "title": "qsyl"
        },
        {
            "location": "/language/functions/#qsyl-id-syllables",
            "text": "Adds an syllable count range filter to a constructed query that defines an absolute syllable count.  Parameters     Name  Type  Description      id  String  The ID string for the constructed query.    syllables  Number  The number of syllables.",
            "title": "[qsyl: id; syllables]"
        },
        {
            "location": "/language/functions/#qsyl-id-min-syllables-max-syllables",
            "text": "Adds a syllable count range filter to a constructed query.  Parameters     Name  Type  Description      id  String  The ID string for the constructed query.    min-syllables  Number  The minimum syllable count.    max-syllables  Number  The maximum syllable count.",
            "title": "[qsyl: id; min-syllables; max-syllables]"
        },
        {
            "location": "/language/functions/#qsylmax",
            "text": "Overloads:  1",
            "title": "qsylmax"
        },
        {
            "location": "/language/functions/#qsylmax-id-max-syllables",
            "text": "Adds a syllable count range filter to a constructed query that defines only a maximum bound.  Parameters     Name  Type  Description      id  String  The ID string for the constructed query.    max-syllables  Number  The maximum syllable count.",
            "title": "[qsylmax: id; max-syllables]"
        },
        {
            "location": "/language/functions/#qsylmin",
            "text": "Overloads:  1",
            "title": "qsylmin"
        },
        {
            "location": "/language/functions/#qsylmin-id-min-syllables",
            "text": "Adds a syllable count range filter to a constructed query that defines only a minimum bound.  Parameters     Name  Type  Description      id  String  The ID string for the constructed query.    min-syllables  Number  The minimum syllable count.",
            "title": "[qsylmin: id; min-syllables]"
        },
        {
            "location": "/language/functions/#query",
            "text": "Aliases:   q Overloads:  2",
            "title": "query"
        },
        {
            "location": "/language/functions/#query_1",
            "text": "Runs the last-accessed constructed query.",
            "title": "[query]"
        },
        {
            "location": "/language/functions/#query-id",
            "text": "Runs the constructed query with the specified identifier.  Parameters     Name  Type  Description      id  String  The ID string for the constructed query.",
            "title": "[query: id]"
        },
        {
            "location": "/language/functions/#quote",
            "text": "Aliases:   quot Overloads:  1",
            "title": "quote"
        },
        {
            "location": "/language/functions/#quote-quote-action",
            "text": "Surrounds the specified pattern in quotes. Nested quotes use the secondary quotes defined in the format settings.  Parameters     Name  Type  Description      quote-action  Pattern  The pattern to run whose output will be surrounded in quotes.",
            "title": "[quote: quote-action]"
        },
        {
            "location": "/language/functions/#rcc",
            "text": "Overloads:  1",
            "title": "rcc"
        },
        {
            "location": "/language/functions/#rcc-ids",
            "text": "Resets the specified carrier components.  Parameters     Name  Type  Description      ids...  String  The list of carrier component identifiers to reset.",
            "title": "[rcc: ids...]"
        },
        {
            "location": "/language/functions/#reg",
            "text": "Overloads:  1",
            "title": "reg"
        },
        {
            "location": "/language/functions/#reg_1",
            "text": "Prints the registered trademark symbol.",
            "title": "[reg]"
        },
        {
            "location": "/language/functions/#rep",
            "text": "Aliases:   r Overloads:  1",
            "title": "rep"
        },
        {
            "location": "/language/functions/#rep-times",
            "text": "Sets the repetition count for the next block.  Parameters     Name  Type  Description      times  Number  The number of times to repeat the next block.",
            "title": "[rep: times]"
        },
        {
            "location": "/language/functions/#repcount",
            "text": "Aliases:   rc Overloads:  1",
            "title": "repcount"
        },
        {
            "location": "/language/functions/#repcount_1",
            "text": "Prints the repetition count of the current block.",
            "title": "[repcount]"
        },
        {
            "location": "/language/functions/#repeach",
            "text": "Overloads:  1",
            "title": "repeach"
        },
        {
            "location": "/language/functions/#repeach_1",
            "text": "Sets the repetition count to the number of items in the next block.",
            "title": "[repeach]"
        },
        {
            "location": "/language/functions/#repelapsed",
            "text": "Aliases:   re Overloads:  1",
            "title": "repelapsed"
        },
        {
            "location": "/language/functions/#repelapsed_1",
            "text": "Prints the number of iterations remaining to be performed on the current block.",
            "title": "[repelapsed]"
        },
        {
            "location": "/language/functions/#repnum",
            "text": "Aliases:   rn Overloads:  1",
            "title": "repnum"
        },
        {
            "location": "/language/functions/#repnum_1",
            "text": "Prints the iteration number of the current block.",
            "title": "[repnum]"
        },
        {
            "location": "/language/functions/#repqueued",
            "text": "Aliases:   rq Overloads:  1",
            "title": "repqueued"
        },
        {
            "location": "/language/functions/#repqueued_1",
            "text": "Prints the number of repetitions remaining to be completed on the current block.",
            "title": "[repqueued]"
        },
        {
            "location": "/language/functions/#reprem",
            "text": "Aliases:   rr Overloads:  1",
            "title": "reprem"
        },
        {
            "location": "/language/functions/#reprem_1",
            "text": "Prints the number of remaining repetitions queued after the current one.",
            "title": "[reprem]"
        },
        {
            "location": "/language/functions/#require",
            "text": "Overloads:  1",
            "title": "require"
        },
        {
            "location": "/language/functions/#require-name",
            "text": "Loads and runs a pattern from cache or file.  Parameters     Name  Type  Description      name  String  The name or path of the pattern to load.",
            "title": "[require: name]"
        },
        {
            "location": "/language/functions/#rev",
            "text": "Overloads:  1",
            "title": "rev"
        },
        {
            "location": "/language/functions/#rev-input",
            "text": "Reverses the specified string and prints it to the output.  Parameters     Name  Type  Description      input  String  The string to reverse.",
            "title": "[rev: input]"
        },
        {
            "location": "/language/functions/#revx",
            "text": "Overloads:  1",
            "title": "revx"
        },
        {
            "location": "/language/functions/#revx-input",
            "text": "Reverses the specified string and inverts common brackets and quotation marks, then prints the result to the output.  Parameters     Name  Type  Description      input  String  The string to reverse.",
            "title": "[revx: input]"
        },
        {
            "location": "/language/functions/#rhyme",
            "text": "Overloads:  1",
            "title": "rhyme"
        },
        {
            "location": "/language/functions/#rhyme-flags",
            "text": "Sets the current rhyming mode for queries.  Parameters     Name  Type  Description      flags  Flags  The rhyme types to use. perfect Everything after the first stressed vowel matches in pronunciation (picky / icky). weak The penultimate syllable is stressed and the final syllable rhymes (coffin / raisin). syllabic The final syllable rhymes (senator / otter). semirhyme The words would rhyme if not for the final syllable (broom / broomstick). forced The words might rhyme if you really pushed it. slant-rhyme The ending consonants are the same (rant / ant). pararhyme All the consonants match (tuna / teen). alliteration All consonants up to the first vowel rhyme (dog / dude).",
            "title": "[rhyme: flags]"
        },
        {
            "location": "/language/functions/#ring",
            "text": "Overloads:  1",
            "title": "ring"
        },
        {
            "location": "/language/functions/#ring-character",
            "text": "Accents the specified character with a ring (a\u030a) accent.  Parameters     Name  Type  Description      character  String  No description",
            "title": "[ring: character]"
        },
        {
            "location": "/language/functions/#rs",
            "text": "Overloads:  1",
            "title": "rs"
        },
        {
            "location": "/language/functions/#rs-times-separator",
            "text": "Sets the repetitions and separator for the next block. A combination of rep and sep.  Parameters     Name  Type  Description      times  Number  The number of times to repeat the next block.    separator  Pattern  The separator pattern to run between iterations of the next block.",
            "title": "[rs: times; separator]"
        },
        {
            "location": "/language/functions/#rvl",
            "text": "Overloads:  1",
            "title": "rvl"
        },
        {
            "location": "/language/functions/#rvl-var-names",
            "text": "Rotates the values of a list of variables once to the left.  Parameters     Name  Type  Description      var-names...  String  The list of the names of variables whose values will be rotated in order.",
            "title": "[rvl: var-names...]"
        },
        {
            "location": "/language/functions/#rvr",
            "text": "Overloads:  1",
            "title": "rvr"
        },
        {
            "location": "/language/functions/#rvr-var-names",
            "text": "Rotates the values of a list of variables once to the right.  Parameters     Name  Type  Description      var-names...  String  The list of the names of variables whose values will be rotated in order.",
            "title": "[rvr: var-names...]"
        },
        {
            "location": "/language/functions/#send",
            "text": "Overloads:  1",
            "title": "send"
        },
        {
            "location": "/language/functions/#send-target-name-value",
            "text": "Appends a string to the specified target's contents.  Parameters     Name  Type  Description      target-name  String  The name of the target to send to.    value  String  The string to send to the target.",
            "title": "[send: target-name; value]"
        },
        {
            "location": "/language/functions/#sendover",
            "text": "Overloads:  1",
            "title": "sendover"
        },
        {
            "location": "/language/functions/#sendover-target-name-value",
            "text": "Overwrites the specified target's contents with the provided value.  Parameters     Name  Type  Description      target-name  String  The name of the target to send to.    value  String  The string to send to the target.",
            "title": "[sendover: target-name; value]"
        },
        {
            "location": "/language/functions/#sep",
            "text": "Aliases:   s Overloads:  4",
            "title": "sep"
        },
        {
            "location": "/language/functions/#sep_1",
            "text": "",
            "title": "[sep]"
        },
        {
            "location": "/language/functions/#sep-separator",
            "text": "Sets the separator pattern for the next block.  Parameters     Name  Type  Description      separator  Pattern  The separator pattern to run between iterations of the next block.",
            "title": "[sep: separator]"
        },
        {
            "location": "/language/functions/#sep-separator-conjunction",
            "text": "Flags the next block as a series and sets the separator and conjunction patterns.  Parameters     Name  Type  Description      separator  Pattern  The separator pattern to run between items.    conjunction  Pattern  The conjunction pattern to run before the last item.",
            "title": "[sep: separator; conjunction]"
        },
        {
            "location": "/language/functions/#sep-separator-oxford-conjunction",
            "text": "Sets the separator, Oxford comma, and conjunction patterns for the next series.  Parameters     Name  Type  Description      separator  Pattern  The separator pattern to run between items.    oxford  Pattern  The Oxford comma pattern to run before the last item.    conjunction  Pattern  The conjunction pattern to run before the last item in the series.",
            "title": "[sep: separator; oxford; conjunction]"
        },
        {
            "location": "/language/functions/#split",
            "text": "Overloads:  2",
            "title": "split"
        },
        {
            "location": "/language/functions/#split-list-name-input",
            "text": "Splits the specified string into a list of chars.  Parameters     Name  Type  Description      list-name  String  The name of the variable that will contain the output list.    input  String  The string to split.",
            "title": "[split: list-name; input]"
        },
        {
            "location": "/language/functions/#split-list-name-delimiter-input",
            "text": "Splits the specified string by the given delimiter.  Parameters     Name  Type  Description      list-name  String  The name of the variable that will contain the output list.    delimiter  String  The delimiter.    input  String  The string to split.",
            "title": "[split: list-name; delimiter; input]"
        },
        {
            "location": "/language/functions/#ss",
            "text": "Overloads:  1",
            "title": "ss"
        },
        {
            "location": "/language/functions/#ss_1",
            "text": "Prints an eszett (\u00df).",
            "title": "[ss]"
        },
        {
            "location": "/language/functions/#start",
            "text": "Overloads:  1",
            "title": "start"
        },
        {
            "location": "/language/functions/#start-before-pattern",
            "text": "Sets a pattern that will run before the next block.  Parameters     Name  Type  Description      before-pattern  Pattern  The pattern to run before the next block.",
            "title": "[start: before-pattern]"
        },
        {
            "location": "/language/functions/#sub",
            "text": "Overloads:  1",
            "title": "sub"
        },
        {
            "location": "/language/functions/#sub-a-b",
            "text": "Prints the difference of the specified values.  Parameters     Name  Type  Description      a  Number  The first operand.    b  Number  The second operand.",
            "title": "[sub: a; b]"
        },
        {
            "location": "/language/functions/#swap",
            "text": "Overloads:  1",
            "title": "swap"
        },
        {
            "location": "/language/functions/#swap-a-b",
            "text": "Swaps the values of the variables with the two specified names.  Parameters     Name  Type  Description      a  String  The name of the first variable.    b  String  The name of the second variable.",
            "title": "[swap: a; b]"
        },
        {
            "location": "/language/functions/#switch",
            "text": "Overloads:  1",
            "title": "switch"
        },
        {
            "location": "/language/functions/#switch-input-case-pairs",
            "text": "Parameters     Name  Type  Description      input  String  No description    case-pairs...  Pattern  No description",
            "title": "[switch: input; case-pairs...]"
        },
        {
            "location": "/language/functions/#sync",
            "text": "Aliases:   x Overloads:  1",
            "title": "sync"
        },
        {
            "location": "/language/functions/#sync-name-type",
            "text": "Creates and applies a synchronizer with the specified name and type.  Parameters     Name  Type  Description      name  String  The name of the synchronizer.    type  Mode  The synchronization type to use. none A random element is selected each time. forward Executes from left to right. reverse Executes from right to left. deck Shuffles items and executes in order. Re-shuffled each time all items are used up. cdeck Shuffles items and executes in order. The same order is reused for each traversal. locked Chosen randomly, the same element is selected each time. ping Starting at the first item, iterates through all elements in order and then reverses without repeating boundary elements. pong Starting at the last item, iterates through all elements backwards and then reverses without repeating boundary elements. no-repeat The same element will never be chosen twice in a row, as long as the block contains at least two elements.",
            "title": "[sync: name; type]"
        },
        {
            "location": "/language/functions/#target",
            "text": "Aliases:   t Overloads:  1",
            "title": "target"
        },
        {
            "location": "/language/functions/#target-target-name",
            "text": "Places a target with the specified name at the current write position.  Parameters     Name  Type  Description      target-name  String  The name of the target.",
            "title": "[target: target-name]"
        },
        {
            "location": "/language/functions/#targetval",
            "text": "Overloads:  1",
            "title": "targetval"
        },
        {
            "location": "/language/functions/#targetval-target-name",
            "text": "Prints the current value of the specified target. This function will not spawn a target.  Parameters     Name  Type  Description      target-name  String  The name of the target whose value to print.",
            "title": "[targetval: target-name]"
        },
        {
            "location": "/language/functions/#then",
            "text": "Overloads:  1",
            "title": "then"
        },
        {
            "location": "/language/functions/#then-condition-pass-pattern",
            "text": "Executes a pattern if the current flag condition passes.  Parameters     Name  Type  Description      condition-pass-pattern  Pattern  No description",
            "title": "[then: condition-pass-pattern]"
        },
        {
            "location": "/language/functions/#tilde",
            "text": "Aliases:   tld Overloads:  1",
            "title": "tilde"
        },
        {
            "location": "/language/functions/#tilde-character",
            "text": "Accents the specified character with a tilde (a\u0303) accent.  Parameters     Name  Type  Description      character  String  No description",
            "title": "[tilde: character]"
        },
        {
            "location": "/language/functions/#tm",
            "text": "Overloads:  1",
            "title": "tm"
        },
        {
            "location": "/language/functions/#tm_1",
            "text": "Prints the trademark symbol.",
            "title": "[tm]"
        },
        {
            "location": "/language/functions/#toggle",
            "text": "Overloads:  1",
            "title": "toggle"
        },
        {
            "location": "/language/functions/#toggle-flags",
            "text": "Toggles the specified flags.  Parameters     Name  Type  Description      flags...  String  No description",
            "title": "[toggle: flags...]"
        },
        {
            "location": "/language/functions/#txtfmt",
            "text": "Overloads:  1",
            "title": "txtfmt"
        },
        {
            "location": "/language/functions/#txtfmt-format",
            "text": "Sets the text conversion format for all open channels.  Parameters     Name  Type  Description      format  Mode  The conversion mode to use. none No conversion. fullwidth Fullwidth characters. cursive Cursive script. bold-cursive Bold cursive script.",
            "title": "[txtfmt: format]"
        },
        {
            "location": "/language/functions/#typeof",
            "text": "Overloads:  1",
            "title": "typeof"
        },
        {
            "location": "/language/functions/#typeof-name",
            "text": "Gets the type of the specified variable.  Parameters     Name  Type  Description      name  String  No description",
            "title": "[typeof: name]"
        },
        {
            "location": "/language/functions/#undef",
            "text": "Overloads:  1",
            "title": "undef"
        },
        {
            "location": "/language/functions/#undef-flags",
            "text": "Undefines the specified flags.  Parameters     Name  Type  Description      flags...  String  The list of flags to undefine.",
            "title": "[undef: flags...]"
        },
        {
            "location": "/language/functions/#v",
            "text": "Overloads:  1",
            "title": "v"
        },
        {
            "location": "/language/functions/#v-name",
            "text": "Prints the value of the specified variable.  Parameters     Name  Type  Description      name  String  The name of the variable to retrieve.",
            "title": "[v: name]"
        },
        {
            "location": "/language/functions/#vadd",
            "text": "Overloads:  1",
            "title": "vadd"
        },
        {
            "location": "/language/functions/#vadd-a-b",
            "text": "Adds a number to the specified variable.  Parameters     Name  Type  Description      a  String  The name of the variable to add to.    b  Number  The value to add.",
            "title": "[vadd: a; b]"
        },
        {
            "location": "/language/functions/#vb",
            "text": "Overloads:  1",
            "title": "vb"
        },
        {
            "location": "/language/functions/#vb-name-value",
            "text": "Creates a new string variable with the specified name and value.  Parameters     Name  Type  Description      name  String  The name of the variable.    value  Boolean  The value of the variable.",
            "title": "[vb: name; value]"
        },
        {
            "location": "/language/functions/#vcpy",
            "text": "Overloads:  1",
            "title": "vcpy"
        },
        {
            "location": "/language/functions/#vcpy-a-b",
            "text": "Copies the value of the variable with the first name to the variable with the second name.  Parameters     Name  Type  Description      a  String  The variable to copy from.    b  String  The variable to copy to.",
            "title": "[vcpy: a; b]"
        },
        {
            "location": "/language/functions/#vdiv",
            "text": "Overloads:  1",
            "title": "vdiv"
        },
        {
            "location": "/language/functions/#vdiv-a-b",
            "text": "Divides the specified variable by a number.  Parameters     Name  Type  Description      a  String  The name of the variable to divide.    b  Number  The divisor.",
            "title": "[vdiv: a; b]"
        },
        {
            "location": "/language/functions/#veq",
            "text": "Overloads:  1",
            "title": "veq"
        },
        {
            "location": "/language/functions/#veq-a-b",
            "text": "Prints a boolean value indicating whether the variables with the two specified names are equal to each other.  Parameters     Name  Type  Description      a  RantObject  No description    b  RantObject  No description",
            "title": "[veq: a; b]"
        },
        {
            "location": "/language/functions/#vexists",
            "text": "Overloads:  1",
            "title": "vexists"
        },
        {
            "location": "/language/functions/#vexists-name",
            "text": "Prints a boolean value indicating whether a variable with the specified name exists.  Parameters     Name  Type  Description      name  String  The name of the variable to check.",
            "title": "[vexists: name]"
        },
        {
            "location": "/language/functions/#vl",
            "text": "Overloads:  2",
            "title": "vl"
        },
        {
            "location": "/language/functions/#vl-name",
            "text": "Creates a new list.  Parameters     Name  Type  Description      name  String  The name of the list.",
            "title": "[vl: name]"
        },
        {
            "location": "/language/functions/#vl-name-length",
            "text": "Creates a new list with a specified length.  Parameters     Name  Type  Description      name  String  The name of the list.    length  Number  The length of the list.",
            "title": "[vl: name; length]"
        },
        {
            "location": "/language/functions/#vlen",
            "text": "Overloads:  1",
            "title": "vlen"
        },
        {
            "location": "/language/functions/#vlen-obj",
            "text": "Gets the length of the specified variable.  Parameters     Name  Type  Description      obj  RantObject  No description",
            "title": "[vlen: obj]"
        },
        {
            "location": "/language/functions/#vmod",
            "text": "Overloads:  1",
            "title": "vmod"
        },
        {
            "location": "/language/functions/#vmod-a-b",
            "text": "Parameters     Name  Type  Description      a  String  No description    b  Number  No description",
            "title": "[vmod: a; b]"
        },
        {
            "location": "/language/functions/#vmul",
            "text": "Overloads:  1",
            "title": "vmul"
        },
        {
            "location": "/language/functions/#vmul-a-b",
            "text": "Multiplies the specified variable by a number.  Parameters     Name  Type  Description      a  String  The name of the variable to multiply.    b  Number  The value to multiply by.",
            "title": "[vmul: a; b]"
        },
        {
            "location": "/language/functions/#vn",
            "text": "Overloads:  2",
            "title": "vn"
        },
        {
            "location": "/language/functions/#vn-name-value",
            "text": "Creates a new number variable with the specified name and value.  Parameters     Name  Type  Description      name  String  The name of the variable.    value  Number  The value of the variable.",
            "title": "[vn: name; value]"
        },
        {
            "location": "/language/functions/#vn-name-min-max",
            "text": "Creates a new number variable with a random value between the specified minimum and maximum bounds.  Parameters     Name  Type  Description      name  String  The name of the variable.    min  Number  The minimum bound of the value.    max  Number  The maximum bound of the value.",
            "title": "[vn: name; min; max]"
        },
        {
            "location": "/language/functions/#vne",
            "text": "Overloads:  1",
            "title": "vne"
        },
        {
            "location": "/language/functions/#vne-a-b",
            "text": "Prints a boolean value indicating whether the variables with the two specified names are not equal to each other.  Parameters     Name  Type  Description      a  RantObject  No description    b  RantObject  No description",
            "title": "[vne: a; b]"
        },
        {
            "location": "/language/functions/#vnot",
            "text": "Overloads:  1",
            "title": "vnot"
        },
        {
            "location": "/language/functions/#vnot-a",
            "text": "Parameters     Name  Type  Description      a  String  No description",
            "title": "[vnot: a]"
        },
        {
            "location": "/language/functions/#vp",
            "text": "Overloads:  1",
            "title": "vp"
        },
        {
            "location": "/language/functions/#vp-name-value",
            "text": "Creates a new pattern variable with the specified callback.  Parameters     Name  Type  Description      name  String  The name of the variable.    value  Pattern  The value of the variable.",
            "title": "[vp: name; value]"
        },
        {
            "location": "/language/functions/#vs",
            "text": "Overloads:  1",
            "title": "vs"
        },
        {
            "location": "/language/functions/#vs-name-value",
            "text": "Creates a new string variable with the specified name and value.  Parameters     Name  Type  Description      name  String  The name of the variable.    value  String  The value of the variable.",
            "title": "[vs: name; value]"
        },
        {
            "location": "/language/functions/#vsub",
            "text": "Overloads:  1",
            "title": "vsub"
        },
        {
            "location": "/language/functions/#vsub-a-b",
            "text": "Subtracts a number from the specified variable.  Parameters     Name  Type  Description      a  String  The name of the variable to subtract from.    b  Number  The value to subtract.",
            "title": "[vsub: a; b]"
        },
        {
            "location": "/language/functions/#while",
            "text": "Aliases:   loop Overloads:  1",
            "title": "while"
        },
        {
            "location": "/language/functions/#while-condition-body",
            "text": "Runs the body over and over while condition remains true.  Parameters     Name  Type  Description      condition  Pattern  The condition to check each iteration.    body  Pattern  The body of the loop.",
            "title": "[while: condition; body]"
        },
        {
            "location": "/language/functions/#xdel",
            "text": "Overloads:  1",
            "title": "xdel"
        },
        {
            "location": "/language/functions/#xdel-name",
            "text": "Deletes a synchronizer.  Parameters     Name  Type  Description      name  String  The name of the synchronizer to delete.",
            "title": "[xdel: name]"
        },
        {
            "location": "/language/functions/#xor",
            "text": "Overloads:  1",
            "title": "xor"
        },
        {
            "location": "/language/functions/#xor-a-b",
            "text": "Parameters     Name  Type  Description      a  Boolean  No description    b...  Boolean  No description",
            "title": "[xor: a; b...]"
        },
        {
            "location": "/language/functions/#xpin",
            "text": "Overloads:  1",
            "title": "xpin"
        },
        {
            "location": "/language/functions/#xpin-name",
            "text": "Pins a synchronizer.  Parameters     Name  Type  Description      name  String  The name of the synchronizer to pin.",
            "title": "[xpin: name]"
        },
        {
            "location": "/language/functions/#xreset",
            "text": "Overloads:  1",
            "title": "xreset"
        },
        {
            "location": "/language/functions/#xreset-name",
            "text": "Resets a synchronizer to its initial state.  Parameters     Name  Type  Description      name  String  The name of the synchronizer to reset.",
            "title": "[xreset: name]"
        },
        {
            "location": "/language/functions/#xstep",
            "text": "Overloads:  1",
            "title": "xstep"
        },
        {
            "location": "/language/functions/#xstep-name",
            "text": "Iterates a synchronizer.  Parameters     Name  Type  Description      name  String  The name of the synchronizer to iterate.",
            "title": "[xstep: name]"
        },
        {
            "location": "/language/functions/#xunpin",
            "text": "Overloads:  1",
            "title": "xunpin"
        },
        {
            "location": "/language/functions/#xunpin-name",
            "text": "Unpins a synchronizer.  Parameters     Name  Type  Description      name  String  The name of the synchronizer to unpin.",
            "title": "[xunpin: name]"
        },
        {
            "location": "/language/functions/#yield",
            "text": "Overloads:  1",
            "title": "yield"
        },
        {
            "location": "/language/functions/#yield_1",
            "text": "Yields the currenty written output.",
            "title": "[yield]"
        },
        {
            "location": "/language/blocks/",
            "text": "Blocks\n are sections of a pattern, consisting of one or more sequential parts,\nwhich are subject to branching behavior. Blocks are surrounded with braces.\n\n\nBasic usage\n[link]\n\n\nBlocks may occupy one or more lines. This will not affect their output, and only serves\nas a means of formatting your code.\n\n\n{ block }\n\n{\n  multiline block\n}\n\n\n\n\n\nSeparate branches of a block are delimited by the pipe character:\n\n\n{ A | B | C | D | E }\n\n\n\n\n\nBlocks can also be nested:\n\n\n{\n  { 1A | 1B | 1C }\n  |\n  { 2A | 2B | 2C | 2D }\n  |\n  { 3A | 3B | 3C | 3D | 3E }\n}\n\n\n\n\n\nThe default behavior of a block is to randomly execute one of the items. However, this behavior\ncan be changed using \nsynchronizers\n.\n\n\nWeighting elements\n[link]\n\n\nElements can be weighted to adjust the probability of them being chosen.\nWeights will only be used when no synchronizer is applied.\n\n\nA weight may be applied by inserting the weight value in parentheses at the start of the element.\nThe weight value may be a constant or a pattern; all weight-patterns are interpreted once when the block starts.\nThe value must be a normalized decimal number greater than or equal to zero, where 0 = 0% and 1 = 100%.\nAny element with no weight value will default to 1.\n\n\n{\n    (weight-a) element-a\n    |\n    (weight-b) element-b\n    |\n    ...\n}\n\n\n\n\n\n\n\nTip\n\n\nWeighted blocks with large amounts of elements may cause significant slowdowns, \nespecially if they are used repeatedly. Because of this, it is recommended only to\nuse weights where they are absolutely necessary.\n\n\nIf a block uses only small integer weight values, you can improve its performance by\nsimply repeating elements rather than using weights.",
            "title": "Blocks Overview"
        },
        {
            "location": "/language/blocks/#basic-usage",
            "text": "Blocks may occupy one or more lines. This will not affect their output, and only serves\nas a means of formatting your code.  { block }\n\n{\n  multiline block\n}  Separate branches of a block are delimited by the pipe character:  { A | B | C | D | E }  Blocks can also be nested:  {\n  { 1A | 1B | 1C }\n  |\n  { 2A | 2B | 2C | 2D }\n  |\n  { 3A | 3B | 3C | 3D | 3E }\n}  The default behavior of a block is to randomly execute one of the items. However, this behavior\ncan be changed using  synchronizers .",
            "title": "Basic usage"
        },
        {
            "location": "/language/blocks/#weighting-elements",
            "text": "Elements can be weighted to adjust the probability of them being chosen.\nWeights will only be used when no synchronizer is applied.  A weight may be applied by inserting the weight value in parentheses at the start of the element.\nThe weight value may be a constant or a pattern; all weight-patterns are interpreted once when the block starts.\nThe value must be a normalized decimal number greater than or equal to zero, where 0 = 0% and 1 = 100%.\nAny element with no weight value will default to 1.  {\n    (weight-a) element-a\n    |\n    (weight-b) element-b\n    |\n    ...\n}   Tip  Weighted blocks with large amounts of elements may cause significant slowdowns, \nespecially if they are used repeatedly. Because of this, it is recommended only to\nuse weights where they are absolutely necessary.  If a block uses only small integer weight values, you can improve its performance by\nsimply repeating elements rather than using weights.",
            "title": "Weighting elements"
        },
        {
            "location": "/language/blocks/block-attributes/",
            "text": "Block attributes are special pattern-local properties that can be set to change the behavior of the next block.\nThese can be set through a collection of functions. Once a block uses block attributes you have set, all the\nblock attributes are reset to their default state.\n\n\nTypes\n[link]\n\n\nBelow is a table explaining each block attribute:\n\n\n\n\n\n\n\n\nAttribute\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nRepetitions\n\n\n[rep]\n, \n[repeach]\n\n\nThe number of times the block should execute.\n\n\n\n\n\n\nSeparator\n\n\n[sep]\n\n\nThe separator pattern to run between repetitions.\n\n\n\n\n\n\nSynchronizer\n\n\n[sync]\n\n\nThe \nsynchronizer\n to apply to the block.\n\n\n\n\n\n\nChance\n\n\n[chance]\n\n\nThe probability, in percent, that the block will be run.\n\n\n\n\n\n\nStart\n\n\n[start]\n\n\nThe pattern to run before the block.\n\n\n\n\n\n\nEnd\n\n\n[end]\n\n\nThe pattern to run after the block.\n\n\n\n\n\n\nPrefix\n\n\n[before]\n\n\nThe pattern to run before each iteration.\n\n\n\n\n\n\nPostfix\n\n\n[after]\n\n\nThe pattern to run after each iteration.",
            "title": "Block Attributes"
        },
        {
            "location": "/language/blocks/block-attributes/#types",
            "text": "Below is a table explaining each block attribute:     Attribute  Function  Description      Repetitions  [rep] ,  [repeach]  The number of times the block should execute.    Separator  [sep]  The separator pattern to run between repetitions.    Synchronizer  [sync]  The  synchronizer  to apply to the block.    Chance  [chance]  The probability, in percent, that the block will be run.    Start  [start]  The pattern to run before the block.    End  [end]  The pattern to run after the block.    Prefix  [before]  The pattern to run before each iteration.    Postfix  [after]  The pattern to run after each iteration.",
            "title": "Types"
        },
        {
            "location": "/language/blocks/block-state-functions/",
            "text": "Block state functions are a class of functions designed to access state information about the most recently-executed block.\nThese functions can access information such as the current iteration number, the separator pattern, and the total number of\nrepetitions the block will perform. Some can also perform certain actions depending on the current state of the block.\n\n\nList of functions\n[link]\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[repnum]\n\n\nCurrent iteration number.\nSequence:\n [1 ... n]\n\n\n\n\n\n\n[repelapsed]\n\n\nNumber of finished iterations.\nSequence:\n [0 ... n - 1]\n\n\n\n\n\n\n[reprem]\n\n\nNumber of iterations remaining after current one.\nSequence:\n [n - 1 ... 0]\n\n\n\n\n\n\n[repqueued]\n\n\nNumber of iterations not completed yet.\nSequence:\n [n ... 1]\n\n\n\n\n\n\n[repcount]\n\n\nRepetition count.\n\n\n\n\n\n\n[depth]\n\n\nNumber of currently active blocks.\n\n\n\n\n\n\n[index]\n\n\nZero-based index of current item.\n\n\n\n\n\n\n[index1]\n\n\nOne-based index of current item.\n\n\n\n\n\n\n[even]\n\n\nRuns callback if current iteration is even.\n\n\n\n\n\n\n[odd]\n\n\nRuns callback if current iteration is odd.\n\n\n\n\n\n\n[nth]\n\n\nRuns callback if current iteration is a multiple of specified number.\n\n\n\n\n\n\n[notnth]\n\n\nRuns callback if current iteration is not a multiple of specified number.\n\n\n\n\n\n\n[ntho]\n\n\nRuns callback if current iteration with offset is a multiple of specified number.\n\n\n\n\n\n\n[notntho]\n\n\nRuns callback if current iteration with offset is not a multiple of specified number.\n\n\n\n\n\n\n[first]\n\n\nRuns callback if current iteration is the first.\n\n\n\n\n\n\n[last]\n\n\nRuns callback if current iteration is the last.\n\n\n\n\n\n\n[ends]\n\n\nRuns callback if current iteration is the first or last.\n\n\n\n\n\n\n[middle]\n\n\nRuns callback if current iteration is neither the first nor last.\n\n\n\n\n\n\n[sep]\n\n\nRuns separator pattern.\n\n\n\n\n\n\n\n\n\n\nTODO: Needs examples",
            "title": "State Functions"
        },
        {
            "location": "/language/blocks/block-state-functions/#list-of-functions",
            "text": "Function  Description      [repnum]  Current iteration number. Sequence:  [1 ... n]    [repelapsed]  Number of finished iterations. Sequence:  [0 ... n - 1]    [reprem]  Number of iterations remaining after current one. Sequence:  [n - 1 ... 0]    [repqueued]  Number of iterations not completed yet. Sequence:  [n ... 1]    [repcount]  Repetition count.    [depth]  Number of currently active blocks.    [index]  Zero-based index of current item.    [index1]  One-based index of current item.    [even]  Runs callback if current iteration is even.    [odd]  Runs callback if current iteration is odd.    [nth]  Runs callback if current iteration is a multiple of specified number.    [notnth]  Runs callback if current iteration is not a multiple of specified number.    [ntho]  Runs callback if current iteration with offset is a multiple of specified number.    [notntho]  Runs callback if current iteration with offset is not a multiple of specified number.    [first]  Runs callback if current iteration is the first.    [last]  Runs callback if current iteration is the last.    [ends]  Runs callback if current iteration is the first or last.    [middle]  Runs callback if current iteration is neither the first nor last.    [sep]  Runs separator pattern.      TODO: Needs examples",
            "title": "List of functions"
        },
        {
            "location": "/language/blocks/synchronizers/",
            "text": "A \nsynchronizer\n is a type of construct used to govern how a block selects elements.\nThere are many types of synchronizers, each with their own selection technique.\n\n\nCreating a synchronizer\n[link]\n\n\nSynchronizers are created using the \n[sync]\n function. It also has a short name, \n[x]\n.\n\n\nA simple example of a synchronizer is one which syncs the selection of two different blocks.\n\n\n[x:foo;locked]{Foo|Bar}\\s\n[x:foo;locked]{Foo|Bar}\n\n\n\n\n\nEven though the two blocks above are separate, the \n[sync]\n function forces them to choose the same element number;\nbecause of this, the pattern has only two possible outputs:\n\n\nFoo, Foo\n\n\n\n\n\nBar, Bar\n\n\n\n\n\nTypes\n[link]\n\n\nnone\n[link]\n\n\nSelects an independently random element.\nThis is the default behavior of blocks.\n\n\nforward\n[link]\n\n\nThe block will execute elements in left-to-right order, beginning with the first element.\nOnce the last element is used, it starts at the first one again.\n\n\nreverse\n[link]\n\n\nThe block will execute elements in right-to-left order, beginning with the last element.\nOnce the first element is used, it starts at the last one again.\n\n\ndeck\n[link]\n\n\nElements are shuffled randomly and executed in the shuffled order. Once all elements are used,\nthey are shuffled again.\n\n\ncdeck\n[link]\n\n\nElements are shuffled randomly and executed in the shuffled order. Elements are never reshuffled.\n\n\nAlso known as \"cyclic deck\".\n\n\nlocked\n[link]\n\n\nAn element number is chosen at random and the block will only select that one.\n\n\nping\n[link]\n\n\nStarting at the first item, iterates through all elements in order and then reverses without repeating boundary elements.\n\n\npong\n[link]\n\n\nStarting at the last item, iterates through all elements backwards and then reverses without repeating boundary elements.\n\n\nno-repeat\n[link]\n\n\nThe same item is never chosen twice in a row, as long as the block has two or more items.",
            "title": "Synchronizers"
        },
        {
            "location": "/language/blocks/synchronizers/#creating-a-synchronizer",
            "text": "Synchronizers are created using the  [sync]  function. It also has a short name,  [x] .  A simple example of a synchronizer is one which syncs the selection of two different blocks.  [x:foo;locked]{Foo|Bar}\\s\n[x:foo;locked]{Foo|Bar}  Even though the two blocks above are separate, the  [sync]  function forces them to choose the same element number;\nbecause of this, the pattern has only two possible outputs:  Foo, Foo  Bar, Bar",
            "title": "Creating a synchronizer"
        },
        {
            "location": "/language/blocks/synchronizers/#types",
            "text": "",
            "title": "Types"
        },
        {
            "location": "/language/blocks/synchronizers/#none",
            "text": "Selects an independently random element.\nThis is the default behavior of blocks.",
            "title": "none"
        },
        {
            "location": "/language/blocks/synchronizers/#forward",
            "text": "The block will execute elements in left-to-right order, beginning with the first element.\nOnce the last element is used, it starts at the first one again.",
            "title": "forward"
        },
        {
            "location": "/language/blocks/synchronizers/#reverse",
            "text": "The block will execute elements in right-to-left order, beginning with the last element.\nOnce the first element is used, it starts at the last one again.",
            "title": "reverse"
        },
        {
            "location": "/language/blocks/synchronizers/#deck",
            "text": "Elements are shuffled randomly and executed in the shuffled order. Once all elements are used,\nthey are shuffled again.",
            "title": "deck"
        },
        {
            "location": "/language/blocks/synchronizers/#cdeck",
            "text": "Elements are shuffled randomly and executed in the shuffled order. Elements are never reshuffled.  Also known as \"cyclic deck\".",
            "title": "cdeck"
        },
        {
            "location": "/language/blocks/synchronizers/#locked",
            "text": "An element number is chosen at random and the block will only select that one.",
            "title": "locked"
        },
        {
            "location": "/language/blocks/synchronizers/#ping",
            "text": "Starting at the first item, iterates through all elements in order and then reverses without repeating boundary elements.",
            "title": "ping"
        },
        {
            "location": "/language/blocks/synchronizers/#pong",
            "text": "Starting at the last item, iterates through all elements backwards and then reverses without repeating boundary elements.",
            "title": "pong"
        },
        {
            "location": "/language/blocks/synchronizers/#no-repeat",
            "text": "The same item is never chosen twice in a row, as long as the block has two or more items.",
            "title": "no-repeat"
        },
        {
            "location": "/language/queries/",
            "text": "Queries\n interface with the dictionary loaded by the current Rant context\nand retrieve (usually randomized) entries according to user-specified filters.\n\n\nAll query examples in this documentation use \nRantionary\n.\n\n\nQuery structure\n[link]\n\n\nQueries are enclosed in a pair of angle brackets.\n\n\nAt minimum, a query requires the name of the table it will fetch from. Only specifying a name\nwill fetch a random entry from the table and return its first term.\n\n\n# Fetch a random noun in singular form\n<noun> \n\n\n\n\n\n\n\nNote\n\n\nThe table name will always be the first item in a query.\n\n\n\n\nSubtype\n[link]\n\n\nTo fetch a specific term, a subtype of the term must be specified following the name of the table.\nThe table name and subtype are separated by a period.\n\n\n# Fetch a plural noun\n<noun.pl>\n\n\n\n\n\nPlural subtype\n[link]\n\n\nYou can also specify an alternate subtype to make the query plural-sensitive. This is particularly\nuseful for automatically pluralizing a noun according to its preceding quantity. Rant automatically keeps track\nof the last-written number and will use the plural subtype if the last number is not equal to one.\n\n\nThe plural subtype is indicated by separating with two periods instead of one. It may also be used in combination with\na regular subtype, to which it will fall back if the plural isn't triggered.\n\n\n[n:1;3] <noun..pl>\n\n\n\n\n\n[n:1;3] <noun.sg..pl>",
            "title": "Query Basics"
        },
        {
            "location": "/language/queries/#query-structure",
            "text": "Queries are enclosed in a pair of angle brackets.  At minimum, a query requires the name of the table it will fetch from. Only specifying a name\nwill fetch a random entry from the table and return its first term.  # Fetch a random noun in singular form\n<noun>    Note  The table name will always be the first item in a query.",
            "title": "Query structure"
        },
        {
            "location": "/language/queries/#subtype",
            "text": "To fetch a specific term, a subtype of the term must be specified following the name of the table.\nThe table name and subtype are separated by a period.  # Fetch a plural noun\n<noun.pl>",
            "title": "Subtype"
        },
        {
            "location": "/language/queries/#plural-subtype",
            "text": "You can also specify an alternate subtype to make the query plural-sensitive. This is particularly\nuseful for automatically pluralizing a noun according to its preceding quantity. Rant automatically keeps track\nof the last-written number and will use the plural subtype if the last number is not equal to one.  The plural subtype is indicated by separating with two periods instead of one. It may also be used in combination with\na regular subtype, to which it will fall back if the plural isn't triggered.  [n:1;3] <noun..pl>  [n:1;3] <noun.sg..pl>",
            "title": "Plural subtype"
        },
        {
            "location": "/language/queries/classfilters/",
            "text": "Class filters\n allow queries to narrow their search to entries with or without specific classes.\n\n\nFilters are specified after the table name and subtype.\n\n\nSyntax\n[link]\n\n\nA \npositive\n class filter filters for entries with a specific class.\nTo write one, insert a hyphen \n-\n followed by the name of the class to filter by.\nIf you'd like Rant to select one of several classes to filter by randomly,\nseparate them with vertical pipes (\n|\n).\n\n\n<noun-animal>               # Animal\n<noun -animal -red>         # Animal that is red\n<noun -animal -red|yellow>  # Animal that is red or yellow\n\n\n\n\n\nNegative filters\n[link]\n\n\nNegative filters do the opposite of positive filters: they filter for entries\nwithout a specific class. This is indicated by an exclamation point before the class\nname.\n\n\n<noun..pl -!animal>   # Any plural noun that isn't an animal\n\n\n\n\n\nExclusivity\n[link]\n\n\nIn some rare cases, a user might want to filter for entries that \nonly\n contain specific\nclasses. This behavior is called \nexclusivity\n. A query can be made exclusive by placing a\ndollar sign \n$\n before the class filters.\n\n\n<noun$-animal>  # Any noun that only contains the \"animal\" class",
            "title": "Class Filters"
        },
        {
            "location": "/language/queries/classfilters/#syntax",
            "text": "A  positive  class filter filters for entries with a specific class.\nTo write one, insert a hyphen  -  followed by the name of the class to filter by.\nIf you'd like Rant to select one of several classes to filter by randomly,\nseparate them with vertical pipes ( | ).  <noun-animal>               # Animal\n<noun -animal -red>         # Animal that is red\n<noun -animal -red|yellow>  # Animal that is red or yellow",
            "title": "Syntax"
        },
        {
            "location": "/language/queries/classfilters/#negative-filters",
            "text": "Negative filters do the opposite of positive filters: they filter for entries\nwithout a specific class. This is indicated by an exclamation point before the class\nname.  <noun..pl -!animal>   # Any plural noun that isn't an animal",
            "title": "Negative filters"
        },
        {
            "location": "/language/queries/classfilters/#exclusivity",
            "text": "In some rare cases, a user might want to filter for entries that  only  contain specific\nclasses. This behavior is called  exclusivity . A query can be made exclusive by placing a\ndollar sign  $  before the class filters.  <noun$-animal>  # Any noun that only contains the \"animal\" class",
            "title": "Exclusivity"
        },
        {
            "location": "/language/queries/carriers/",
            "text": "A \ncarrier\n is an optional query argument that allows different queries to interact with each other.\nThere are many different kinds of carriers that enable different types of behaviors, which are detailed\nin this article.\n\n\nCarrier syntax\n[link]\n\n\nThe carrier always goes last in a query and is separated from the filters by a double-colon \n::\n.\n\n\nA carrier consists of one or more \ncarrier components\n, each of which consists of a symbol\nidentifying the component type, followed by an identifier.\n\n\n# Simple carrier that causes several queries to return the same word\nA <noun:: =A> is a <noun:: =A> is a <noun:: =A>.\n\n\n\n\n\nComponent types\n[link]\n\n\nMatch\n[link]\n\n\nSymbol:\n \n=\n\n\nA \nmatch\n component causes a query to return the same entry as the first query that used a match\nwith the same identifier. For example, two queries with a match component that each use the carrier \n=x\n\nwill return the same entry, but \n=x\n and \n=y\n will be (most likely) different.\n\n\n<name-male> was \\a <adj::=a1>, <adj::=a1> man.\n\n\n\n\n\nJim was an awful, awful man.\n\n\n\n\n\nUnique\n[link]\n\n\nSymbol:\n \n!\n\n\nA \nunique\n component causes a query to return a different entry than every other query that used\na unique component with the same identifier.\n\n\nIf Rant runs out of entries, \n[No Match]\n will be returned.\n\n\nMatch-unique\n[link]\n\n\nSymbol:\n \n!=\n\n\nA \nmatch-unique\n component returns an entry that is different from the entry returned by the match\ncomponent with the specified identifier.\n\n\nAssociative\n[link]\n\n\nSymbol:\n \n@\n\n\nAn \nassociative\n component, or \nassociation\n, returns entries that have exactly\nthe same classes.\n\n\nMatch-associative\n[link]\n\n\nSymbol:\n \n@=\n\n\nA \nmatch-associative\n component, or \nmatch association\n, returns entries that have exactly\nthe same classes as the entry returned by the match with the specified identifier.\n\n\nDissociative\n[link]\n\n\nSymbol:\n \n@!\n\n\nA \ndissociative\n component, or \ndissociation\n, returns entries that have no classes in common.\n\n\nMatch-dissociative\n[link]\n\n\nSymbol:\n \n@!=\n\n\nA \nmatch-dissociative\n component, or \nmatch dissociation\n, returns entries that have no classes in\ncommon with the entry returned by the match with the specified identifier.\n\n\nRelational\n[link]\n\n\nSymbol:\n \n@?\n\n\nA \nrelational\n component, or \nrelation\n, returns entries that have at least one class in common.\n\n\nMatch-relational\n[link]\n\n\nSymbol:\n \n@?=\n\n\nA \nmatch-relational\n component, or \nmatch relation\n, returns entries that have at least one class\nin common with the entry returned by the match with the specified identifier.\n\n\nIntegral\n[link]\n\n\nSymbol:\n \n@*\n\n\nAn \nintegral\n component, or \nintegration\n, returns entries that include all of their classes\ninto the last entry returned by the same integration. The last entry may contain other classes.\n\n\nDivergent\n[link]\n\n\nSymbol:\n \n@+\n\n\nA \ndivergent\n component, or \ndiversion\n, returns entries that have at least one differing, or extra class.\n\n\nMatch-divergent\n[link]\n\n\nSymbol:\n \n@+=\n\n\nA \nmatch-divergent\n component, or \nmatch diversion\n, returns entries that have at least one differing, or extra\nclass than the entry returned by the match with the specified identifier.\n\n\nRhyme\n[link]\n\n\nSymbol:\n \n&\n\n\nA \nrhyme\n component returns entries that rhyme with each other according to the current rhyming mode.\n\n\nYou can set the current rhyming mode using the \n[rhyme]\n function.\n\n\nReference table\n[link]\n\n\nRefer to the following table to find the carrier component with the desired class association behavior:\n\n\n\n\n\n\n\n\n\n\n1+ classes\n\n\nAll classes\n\n\n\n\n\n\n\n\n\n\nMatching\n\n\nRelation\n\n\nAssociation\n\n\n\n\n\n\nDifferent\n\n\nDiversion\n\n\nDissociation",
            "title": "Carriers"
        },
        {
            "location": "/language/queries/carriers/#carrier-syntax",
            "text": "The carrier always goes last in a query and is separated from the filters by a double-colon  :: .  A carrier consists of one or more  carrier components , each of which consists of a symbol\nidentifying the component type, followed by an identifier.  # Simple carrier that causes several queries to return the same word\nA <noun:: =A> is a <noun:: =A> is a <noun:: =A>.",
            "title": "Carrier syntax"
        },
        {
            "location": "/language/queries/carriers/#component-types",
            "text": "",
            "title": "Component types"
        },
        {
            "location": "/language/queries/carriers/#match",
            "text": "Symbol:   =  A  match  component causes a query to return the same entry as the first query that used a match\nwith the same identifier. For example, two queries with a match component that each use the carrier  =x \nwill return the same entry, but  =x  and  =y  will be (most likely) different.  <name-male> was \\a <adj::=a1>, <adj::=a1> man.  Jim was an awful, awful man.",
            "title": "Match"
        },
        {
            "location": "/language/queries/carriers/#unique",
            "text": "Symbol:   !  A  unique  component causes a query to return a different entry than every other query that used\na unique component with the same identifier.  If Rant runs out of entries,  [No Match]  will be returned.",
            "title": "Unique"
        },
        {
            "location": "/language/queries/carriers/#match-unique",
            "text": "Symbol:   !=  A  match-unique  component returns an entry that is different from the entry returned by the match\ncomponent with the specified identifier.",
            "title": "Match-unique"
        },
        {
            "location": "/language/queries/carriers/#associative",
            "text": "Symbol:   @  An  associative  component, or  association , returns entries that have exactly\nthe same classes.",
            "title": "Associative"
        },
        {
            "location": "/language/queries/carriers/#match-associative",
            "text": "Symbol:   @=  A  match-associative  component, or  match association , returns entries that have exactly\nthe same classes as the entry returned by the match with the specified identifier.",
            "title": "Match-associative"
        },
        {
            "location": "/language/queries/carriers/#dissociative",
            "text": "Symbol:   @!  A  dissociative  component, or  dissociation , returns entries that have no classes in common.",
            "title": "Dissociative"
        },
        {
            "location": "/language/queries/carriers/#match-dissociative",
            "text": "Symbol:   @!=  A  match-dissociative  component, or  match dissociation , returns entries that have no classes in\ncommon with the entry returned by the match with the specified identifier.",
            "title": "Match-dissociative"
        },
        {
            "location": "/language/queries/carriers/#relational",
            "text": "Symbol:   @?  A  relational  component, or  relation , returns entries that have at least one class in common.",
            "title": "Relational"
        },
        {
            "location": "/language/queries/carriers/#match-relational",
            "text": "Symbol:   @?=  A  match-relational  component, or  match relation , returns entries that have at least one class\nin common with the entry returned by the match with the specified identifier.",
            "title": "Match-relational"
        },
        {
            "location": "/language/queries/carriers/#integral",
            "text": "Symbol:   @*  An  integral  component, or  integration , returns entries that include all of their classes\ninto the last entry returned by the same integration. The last entry may contain other classes.",
            "title": "Integral"
        },
        {
            "location": "/language/queries/carriers/#divergent",
            "text": "Symbol:   @+  A  divergent  component, or  diversion , returns entries that have at least one differing, or extra class.",
            "title": "Divergent"
        },
        {
            "location": "/language/queries/carriers/#match-divergent",
            "text": "Symbol:   @+=  A  match-divergent  component, or  match diversion , returns entries that have at least one differing, or extra\nclass than the entry returned by the match with the specified identifier.",
            "title": "Match-divergent"
        },
        {
            "location": "/language/queries/carriers/#rhyme",
            "text": "Symbol:   &  A  rhyme  component returns entries that rhyme with each other according to the current rhyming mode.  You can set the current rhyming mode using the  [rhyme]  function.",
            "title": "Rhyme"
        },
        {
            "location": "/language/queries/carriers/#reference-table",
            "text": "Refer to the following table to find the carrier component with the desired class association behavior:      1+ classes  All classes      Matching  Relation  Association    Different  Diversion  Dissociation",
            "title": "Reference table"
        },
        {
            "location": "/language/queries/specials/",
            "text": "This article describes other query filters with specialized functionality.\n\n\nRegex filters\n[link]\n\n\nRegex filters ensure that the returned term matches, or does not match, a specified regular expression:\n\n\n<name.subtype ? /regex/>    # Term must match regex\n<name.subtype ?! /regex/>   # Term must not match regex\n\n\n\n\n\nAs the official Rant runtime runs on the .NET Framework, Rant uses .NET's Regex flavor.\n\n\nRegex options\n[link]\n\n\n\n\n/regex/i\n: Case insensitive\n\n\n/regex/m\n: Multiline\n\n\n\n\nPhrasal complement\n[link]\n\n\nPhrasal complements are typically used in phrasal verbs, such as \"turn _ inside-out\" or \"set _ on fire\".\nA phrasal complement may be specified in a query by enclosing a pattern in square brackets anywhere after\nthe name/subtype specifiers.\n\n\n<name> <verb.ed-transitive [ <name> ]> <adv>.\n\n\n\n\n\n\n\nNote\n\n\nIf the returned term does not use a complement, the default behavior is for Rant to\ninsert the complement after the term.\n\n\n\n\nSyllable limit\n[link]\n\n\nSyllable limits ensure a specific number or range of syllables in the returned term, and are typically used\nin combination with rhyming carriers to create poetry.\n\n\n<noun.subtype(x)>   # Exactly x syllables\n<noun.subtype(x-)>  # At least x syllables\n<noun.subtype(-x)>  # At most x syllables\n<noun.subtype(x-y)> # Syllable count must be between x and y",
            "title": "Specials"
        },
        {
            "location": "/language/queries/specials/#regex-filters",
            "text": "Regex filters ensure that the returned term matches, or does not match, a specified regular expression:  <name.subtype ? /regex/>    # Term must match regex\n<name.subtype ?! /regex/>   # Term must not match regex  As the official Rant runtime runs on the .NET Framework, Rant uses .NET's Regex flavor.",
            "title": "Regex filters"
        },
        {
            "location": "/language/queries/specials/#regex-options",
            "text": "/regex/i : Case insensitive  /regex/m : Multiline",
            "title": "Regex options"
        },
        {
            "location": "/language/queries/specials/#phrasal-complement",
            "text": "Phrasal complements are typically used in phrasal verbs, such as \"turn _ inside-out\" or \"set _ on fire\".\nA phrasal complement may be specified in a query by enclosing a pattern in square brackets anywhere after\nthe name/subtype specifiers.  <name> <verb.ed-transitive [ <name> ]> <adv>.   Note  If the returned term does not use a complement, the default behavior is for Rant to\ninsert the complement after the term.",
            "title": "Phrasal complement"
        },
        {
            "location": "/language/queries/specials/#syllable-limit",
            "text": "Syllable limits ensure a specific number or range of syllables in the returned term, and are typically used\nin combination with rhyming carriers to create poetry.  <noun.subtype(x)>   # Exactly x syllables\n<noun.subtype(x-)>  # At least x syllables\n<noun.subtype(-x)>  # At most x syllables\n<noun.subtype(x-y)> # Syllable count must be between x and y",
            "title": "Syllable limit"
        },
        {
            "location": "/language/queries/query-builders/",
            "text": "Regular queries have no dynamic parts except for the complement. Sometimes, however,\nyou may want to vary the parameters in a query. Fortunately, this can be achieved with a\nspecialized set of functions included in Rant's framework, known as \"query-builder\" \nfunctions.\n\n\nEverything that can be done with regular queries can be done with query-builder functions,\nbut with added benefits: you can vary query parameters and store queries for later use in\nthe same pattern. Queries built this way are called \ndynamic queries\n.\n\n\nTable of functions\n[link]\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription/Equivalent\n\n\n\n\n\n\n\n\n\n\n[query]\n, \n[query:id]\n\n\nRuns stored query.\n\n\n\n\n\n\n[qexists:id]\n\n\nCheck if query ID exists\n\n\n\n\n\n\n[qdel:id]\n\n\nDelete query\n\n\n\n\n\n\n[qcc:id;cc-name;cc-type]\n\n\nCarrier component\n\n\n\n\n\n\n[qname:id;name]\n, \n[qname:id;name;subtype]\n\n\n<name ...>\n, \n<name.subtype ...>\n\n\n\n\n\n\n[qcf:id;class]\n\n\n-class\n\n\n\n\n\n\n[qcfn:id;class]\n\n\n-!class\n\n\n\n\n\n\n[qhas:id;regex;opt]\n\n\n? `regex`opt\n\n\n\n\n\n\n[qhasno:id;regex;opt]\n\n\n?! `regex`opt\n\n\n\n\n\n\n[qsylmin:id;x]\n\n\n(x-)\n\n\n\n\n\n\n[qsylmax:id;x]\n\n\n(-x)\n\n\n\n\n\n\n[qsyl:id;x]\n, \n[qsyl:id;x;y]\n\n\n(x)\n, \n(x-y)\n\n\n\n\n\n\n[qphr:id;phrasal]\n\n\n[phrasal]\n\n\n\n\n\n\n\n\nHow to use\n[link]\n\n\nAs a gentle introduction to this very different approach to queries, let's first\nlook at a case where a dynamic query would be useful.\n\n\nSuppose we want to print an adjective followed by a noun and have them start with the same letter.\nWe might start out with something like this:\n\n\n<adj-appearance?`^a`i> <noun.pl?`^a`i>\n\n\n\n\n\nThis gets us part of the way. Both words are guaranteed to start with A! But what if we want to randomize\nwhich letter they start with? This cannot be accomplished with the conventional syntax.\n\n\nThis is one example of a task that is easy to perform with a dynamic query. Let's convert this query\nto its equivalent query-builder functions so we can figure out how to solve the problem:\n\n\n# Create a dynamic query named word1 for the adjective\n[qname:word1;adj]       # Table name\n[qcf:word1;appearance]  # Filter for appearance-related adjectives\n[qhas:word1;^a;i]       # Regex filter\n\n# Create another one called word2 for the noun\n[qname:word2;noun]      # Table name\n[qsub:word2;pl]         # Subtype\n[qhas:word2;^a;i]       # Regex filter\n\n# Run the queries\n[q:word1] [q:word2]\n\n\n\n\n\nNow that we've broken down the problem with query-building, the regex filter is now supplied as a pattern\nto a function! Let's change the argument so that it returns a random, but matching letter to both queries' filters.\n\n\n# Create a dynamic query named word1 for the adjective\n[qname:word1;adj]                   # Table name\n[qcf:word1;appearance]              # Filter for appearance-related adjectives\n[qhas:word1;^[branch:ml;\\c];i]      # Regex filter\n\n# Create another one called word2 for the noun\n[qname:word2;noun]                  # Table name\n[qsub:word2;pl]                     # Subtype\n[qhas:word2;^[branch:ml;\\c];i]      # Regex filter\n\n# Run the queries\n[q:word1] [q:word2]\n\n\n\n\n\nWhen we run this, the two words will now always start with the same letter.\n\n\ndry daisies\n\n\n\n\n\nbearded butlers\n\n\n\n\n\nhumongous hemorrhoids\n\n\n\n\n\nThis is just one possibility out of many for dynamic queries. Here is a non-exhaustive list of things they let you do:\n\n\n\n\nUse variables in queries\n\n\nRandomize class filters\n\n\nDynamically choose the contents and number of carrier components\n\n\nConditionally include/exclude filters\n\n\nStore queries for multiple uses\n\n\n\n\nSome more examples\n[link]\n\n\nBelow is a list of conversions between static and dynamic queries to help you further in\nunderstanding how the functions work.\n\n\n\n\n\n\n\n\nStatic Query\n\n\nDynamic Query\n\n\n\n\n\n\n\n\n\n\n<noun>\n\n\n[qname:test;noun][q:test]\n\n\n\n\n\n\n<noun.pl>\n\n\n[qname:test;noun][qsub:test;pl][q:test]\n\n\n\n\n\n\n<verb-transitive>\n\n\n[qname:test;verb][qcf:test;transitive][q:test]\n\n\n\n\n\n\n<adj::=a>\n\n\n[qname:test;adj][qcc:test;a;match][q:test]\n\n\n\n\n\n\n<noun-person|animal|tool>\n\n\n[qname:test;noun][qcf:test;{person|animal|tool}][q:test]",
            "title": "Dynamic Queries"
        },
        {
            "location": "/language/queries/query-builders/#table-of-functions",
            "text": "Function Name  Description/Equivalent      [query] ,  [query:id]  Runs stored query.    [qexists:id]  Check if query ID exists    [qdel:id]  Delete query    [qcc:id;cc-name;cc-type]  Carrier component    [qname:id;name] ,  [qname:id;name;subtype]  <name ...> ,  <name.subtype ...>    [qcf:id;class]  -class    [qcfn:id;class]  -!class    [qhas:id;regex;opt]  ? `regex`opt    [qhasno:id;regex;opt]  ?! `regex`opt    [qsylmin:id;x]  (x-)    [qsylmax:id;x]  (-x)    [qsyl:id;x] ,  [qsyl:id;x;y]  (x) ,  (x-y)    [qphr:id;phrasal]  [phrasal]",
            "title": "Table of functions"
        },
        {
            "location": "/language/queries/query-builders/#how-to-use",
            "text": "As a gentle introduction to this very different approach to queries, let's first\nlook at a case where a dynamic query would be useful.  Suppose we want to print an adjective followed by a noun and have them start with the same letter.\nWe might start out with something like this:  <adj-appearance?`^a`i> <noun.pl?`^a`i>  This gets us part of the way. Both words are guaranteed to start with A! But what if we want to randomize\nwhich letter they start with? This cannot be accomplished with the conventional syntax.  This is one example of a task that is easy to perform with a dynamic query. Let's convert this query\nto its equivalent query-builder functions so we can figure out how to solve the problem:  # Create a dynamic query named word1 for the adjective\n[qname:word1;adj]       # Table name\n[qcf:word1;appearance]  # Filter for appearance-related adjectives\n[qhas:word1;^a;i]       # Regex filter\n\n# Create another one called word2 for the noun\n[qname:word2;noun]      # Table name\n[qsub:word2;pl]         # Subtype\n[qhas:word2;^a;i]       # Regex filter\n\n# Run the queries\n[q:word1] [q:word2]  Now that we've broken down the problem with query-building, the regex filter is now supplied as a pattern\nto a function! Let's change the argument so that it returns a random, but matching letter to both queries' filters.  # Create a dynamic query named word1 for the adjective\n[qname:word1;adj]                   # Table name\n[qcf:word1;appearance]              # Filter for appearance-related adjectives\n[qhas:word1;^[branch:ml;\\c];i]      # Regex filter\n\n# Create another one called word2 for the noun\n[qname:word2;noun]                  # Table name\n[qsub:word2;pl]                     # Subtype\n[qhas:word2;^[branch:ml;\\c];i]      # Regex filter\n\n# Run the queries\n[q:word1] [q:word2]  When we run this, the two words will now always start with the same letter.  dry daisies  bearded butlers  humongous hemorrhoids  This is just one possibility out of many for dynamic queries. Here is a non-exhaustive list of things they let you do:   Use variables in queries  Randomize class filters  Dynamically choose the contents and number of carrier components  Conditionally include/exclude filters  Store queries for multiple uses",
            "title": "How to use"
        },
        {
            "location": "/language/queries/query-builders/#some-more-examples",
            "text": "Below is a list of conversions between static and dynamic queries to help you further in\nunderstanding how the functions work.     Static Query  Dynamic Query      <noun>  [qname:test;noun][q:test]    <noun.pl>  [qname:test;noun][qsub:test;pl][q:test]    <verb-transitive>  [qname:test;verb][qcf:test;transitive][q:test]    <adj::=a>  [qname:test;adj][qcc:test;a;match][q:test]    <noun-person|animal|tool>  [qname:test;noun][qcf:test;{person|animal|tool}][q:test]",
            "title": "Some more examples"
        },
        {
            "location": "/language/comments/",
            "text": "Comments allow you to annotate your patterns with meaningless rambling.\nThey do not affect the behavior of the pattern unless you comment out part of the code.\n\n\nA comment can be inserted by adding the \n#\n character anywhere on a line.\nEverything in front of it on that line will be turned into a comment.\nThe only exception is if you \nescape\n the comment character, because then it just prints the \n#\n.\n\n\n# Define subroutine for concatenating two strings\n[$[concat:a;b]:\n    [arg:a][arg:b] # Print both arguments\n]\n\n# Nobody would actually do this with a subroutine. Shhhh\n[$concat:Hello\\s;World!]",
            "title": "Comments"
        },
        {
            "location": "/language/escape-sequences/",
            "text": "Escape sequences\n allow Rant to print characters that are reserved by the language or unable to be easily typed.\n\n\nAn escape sequence is constructed with a backwards slash (\n\\\n) followed by one character (or more than one, in the case of \n\\u\n or with a quantifier added).\n\n\nAny\n character can be escaped.\nThis includes brackets \n\\{ \\[ \\<\n, slashes \n\\\\ \\/\n, quotes \n\\\" \\'\n, number signs \n\\#\n and everything else. \n\n\n\\[This sentence is inside brackets.\\]\n\n\n\n\n\nTypes\n[link]\n\n\nThere are two types of escape sequence characters:\n\n\nStatic escape sequences\n[link]\n\n\nStatic escape sequences always print the same value.\n\n\n\n\n\n\n\n\nEscape sequence\n\n\nDescription\n\n\nUnicode character code\n\n\n\n\n\n\n\n\n\n\n\\n\n\n\nLine feed\n\n\n0x000a\n\n\n\n\n\n\n\\r\n\n\nCarriage return\n\n\n0x000d\n\n\n\n\n\n\n\\v\n\n\nVertical tab\n\n\n0x000b\n\n\n\n\n\n\n\\b\n\n\nBackspace\n\n\n0x0008\n\n\n\n\n\n\n\\f\n\n\nForm feed\n\n\n0x000c\n\n\n\n\n\n\n\\s\n\n\nSpace\n\n\n0x0020\n\n\n\n\n\n\n\\t\n\n\nHorizontal tab\n\n\n0x0009\n\n\n\n\n\n\n\\uxxxx\n\n\nUnicode character\n\n\n\\u0052\\u0041\\u004e\\u0054 = \"RANT\"\n\n\n\n\n\n\n\\Uxxxxxxxx\n\n\nSurrogate pair\n\n\n\\U0001f602 = \ud83d\ude02\n\n\n\n\n\n\n\n\nDynamic escape sequences\n[link]\n\n\nDynamic escape sequences either print a random selection from a list of characters,\nor print certain context-sensitive strings (\\a and \\N).\n\n\n\n\n\n\n\n\nEscape sequence\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\\a\n\n\nEnglish indefinite article\n\n\n\n\n\n\n\\c\n\n\nLowercase letter\n\n\n\n\n\n\n\\C\n\n\nUppercase letter\n\n\n\n\n\n\n\\d\n\n\nDigit\n\n\n\n\n\n\n\\D\n\n\nNonzero digit\n\n\n\n\n\n\n\\N\n\n\nSystem-specific line separator\n\n\n\n\n\n\n\\x\n\n\nLowercase hexadecimal digit\n\n\n\n\n\n\n\\X\n\n\nUppercase hexadecimal digit\n\n\n\n\n\n\n\\w\n\n\nLowercase alphanumeric character\n\n\n\n\n\n\n\\W\n\n\nUppercase alphanumeric character\n\n\n\n\n\n\n\n\nQuantifiers\n[link]\n\n\nEscape sequences can print more than one character using a \nquantifier\n.\nA quantifier is added by inserting a positive, nonzero integer after the backward slash, separated from the escape character by a comma.\n\n\nThe number specifies how many times to repeat the character. If the escape character is dynamic, each repetition will be randomized.\n\n\n\\16,X   # 16-character uppercase hexadecimal number\n\\32,c   # 32 random lowercase letters\n\\100,n  # 100 line feeds",
            "title": "Escape Sequences"
        },
        {
            "location": "/language/escape-sequences/#types",
            "text": "There are two types of escape sequence characters:",
            "title": "Types"
        },
        {
            "location": "/language/escape-sequences/#static-escape-sequences",
            "text": "Static escape sequences always print the same value.     Escape sequence  Description  Unicode character code      \\n  Line feed  0x000a    \\r  Carriage return  0x000d    \\v  Vertical tab  0x000b    \\b  Backspace  0x0008    \\f  Form feed  0x000c    \\s  Space  0x0020    \\t  Horizontal tab  0x0009    \\uxxxx  Unicode character  \\u0052\\u0041\\u004e\\u0054 = \"RANT\"    \\Uxxxxxxxx  Surrogate pair  \\U0001f602 = \ud83d\ude02",
            "title": "Static escape sequences"
        },
        {
            "location": "/language/escape-sequences/#dynamic-escape-sequences",
            "text": "Dynamic escape sequences either print a random selection from a list of characters,\nor print certain context-sensitive strings (\\a and \\N).     Escape sequence  Description      \\a  English indefinite article    \\c  Lowercase letter    \\C  Uppercase letter    \\d  Digit    \\D  Nonzero digit    \\N  System-specific line separator    \\x  Lowercase hexadecimal digit    \\X  Uppercase hexadecimal digit    \\w  Lowercase alphanumeric character    \\W  Uppercase alphanumeric character",
            "title": "Dynamic escape sequences"
        },
        {
            "location": "/language/escape-sequences/#quantifiers",
            "text": "Escape sequences can print more than one character using a  quantifier .\nA quantifier is added by inserting a positive, nonzero integer after the backward slash, separated from the escape character by a comma.  The number specifies how many times to repeat the character. If the escape character is dynamic, each repetition will be randomized.  \\16,X   # 16-character uppercase hexadecimal number\n\\32,c   # 32 random lowercase letters\n\\100,n  # 100 line feeds",
            "title": "Quantifiers"
        },
        {
            "location": "/language/verbatim-strings/",
            "text": "Verbatim strings\n are strings that are printed exactly as they are typed. A verbatim string is written inside a pair of double quotes.\n\n\nThis is regular text\n\"This is a verbatim string\"\n\n\n\n\n\nOne of the most immediately observable advantages of verbatim strings is that they can print whitespace, including line breaks, exactly how they are written in a pattern.\n\n\n\"This string\nis separated\ninto multiple\nlines, and\nwill be \nprinted exactly\nlike this.\"",
            "title": "Verbatim Strings"
        },
        {
            "location": "/language/verbose-chars/",
            "text": "Verbose characters allow you to enter any character by using its Unicode name.\nRant will convert all verbose literals to their corresponding characters when the pattern is compiled.\n\n\nAll Unicode 9.0 characters are supported.\n\n\nSyntax\n[link]\n\n\nA verbose character can be entered using the following structure:\n\n\n\\@CHAR NAME@\n\n\n\n\n\nThe name is not case-sensitive, and spaces may be substituted for underscores or hyphens without consequence.\n\n\nUsage\n[link]\n\n\nA common usage of these literals is to type accented characters. For example, the \u00e4 character can be entered using\nthe following:\n\n\n\\@LATIN SMALL LETTER A WITH DIAERESIS@\n\n\n\n\n\nIt can also be used with emoji:\n\n\n\\@THUMBS UP SIGN@\n\n\n\n\n\n\\@FACE WITH TEARS OF JOY@\n\n\n\n\n\n\\@OK HAND SIGN@\n\n\n\n\n\nProcedural characters\n[link]\n\n\nTo enter characters procedurally, use the \nchar\n function.\n\n\nCharacter names\n[link]\n\n\nThere are many online resources for looking up Unicode character names. Here are a few you can use:\n\n\n\n\nunicode.org\n\n\nunicode-table.com\n\n\nfileformat.info",
            "title": "Verbose Characters"
        },
        {
            "location": "/language/verbose-chars/#syntax",
            "text": "A verbose character can be entered using the following structure:  \\@CHAR NAME@  The name is not case-sensitive, and spaces may be substituted for underscores or hyphens without consequence.",
            "title": "Syntax"
        },
        {
            "location": "/language/verbose-chars/#usage",
            "text": "A common usage of these literals is to type accented characters. For example, the \u00e4 character can be entered using\nthe following:  \\@LATIN SMALL LETTER A WITH DIAERESIS@  It can also be used with emoji:  \\@THUMBS UP SIGN@  \\@FACE WITH TEARS OF JOY@  \\@OK HAND SIGN@",
            "title": "Usage"
        },
        {
            "location": "/language/verbose-chars/#procedural-characters",
            "text": "To enter characters procedurally, use the  char  function.",
            "title": "Procedural characters"
        },
        {
            "location": "/language/verbose-chars/#character-names",
            "text": "There are many online resources for looking up Unicode character names. Here are a few you can use:   unicode.org  unicode-table.com  fileformat.info",
            "title": "Character names"
        },
        {
            "location": "/language/replacers/",
            "text": "Replacers\n are based on a special type of function that scans an input string for substrings matching a regular expression,\nand then replaces each match with a string returned by a callback.\n\n\nSyntax\n[link]\n\n\nThe syntax is similar to a function call. The difference is that the function name is replaced by a regular expression,\nand there are exactly two parameters: the first passes in the string to transform, and the second is a callback\nthat is executed whenever a match is found. The text printed within this callback becomes the replacement text for that\nspecific match.\n\n\n[`search-pattern`:\n    string to search;\n    replacement callback\n]\n\n\n\n\n\nAccessing match and group values\n[link]\n\n\nUse \n[match]\n within the replacement callback to print the current match value.\n\n\nUse \n[group]\n within the replacement callback to print the value of a named capturing group.",
            "title": "Replacers"
        },
        {
            "location": "/language/replacers/#syntax",
            "text": "The syntax is similar to a function call. The difference is that the function name is replaced by a regular expression,\nand there are exactly two parameters: the first passes in the string to transform, and the second is a callback\nthat is executed whenever a match is found. The text printed within this callback becomes the replacement text for that\nspecific match.  [`search-pattern`:\n    string to search;\n    replacement callback\n]",
            "title": "Syntax"
        },
        {
            "location": "/language/replacers/#accessing-match-and-group-values",
            "text": "Use  [match]  within the replacement callback to print the current match value.  Use  [group]  within the replacement callback to print the value of a named capturing group.",
            "title": "Accessing match and group values"
        },
        {
            "location": "/language/subroutines/",
            "text": "Subroutines\n[link]\n\n\nSubroutines are blocks of code that can be executed from anywhere after the point at which they are declared.\nThey can be configured to accept arguments from the user to customize their behavior and output.\n\n\nA basic subroutine is structured as follows:\n\n\n[$[hello:name]: Hello, [arg:name]!]\n\n\n\n\n\nIn the above example, a subroutine named \nhello\n is declared with a single parameter, \nname\n.\nThe subroutine body prints a basic greeting that fetches and inserts the value passed to \nname\n using the \n[arg]\n function.\n\n\nSubroutines are used the same way as functions, but the function name is the subroutine name prefixed with \n$\n.\n\n\n[$hello:David]\n\n\n\n\n\nHello, David!\n\n\n\n\n\nParameter types\n[link]\n\n\nThere are two different kinds of parameters that subroutines can accept.\nThe first, demonstrated in the main example, is a \nvalue parameter\n.\nAnother name for a value parameter is a \"greedy\" parameter.\n\n\nValue parameters are represented by a simple identifier. When a pattern\nis passed to a value parameter, it is interpreted and the resulting output\nis stored as the argument value. This means that the code passed to the parameter\nis guaranteed to run just once.\n\n\nThe second type of parameter is a \nlazy parameter\n. The code passed to a lazy parameter\nis run every time the argument value is retrieved using \n[arg]\n. This means that the code\npassed to the parameter can be run more than once, and the value may therefore change. It is\nalso possible that it might not be run at all, if the subroutine body never accesses it.\n\n\nLazy parameters are represented by an identifier prefixed with \n@\n. A basic example\nof how a lazy parameter might be useful is when a subroutine needs a callback, or the user\nwould like to repeat the code multiple times.\n\n\nHere is an example of a subroutine with a lazy parameter that repeats a pattern three times:\n\n\n[$[three:@pattern]:\n    [rep:3]{[arg:pattern]}\n]\n\n\n\n\n\nSubroutine scopes\n[link]\n\n\nIf a subroutine is defined within a block, it can only be accessed inside of the block.\nThat block becomes the \nscope\n of the subroutine. Subroutines defined in the global scope\n(outside of all blocks) can be accessed from other patterns, once declared.\n\n\n{\n    [$[test]: This is an example subroutine.]\n    [$test] # Works\n}\n[$test] # Error",
            "title": "Subroutines"
        },
        {
            "location": "/language/subroutines/#subroutines",
            "text": "Subroutines are blocks of code that can be executed from anywhere after the point at which they are declared.\nThey can be configured to accept arguments from the user to customize their behavior and output.  A basic subroutine is structured as follows:  [$[hello:name]: Hello, [arg:name]!]  In the above example, a subroutine named  hello  is declared with a single parameter,  name .\nThe subroutine body prints a basic greeting that fetches and inserts the value passed to  name  using the  [arg]  function.  Subroutines are used the same way as functions, but the function name is the subroutine name prefixed with  $ .  [$hello:David]  Hello, David!",
            "title": "Subroutines"
        },
        {
            "location": "/language/subroutines/#parameter-types",
            "text": "There are two different kinds of parameters that subroutines can accept.\nThe first, demonstrated in the main example, is a  value parameter .\nAnother name for a value parameter is a \"greedy\" parameter.  Value parameters are represented by a simple identifier. When a pattern\nis passed to a value parameter, it is interpreted and the resulting output\nis stored as the argument value. This means that the code passed to the parameter\nis guaranteed to run just once.  The second type of parameter is a  lazy parameter . The code passed to a lazy parameter\nis run every time the argument value is retrieved using  [arg] . This means that the code\npassed to the parameter can be run more than once, and the value may therefore change. It is\nalso possible that it might not be run at all, if the subroutine body never accesses it.  Lazy parameters are represented by an identifier prefixed with  @ . A basic example\nof how a lazy parameter might be useful is when a subroutine needs a callback, or the user\nwould like to repeat the code multiple times.  Here is an example of a subroutine with a lazy parameter that repeats a pattern three times:  [$[three:@pattern]:\n    [rep:3]{[arg:pattern]}\n]",
            "title": "Parameter types"
        },
        {
            "location": "/language/subroutines/#subroutine-scopes",
            "text": "If a subroutine is defined within a block, it can only be accessed inside of the block.\nThat block becomes the  scope  of the subroutine. Subroutines defined in the global scope\n(outside of all blocks) can be accessed from other patterns, once declared.  {\n    [$[test]: This is an example subroutine.]\n    [$test] # Works\n}\n[$test] # Error",
            "title": "Subroutine scopes"
        },
        {
            "location": "/language/variables/",
            "text": "Rant has a variable system that can create, store, and manipulate numbers, strings, callbacks, booleans, and lists.\n\n\nScopes\n[link]\n\n\nThe most important thing to know about variables in Rant is that they are defined within a scope.\nBlocks in Rant are treated like variable scopes, and once you exit a block you've created a variable in,\nthat variable no longer exists (yes, even if your block is a repeater; it will have to create the variable again).\n\n\nVariables created in the global scope of any pattern will persist between patterns. Likewise, if you set\na global variable through the RantEngine class, it will be available in any scope inside any pattern.\n\n\nCreating variables\n[link]\n\n\nEach variable type has a different function for creating it. Below is a table of these functions:\n\n\n\n\n\n\n\n\nFunction name\n\n\nVariable type\n\n\n\n\n\n\n\n\n\n\n[vn]\n\n\nNumber\n\n\n\n\n\n\n[vs]\n\n\nString\n\n\n\n\n\n\n[vb]\n\n\nBoolean\n\n\n\n\n\n\n[vl]\n\n\nList\n\n\n\n\n\n\n[vp]\n\n\nCallback\n\n\n\n\n\n\n\n\nEach of these functions requires at least two arguments: the variable's name, and its initial value.\n\n\n[vn:a;14][vn:b;7]\n[add:[v:a];[v:b]]\n# Output: 21\n\n\n\n\n\nValue access and operations\n[link]\n\n\nMost variable value access is done via the \n[v]\n function.\nThis function simply prints the string representation of the variable's value.\nAll numeric and boolean operations in Rant are string-based.\n\n\nAt first glance, this may seem inefficient; why would someone want to pass numbers as\nstrings? However, if we look at more advanced examples, this behavior can be quite useful\nfor generating, for example, numbers with specific digit patterns.\n\n\n# Generate a 5-digit number without any zeros, e.g. 25647\n[vn:nozeros;\\D,5]\n\n\n\n\n\n# Generate a number with only 2, 3, and 4\n# Also don't repeat the same digit twice in a row\n[vn:num234;[r:[n:1;8]][x:x234;no-repeat]{2|3|4}]",
            "title": "Overview"
        },
        {
            "location": "/language/variables/#scopes",
            "text": "The most important thing to know about variables in Rant is that they are defined within a scope.\nBlocks in Rant are treated like variable scopes, and once you exit a block you've created a variable in,\nthat variable no longer exists (yes, even if your block is a repeater; it will have to create the variable again).  Variables created in the global scope of any pattern will persist between patterns. Likewise, if you set\na global variable through the RantEngine class, it will be available in any scope inside any pattern.",
            "title": "Scopes"
        },
        {
            "location": "/language/variables/#creating-variables",
            "text": "Each variable type has a different function for creating it. Below is a table of these functions:     Function name  Variable type      [vn]  Number    [vs]  String    [vb]  Boolean    [vl]  List    [vp]  Callback     Each of these functions requires at least two arguments: the variable's name, and its initial value.  [vn:a;14][vn:b;7]\n[add:[v:a];[v:b]]\n# Output: 21",
            "title": "Creating variables"
        },
        {
            "location": "/language/variables/#value-access-and-operations",
            "text": "Most variable value access is done via the  [v]  function.\nThis function simply prints the string representation of the variable's value.\nAll numeric and boolean operations in Rant are string-based.  At first glance, this may seem inefficient; why would someone want to pass numbers as\nstrings? However, if we look at more advanced examples, this behavior can be quite useful\nfor generating, for example, numbers with specific digit patterns.  # Generate a 5-digit number without any zeros, e.g. 25647\n[vn:nozeros;\\D,5]  # Generate a number with only 2, 3, and 4\n# Also don't repeat the same digit twice in a row\n[vn:num234;[r:[n:1;8]][x:x234;no-repeat]{2|3|4}]",
            "title": "Value access and operations"
        },
        {
            "location": "/language/variables/general-functions/",
            "text": "Values\n[link]\n\n\nThese functions work for all value types except lists.\n\n\n\n\n\n\n\n\nOperation\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\nEqual\n\n\n[eq]\n\n\n\n\n\n\nNot Equal\n\n\n[ne]\n\n\n\n\n\n\nEqual Case-Insensitive\n\n\n[eq]\n\n\n\n\n\n\nNot Equal Case-Insensitive\n\n\n[ne]\n\n\n\n\n\n\n\n\nVariables\n[link]\n\n\nThese functions operate on at least one variable reference.\n\n\n\n\n\n\n\n\nOperation\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\nVariable Value\n\n\n[v]\n\n\n\n\n\n\nCopy Variable Value\n\n\n[vcpy]\n\n\n\n\n\n\nVariable Exists\n\n\n[vexists]\n\n\n\n\n\n\nVariables Equal\n\n\n[veq]\n\n\n\n\n\n\nVariables Not Equal\n\n\n[vne]\n\n\n\n\n\n\nAdd To Variable\n\n\n[vadd]\n\n\n\n\n\n\nSubtract From Variable\n\n\n[vsub]\n\n\n\n\n\n\nMultiply Variable\n\n\n[vmul]\n\n\n\n\n\n\nDivide Variable\n\n\n[vdiv]\n\n\n\n\n\n\nModulo Variable\n\n\n[vmod]\n\n\n\n\n\n\nInvert Boolean Variable\n\n\n[vnot]\n\n\n\n\n\n\nSwap Variables\n\n\n[swap]\n\n\n\n\n\n\nRotate Variables Left\n\n\n[rvl]\n\n\n\n\n\n\nRotate Variables Right\n\n\n[rvr]\n\n\n\n\n\n\nPrint Variable Type\n\n\n[typeof]\n\n\n\n\n\n\nVariable Length\n\n\n[vlen]",
            "title": "General Functions"
        },
        {
            "location": "/language/variables/general-functions/#values",
            "text": "These functions work for all value types except lists.     Operation  Function      Equal  [eq]    Not Equal  [ne]    Equal Case-Insensitive  [eq]    Not Equal Case-Insensitive  [ne]",
            "title": "Values"
        },
        {
            "location": "/language/variables/general-functions/#variables",
            "text": "These functions operate on at least one variable reference.     Operation  Function      Variable Value  [v]    Copy Variable Value  [vcpy]    Variable Exists  [vexists]    Variables Equal  [veq]    Variables Not Equal  [vne]    Add To Variable  [vadd]    Subtract From Variable  [vsub]    Multiply Variable  [vmul]    Divide Variable  [vdiv]    Modulo Variable  [vmod]    Invert Boolean Variable  [vnot]    Swap Variables  [swap]    Rotate Variables Left  [rvl]    Rotate Variables Right  [rvr]    Print Variable Type  [typeof]    Variable Length  [vlen]",
            "title": "Variables"
        },
        {
            "location": "/language/variables/num-functions/",
            "text": "These functions operate on numeric values.\n\n\n\n\n\n\n\n\nOperation\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\nAddition\n\n\n[add]\n\n\n\n\n\n\nSubtraction\n\n\n[sub]\n\n\n\n\n\n\nMultiplication\n\n\n[mul]\n\n\n\n\n\n\nDivision\n\n\n[div]\n\n\n\n\n\n\nModulo\n\n\n[mod]\n\n\n\n\n\n\nLess Than\n\n\n[lt]\n\n\n\n\n\n\nLess Than Or Equal\n\n\n[le]\n\n\n\n\n\n\nGreater Than\n\n\n[gt]\n\n\n\n\n\n\nGreater Than Or Equal\n\n\n[ge]",
            "title": "Number Functions"
        },
        {
            "location": "/language/variables/bool-functions/",
            "text": "These functions operate on boolean values.\n\n\n\n\n\n\n\n\nOperation\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\nLogical AND\n\n\n[and]\n\n\n\n\n\n\nLogical NAND\n\n\n[nand]\n\n\n\n\n\n\nLogical OR\n\n\n[or]\n\n\n\n\n\n\nLogical XOR\n\n\n[xor]\n\n\n\n\n\n\nLogical NOT\n\n\n[not]\n\n\n\n\n\n\nIf\n\n\n[if]\n\n\n\n\n\n\nIf Not\n\n\n[ifnot]\n\n\n\n\n\n\nWhile\n\n\n[while]\n\n\n\n\n\n\nMaybe (true or false)\n\n\n[maybe]",
            "title": "Boolean Functions"
        },
        {
            "location": "/language/variables/list-functions/",
            "text": "These functions create and operate on list objects.\n\n\n\n\n\n\n\n\nOperation\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\nAdd number(s) to list\n\n\n[laddn]\n\n\n\n\n\n\nAdd pattern(s) to list\n\n\n[laddp]\n\n\n\n\n\n\nAdd string(s) to list\n\n\n[ladd]\n\n\n\n\n\n\nAdd variable value(s) in list\n\n\n[linsv]\n\n\n\n\n\n\nAdd variable value(s) to list\n\n\n[laddv]\n\n\n\n\n\n\nClear list\n\n\n[lclr]\n\n\n\n\n\n\nCopy list item to variable\n\n\n[lcpy]\n\n\n\n\n\n\nCopy list to variable\n\n\n[lclone]\n\n\n\n\n\n\nFilter list items to another list\n\n\n[lfilter]\n\n\n\n\n\n\nFind item in list (case insensitive)\n\n\n[lfindi]\n\n\n\n\n\n\nFind item in list\n\n\n[lfind]\n\n\n\n\n\n\nFind variable value in list\n\n\n[lfindv]\n\n\n\n\n\n\nInsert number in list\n\n\n[linsn]\n\n\n\n\n\n\nInsert pattern in list\n\n\n[linsp]\n\n\n\n\n\n\nInsert string in list\n\n\n[lins]\n\n\n\n\n\n\nPrepend number to list\n\n\n[lpren]\n\n\n\n\n\n\nPrepend pattern to list\n\n\n[lprep]\n\n\n\n\n\n\nPrepend string to list\n\n\n[lpre]\n\n\n\n\n\n\nPrint list item\n\n\n[lget]\n\n\n\n\n\n\nPrint random value from list\n\n\n[lrand]\n\n\n\n\n\n\nProcess list items and map to another list\n\n\n[lmap]\n\n\n\n\n\n\nRemove first item from list\n\n\n[lpopf]\n\n\n\n\n\n\nRemove last item from list\n\n\n[lpop]\n\n\n\n\n\n\nSet list item at index to variable value\n\n\n[lsetv]\n\n\n\n\n\n\nSet list number item at index\n\n\n[lsetn]\n\n\n\n\n\n\nSet list pattern item at index\n\n\n[lsetp]\n\n\n\n\n\n\nSet list string item at index\n\n\n[lset]",
            "title": "List Functions"
        },
        {
            "location": "/advanced/package-format/",
            "text": "Packages are binary files containing serialized Rant resources.\nResources can be stored in an uncompressed format, or compressed using DEFLATE.\n\n\nData Types\n[link]\n\n\nAll types are little-endian unless otherwise specified.\n\n\nAll strings are encoded in UTF-8 unless otherwise specified.\n\n\n\n\nbool\n: 8-bit boolean value: 0x1 = true, 0x0 = false\n\n\nbyte\n: 8-bit unsigned integer\n\n\nshort\n: 16-bit signed integer\n\n\nushort\n: 16-bit unsigned integer\n\n\nint\n: 32-bit signed integer\n\n\nfloat\n: 32-bit float\n\n\ndouble\n: 64-bit float\n\n\nstring\n: String: \nint\n containing length in bytes followed by sequence of characters\n\n\nstring[]\n: String array: \nint\n containing item count followed by sequence of \nstring\n items\n\n\n\n\nHeader\n[link]\n\n\nstruct\n \nRantPackageHeader\n\n\n{\n\n    \nint\n \nMagic\n \n=\n \n0x4E465250\n;\n \n// \"NFRP\"\n\n    \nint\n \nFormatVersion\n;\n\n    \nbool\n \nCompress\n;\n \n// Indicates resource data is compressed using DEFLATE\n\n    \nstring\n \nPackageTitle\n;\n\n    \nstring\n \nPackageId\n;\n\n    \nstring\n \nPackageDescription\n;\n\n    \nstring\n[]\n \nPackageTags\n;\n\n    \nstring\n[]\n \nPackageAuthors\n;\n\n    \nint\n \nPackageVerMajor\n;\n\n    \nint\n \nPackageVerMinor\n;\n\n    \nint\n \nPackageVerRevision\n;\n\n    \nint\n \nDependencyCount\n;\n\n    \nRantPackageDependency\n[\nDependencyCount\n]\n \nDependencies\n;\n\n    \nint\n \nResourceCount\n;\n\n\n}\n\n\n\nstruct\n \nRantPackageDependency\n\n\n{\n\n    \nstring\n \nID\n;\n\n    \nint\n \nDepVerMajor\n;\n\n    \nint\n \nDepVerMinor\n;\n\n    \nint\n \nDepVerRevision\n;\n\n    \nbool\n \nAllowNewer\n;\n\n\n}\n\n\n\n\n\n\nResource chunks\n[link]\n\n\nFollowing the file header is a sequence of serialized resources.\nEach resource is prefixed with 4 bytes that identify the resource type.\nIt is up to the resource serializer to indicate how large the data chunk is.\n\n\nType codes\n[link]\n\n\n\n\n\n\n\n\nType Code\n\n\nHex\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndic2\n\n\n0x64696332\n\n\nDictionary table\n\n\n\n\n\n\nprog\n\n\n0x70726F67\n\n\nRant program",
            "title": "Package Format"
        },
        {
            "location": "/advanced/package-format/#data-types",
            "text": "All types are little-endian unless otherwise specified.  All strings are encoded in UTF-8 unless otherwise specified.   bool : 8-bit boolean value: 0x1 = true, 0x0 = false  byte : 8-bit unsigned integer  short : 16-bit signed integer  ushort : 16-bit unsigned integer  int : 32-bit signed integer  float : 32-bit float  double : 64-bit float  string : String:  int  containing length in bytes followed by sequence of characters  string[] : String array:  int  containing item count followed by sequence of  string  items",
            "title": "Data Types"
        },
        {
            "location": "/advanced/package-format/#header",
            "text": "struct   RantPackageHeader  { \n     int   Magic   =   0x4E465250 ;   // \"NFRP\" \n     int   FormatVersion ; \n     bool   Compress ;   // Indicates resource data is compressed using DEFLATE \n     string   PackageTitle ; \n     string   PackageId ; \n     string   PackageDescription ; \n     string []   PackageTags ; \n     string []   PackageAuthors ; \n     int   PackageVerMajor ; \n     int   PackageVerMinor ; \n     int   PackageVerRevision ; \n     int   DependencyCount ; \n     RantPackageDependency [ DependencyCount ]   Dependencies ; \n     int   ResourceCount ;  }  struct   RantPackageDependency  { \n     string   ID ; \n     int   DepVerMajor ; \n     int   DepVerMinor ; \n     int   DepVerRevision ; \n     bool   AllowNewer ;  }",
            "title": "Header"
        },
        {
            "location": "/advanced/package-format/#resource-chunks",
            "text": "Following the file header is a sequence of serialized resources.\nEach resource is prefixed with 4 bytes that identify the resource type.\nIt is up to the resource serializer to indicate how large the data chunk is.",
            "title": "Resource chunks"
        },
        {
            "location": "/advanced/package-format/#type-codes",
            "text": "Type Code  Hex  Description      dic2  0x64696332  Dictionary table    prog  0x70726F67  Rant program",
            "title": "Type codes"
        },
        {
            "location": "/advanced/program-format/",
            "text": "",
            "title": "Program Format"
        },
        {
            "location": "/advanced/serialized-table-format/",
            "text": "",
            "title": "Serialized Table Format"
        },
        {
            "location": "/advanced/compatibility/",
            "text": "Since Rant is such a large language with many specialized functions, we created a standard for developers to follow\nwhen creating an implementation of the Rant compiler and runtime. The purpose of this standard is to enable developers\nto easily determine the feature set essential to their particular usage case without the confusion of wondering which\nfeatures are more integral to the core functionality of the library.\n\n\nThe \nRant Standard Compatibility Levels\n (RSCL) lists feature sets, separated into ranks,\nthat are classified according to their applicability to different usage cases.\n\n\nRSCL-10\n[link]\n\n\nRSCL-10 is the bare minimum feature set that all Rant implementations should support. It includes the bare essential language features,\nbasic block behaviors, basic string manipulation, and all block attributes except for synchronizers.\n\n\nRequirements\n[link]\n\n\nThis standard contains basic features of Rant for branching, block attributes, basic formatting, and output manipulation.\n\n\n\n\nComments\n\n\nUnweighted blocks\n\n\nEscape sequences\n\n\nVerbatim strings\n\n\nReplacers\n\n\nFunction subset:\n\n\n[after]\n\n\n[before]\n\n\n[case]\n\n\n[chan]\n\n\n[end]\n\n\n[ends]\n\n\n[even]\n\n\n[first]\n\n\n[group]\n\n\n[item]\n\n\n[last]\n\n\n[match]\n\n\n[middle]\n\n\n[notfirst]\n\n\n[notlast]\n\n\n[notnth]\n\n\n[notntho]\n\n\n[nth]\n\n\n[ntho]\n\n\n[num]\n\n\n[odd]\n\n\n[protect]\n\n\n[redirect]\n\n\n[rep]\n\n\n[repcount]\n\n\n[repeach]\n\n\n[repelapsed]\n\n\n[repnum]\n\n\n[repqueued]\n\n\n[reprem]\n\n\n[rs]\n\n\n[sep]\n\n\n[start]\n\n\n[yield]\n\n\n\n\n\n\n\n\nRSCL-50\n[link]\n\n\nRSCL-50 adds basic query functionality, argument support, RNG manipulation, formatting functions, subroutines, and more advanced block behaviors.\n\n\nRequirements\n[link]\n\n\nALL\n RSCL-10 features plus the following:\n\n\n\n\nWeighted blocks\n\n\nSubroutines\n\n\nQuery feature subset:\n\n\nName, subtype, plural subtype\n\n\nClass filters (positive/negative)\n\n\n\n\n\n\nFunction subset:\n\n\n[branch]\n\n\n[capsinfer]\n\n\n[define]\n\n\n[digits]\n\n\n[else]\n\n\n[endian]\n\n\n[ifdef]\n\n\n[ifndef]\n\n\n[in]\n\n\n[merge]\n\n\n[numfmt]\n\n\n[quot]\n\n\n[sync]\n\n\n[then]\n\n\n[txtfmt]\n\n\n[undef]\n\n\n[xdel]\n\n\n[xpin]\n\n\n[xreset]\n\n\n[xstep]\n\n\n[xunpin]\n\n\n\n\n\n\n\n\nRSCL-75\n[link]\n\n\nRSCL-75 adds targets, full query functionality, and more granular character processing.\n\n\nRequirements\n[link]\n\n\nALL\n RSCL-50 features plus the following:\n\n\n\n\nVerbose characters\n\n\nALL query features\n\n\nFunction subset:\n\n\n[target]\n\n\n[send]\n\n\n[sendover]\n\n\n[targetval]\n\n\n[clrt]\n\n\n[char]\n\n\n[rev]\n\n\n[revx]\n\n\n[accent]\n\n\n\n\n\n\n\n\nRSCL-100\n[link]\n\n\nRSCL-100 encompasses the full feature set of the Rant language, including all functions, language features,\nand constructs.\n\n\nRequirements\n[link]\n\n\nALL\n RSCL-75 features plus the following:\n\n\n\n\nALL functions",
            "title": "Compatibility Standard"
        },
        {
            "location": "/advanced/compatibility/#rscl-10",
            "text": "RSCL-10 is the bare minimum feature set that all Rant implementations should support. It includes the bare essential language features,\nbasic block behaviors, basic string manipulation, and all block attributes except for synchronizers.",
            "title": "RSCL-10"
        },
        {
            "location": "/advanced/compatibility/#requirements",
            "text": "This standard contains basic features of Rant for branching, block attributes, basic formatting, and output manipulation.   Comments  Unweighted blocks  Escape sequences  Verbatim strings  Replacers  Function subset:  [after]  [before]  [case]  [chan]  [end]  [ends]  [even]  [first]  [group]  [item]  [last]  [match]  [middle]  [notfirst]  [notlast]  [notnth]  [notntho]  [nth]  [ntho]  [num]  [odd]  [protect]  [redirect]  [rep]  [repcount]  [repeach]  [repelapsed]  [repnum]  [repqueued]  [reprem]  [rs]  [sep]  [start]  [yield]",
            "title": "Requirements"
        },
        {
            "location": "/advanced/compatibility/#rscl-50",
            "text": "RSCL-50 adds basic query functionality, argument support, RNG manipulation, formatting functions, subroutines, and more advanced block behaviors.",
            "title": "RSCL-50"
        },
        {
            "location": "/advanced/compatibility/#requirements_1",
            "text": "ALL  RSCL-10 features plus the following:   Weighted blocks  Subroutines  Query feature subset:  Name, subtype, plural subtype  Class filters (positive/negative)    Function subset:  [branch]  [capsinfer]  [define]  [digits]  [else]  [endian]  [ifdef]  [ifndef]  [in]  [merge]  [numfmt]  [quot]  [sync]  [then]  [txtfmt]  [undef]  [xdel]  [xpin]  [xreset]  [xstep]  [xunpin]",
            "title": "Requirements"
        },
        {
            "location": "/advanced/compatibility/#rscl-75",
            "text": "RSCL-75 adds targets, full query functionality, and more granular character processing.",
            "title": "RSCL-75"
        },
        {
            "location": "/advanced/compatibility/#requirements_2",
            "text": "ALL  RSCL-50 features plus the following:   Verbose characters  ALL query features  Function subset:  [target]  [send]  [sendover]  [targetval]  [clrt]  [char]  [rev]  [revx]  [accent]",
            "title": "Requirements"
        },
        {
            "location": "/advanced/compatibility/#rscl-100",
            "text": "RSCL-100 encompasses the full feature set of the Rant language, including all functions, language features,\nand constructs.",
            "title": "RSCL-100"
        },
        {
            "location": "/advanced/compatibility/#requirements_3",
            "text": "ALL  RSCL-75 features plus the following:   ALL functions",
            "title": "Requirements"
        }
    ]
}