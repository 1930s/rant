<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stringes</name>
    </assembly>
    <members>
        <member name="T:Stringes.Chare">
            <summary>
            Provides information about a character in a stringe.
            </summary>
        </member>
        <member name="M:Stringes.Extensions.ToStringe(System.Object)">
            <summary>
            Converts the specified value into a stringe.
            </summary>
            <param name="value">The object to convert.</param>
            <returns></returns>
        </member>
        <member name="T:Stringes.Tokens.Token`1">
            <summary>
            Represents a token that contains a custom identifier.
            </summary>
            <typeparam name="T">The identifier type.</typeparam>
        </member>
        <member name="T:Stringes.Stringe">
            <summary>
            Describes a string or a substring in relation to its parent. Provides line number, column, offset, and other useful metadata.
            </summary>
        </member>
        <member name="M:Stringes.Stringe.Empty(Stringes.Stringe)">
            <summary>
            Returns an empty stringe based on the position of another stringe.
            </summary>
            <param name="basis">The basis stringe to get position info from.</param>
            <returns></returns>
        </member>
        <member name="M:Stringes.Stringe.IsNullOrEmpty(Stringes.Stringe)">
            <summary>
            Indicates whether the specified stringe is null or empty.
            </summary>
            <param name="stringe">The stringe to test.</param>
            <returns></returns>
        </member>
        <member name="M:Stringes.Stringe.#ctor(System.String)">
            <summary>
            Creates a new stringe from the specified string.
            </summary>
            <param name="value">The string to turn into a stringe.</param>
        </member>
        <member name="M:Stringes.Stringe.IndexOf(System.String,System.Int32,System.StringComparison)">
            <summary>
            Returns the zero-based index at which the specified string first occurs, relative to the substringe. The search starts at the specified index.
            </summary>
            <param name="input">The string to search for.</param>
            <param name="start">The index at which to begin the search.</param>
            <param name="comparisonType">The string comparison rules to apply to the search.</param>
            <returns></returns>
        </member>
        <member name="M:Stringes.Stringe.IndexOfTotal(System.String,System.Int32,System.StringComparison)">
            <summary>
            Returns the zero-based index at which the specified string first occurs, relative to the parent string. The search starts at the specified index.
            </summary>
            <param name="input">The string to search for.</param>
            <param name="start">The index at which to begin the search.</param>
            <param name="comparisonType">The string comparison rules to apply to the search.</param>
            <returns></returns>
        </member>
        <member name="M:Stringes.Stringe.IndexOf(System.Char,System.Int32)">
            <summary>
            Returns the zero-based index at which the specified character first occurs, relative to the substringe. The search starts at the specified index.
            </summary>
            <param name="input">The character to search for.</param>
            <param name="start">The index at which to begin the search.</param>
            <returns></returns>
        </member>
        <member name="M:Stringes.Stringe.IndexOfTotal(System.Char,System.Int32)">
            <summary>
            Returns the zero-based index at which the specified character first occurs, relative to the parent string. The search starts at the specified index.
            </summary>
            <param name="input">The character to search for.</param>
            <param name="start">The index at which to begin the search.</param>
            <returns></returns>
        </member>
        <member name="M:Stringes.Stringe.Substringe(System.Int32,System.Int32)">
            <summary>
            Creates a substringe from the stringe, starting at the specified index and extending to the specified length.
            </summary>
            <param name="offset">The offset at which to begin the substringe.</param>
            <param name="length">The length of the substringe.</param>
            <returns></returns>
        </member>
        <member name="M:Stringes.Stringe.Substringe(System.Int32)">
            <summary>
            Create a substringe from the stringe, starting at the specified index and extending to the end.
            </summary>
            <param name="offset">The offset at which to begin the substringe.</param>
            <returns></returns>
        </member>
        <member name="M:Stringes.Stringe.Slice(System.Int32,System.Int32)">
            <summary>
            Returns a substringe that contains all characters between the two specified positions in the stringe.
            </summary>
            <param name="a">The left side of the slice.</param>
            <param name="b">The right side of the slice.</param>
            <returns></returns>
        </member>
        <member name="M:Stringes.Stringe.Dilate(System.Int32,System.Int32)">
            <summary>
            Returns a new substringe whose left and right boundaries are offset by the specified values.
            </summary>
            <param name="left">The amount, in characters, to offset the left boundary to the left.</param>
            <param name="right">The amount, in characters, to offset the right boundary to the right.</param>
            <returns></returns>
        </member>
        <member name="M:Stringes.Stringe.Trim">
            <summary>
            Returns the stringe with all leading and trailing white space characters removed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stringes.Stringe.Trim(System.Char[])">
            <summary>
            Returns the stringe with any occurrences of the specified characters stripped from the ends.
            </summary>
            <param name="trimChars">The characters to strip off the ends of the stringe.</param>
            <returns></returns>
        </member>
        <member name="M:Stringes.Stringe.ToString">
            <summary>
            Returns the string value of the stringe.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stringes.Stringe.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the characteres in the stringe.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Stringes.Stringe.Offset">
            <summary>
            The offset of the stringe in the string.
            </summary>
        </member>
        <member name="P:Stringes.Stringe.Length">
            <summary>
            The length of the string represented by the stringe.
            </summary>
        </member>
        <member name="P:Stringes.Stringe.Line">
            <summary>
            The 1-based line number at which the stringe begins.
            </summary>
        </member>
        <member name="P:Stringes.Stringe.Column">
            <summary>
            The 1-based column at which the stringe begins.
            </summary>
        </member>
        <member name="P:Stringes.Stringe.IsSubstring">
            <summary>
            Indicates if the stringe is a substring.
            </summary>
        </member>
        <member name="P:Stringes.Stringe.IsEmpty">
            <summary>
            Indicates if the stringe is empty.
            </summary>
        </member>
        <member name="P:Stringes.Stringe.Value">
            <summary>
            The substring value represented by the stringe. If the stringe is the parent, this will provide the original string.
            </summary>
        </member>
        <member name="P:Stringes.Stringe.ParentString">
            <summary>
            Gets the original string from which the stringe was originally derived.
            </summary>
        </member>
        <member name="P:Stringes.Stringe.Item(System.Int32)">
            <summary>
            Gets the charactere at the specified index in the stringe.
            </summary>
            <param name="index">The index of the charactere to retrieve.</param>
            <returns></returns>
        </member>
        <member name="P:Stringes.Stringe.LeftPadded">
            <summary>
            Indicates if the left side of the line on which the stringe exists is composed entirely of white space.
            </summary>
        </member>
        <member name="P:Stringes.Stringe.RightPadded">
            <summary>
            Indicates whether the line context to the right side of the stringe is composed on uninterrupted white space.
            </summary>
        </member>
        <member name="T:Stringes.Stringe.Stref">
            <summary>
            Stores a reference to a string, to prevent unnecessary copies being created.
            </summary>
        </member>
        <member name="P:Stringes.Tokens.Token`1.Identifier">
            <summary>
            The token identifier.
            </summary>
        </member>
        <member name="T:Stringes.Tokens.LexerRules`1">
            <summary>
            Represents a set of rules for creating tokens from a stringe.
            </summary>
            <typeparam name="T">The identifier type to use in tokens created from the context.</typeparam>
        </member>
        <member name="M:Stringes.Tokens.LexerRules`1.#ctor">
            <summary>
            Creates a new LexerRules instance.
            </summary>
        </member>
        <member name="M:Stringes.Tokens.LexerRules`1.GetSymbolForId(`0)">
            <summary>
            Returns the symbol that represents the specified identifier. If the identifier cannot be found, the method will return an empty string.
            </summary>
            <param name="id">The identifier to get the symbol for.</param>
            <returns></returns>
        </member>
        <member name="M:Stringes.Tokens.LexerRules`1.AddEndToken(`0)">
            <summary>
            Define a lexer rule that returns a token when the end of the input is reached.
            </summary>
            <param name="endTokenId">The token identifier to associate with this rule.</param>
        </member>
        <member name="M:Stringes.Tokens.LexerRules`1.AddUndefinedCaptureRule(`0,System.Func{Stringes.Stringe,Stringes.Stringe})">
            <summary>
            Define a lexer rule that captures unrecognized characters as a token.
            </summary>
            <param name="tokenId">The token identifier to associate with this rule.</param>
            <param name="evalFunc">A function that processes the captured stringe.</param>
        </member>
        <member name="M:Stringes.Tokens.LexerRules`1.Add(System.String,`0,Stringes.Tokens.SymbolPriority)">
            <summary>
            Adds a constant rule to the context. This will throw an InvalidOperationException if called after the context is used to create tokens.
            </summary>
            <param name="symbol">The symbol to test for.</param>
            <param name="value">The token identifier to associate with the symbol.</param>
            <param name="priority">Determines whether the symbol should be tested before any regex rules.</param>
        </member>
        <member name="M:Stringes.Tokens.LexerRules`1.Add(System.String[],`0,Stringes.Tokens.SymbolPriority)">
            <summary>
            Adds a constant rule to the context that affects all symbols in the specified array. This will throw an InvalidOperationException if called after the context is used to create tokens.
            </summary>
            <param name="symbols">The symbols to test for.</param>
            <param name="value">The token identifier to associate with the symbols.</param>
            <param name="priority">Determines whether the symbol should be tested before any regex rules.</param>
        </member>
        <member name="M:Stringes.Tokens.LexerRules`1.Add(System.Text.RegularExpressions.Regex,`0,System.Int32)">
            <summary>
            Adds a regex rule to the context. This will throw an InvalidOperationException if called after the context is used to create tokens.
            </summary>
            <param name="regex">The regex to test for.</param>
            <param name="value">The token identifier to associate with the symbol.</param>
            <param name="priority">The priority of the rule. Higher values are checked first.</param>
        </member>
        <member name="M:Stringes.Tokens.LexerRules`1.Add(System.Text.RegularExpressions.Regex,System.Func{System.Text.RegularExpressions.Match,`0},System.Int32)">
            <summary>
            Adds a regex rule to the context. This will throw an InvalidOperationException if called after the context is used to create tokens.
            </summary>
            <param name="regex">The regex to test for.</param>
            <param name="generator">A function that generates a token identifier from the match.</param>
            <param name="priority">The priority of the rule. Higher values are checked first.</param>
        </member>
        <member name="P:Stringes.Tokens.LexerRules`1.IgnoreRules">
            <summary>
            A list of token identifiers that should be ignored.
            </summary>
        </member>
        <member name="T:Stringes.Tokens.SymbolPriority">
            <summary>
            Used to manipulate the order in which symbol (non-regex) rules are tested.
            </summary>
        </member>
        <member name="F:Stringes.Tokens.SymbolPriority.Last">
            <summary>
            Test symbol after testing regex symbols. This is the default value for all symbols rules.
            </summary>
        </member>
        <member name="F:Stringes.Tokens.SymbolPriority.First">
            <summary>
            Test symbol before testing any regex rules.
            </summary>
        </member>
        <member name="T:Stringes.StringeReader">
            <summary>
            Represents a reader that can read data from a stringe.
            </summary>
        </member>
        <member name="M:Stringes.StringeReader.#ctor(System.String)">
            <summary>
            Creates a new StringeReader instance using the specified string as input.
            </summary>
            <param name="value">The string to use as input. This will be converted to a root-level stringe.</param>
        </member>
        <member name="M:Stringes.StringeReader.#ctor(Stringes.Stringe)">
            <summary>
            Creates a new StringeReader instance using the specified stringe as input.
            </summary>
            <param name="value">The stringe to use as input.</param>
        </member>
        <member name="M:Stringes.StringeReader.ReadChare">
            <summary>
            Reads a charactere from the input and advances the position by one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stringes.StringeReader.PeekChare">
            <summary>
            Returns the next charactere in the input, but does not consume it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stringes.StringeReader.ReadStringe(System.Int32)">
            <summary>
            Reads a stringe from the input and advances the position by the number of characters read.
            </summary>
            <param name="length">The number of characters to read.</param>
            <returns></returns>
        </member>
        <member name="M:Stringes.StringeReader.Eat(System.Char)">
            <summary>
            Indicates whether the specified character occurs at the reader's current position, and consumes it.
            </summary>
            <param name="value">The character to test for.</param>
            <returns></returns>
        </member>
        <member name="M:Stringes.StringeReader.Eat(System.String)">
            <summary>
            Indicates whether the specified string occurs at the reader's current position, and consumes it.
            </summary>
            <param name="value">The string to test for.</param>
            <returns></returns>
        </member>
        <member name="M:Stringes.StringeReader.Eat(System.Text.RegularExpressions.Regex)">
            <summary>
            Indicates whether the specified regular expression matches the input at the reader's current position. If a match is found, the reader consumes it.
            </summary>
            <param name="regex">The regular expression to test for.</param>
            <returns></returns>
        </member>
        <member name="M:Stringes.StringeReader.Eat(System.Text.RegularExpressions.Regex,Stringes.Stringe@)">
            <summary>
            Indicates whether the specified regular expression matches the input at the reader's current position. If a match is found, the reader consumes it and outputs the result.
            </summary>
            <param name="regex">The regular expression to test for.</param>
            <param name="result">The stringe to output the result to.</param>
            <returns></returns>
        </member>
        <member name="M:Stringes.StringeReader.IsNext(System.Char)">
            <summary>
            Indicates whether the specified character occurs at the reader's current position.
            </summary>
            <param name="value">The character to test for.</param>
            <returns></returns>
        </member>
        <member name="M:Stringes.StringeReader.IsNext(System.String)">
            <summary>
            Indicates whether the specified string occurs at the reader's current position.
            </summary>
            <param name="value">The string to test for.</param>
            <returns></returns>
        </member>
        <member name="M:Stringes.StringeReader.IsNext(System.Text.RegularExpressions.Regex)">
            <summary>
            Indicates whether the specified regular expression matches the input at the reader's current position.
            </summary>
            <param name="regex">The regular expression to test for.</param>
            <returns></returns>
        </member>
        <member name="M:Stringes.StringeReader.IsNext(System.Text.RegularExpressions.Regex,Stringes.Stringe@)">
            <summary>
            Indicates whether the specified regular expression matches the input at the reader's current position, and outputs the result.
            </summary>
            <param name="regex">The regular expression to test for.</param>
            <param name="result">The stringe to output the result to.</param>
            <returns></returns>
        </member>
        <member name="M:Stringes.StringeReader.SkipWhiteSpace">
            <summary>
            Advances the reader position past any immediate white space characters.
            </summary>
        </member>
        <member name="M:Stringes.StringeReader.ReadToken``1(Stringes.Tokens.LexerRules{``0})">
            <summary>
            Reads the next token from the current position, then advances the position past it.
            </summary>
            <typeparam name="T">The token identifier type to use.</typeparam>
            <param name="rules">The lexer rules to use.</param>
            <returns></returns>
        </member>
        <member name="P:Stringes.StringeReader.EndOfStringe">
            <summary>
            Indicates whether the reader position is at the end of the input string.
            </summary>
        </member>
        <member name="P:Stringes.StringeReader.Position">
            <summary>
            The current zero-based position of the reader.
            </summary>
        </member>
        <member name="P:Stringes.StringeReader.Length">
            <summary>
            The total length, in characters, of the stringe being read.
            </summary>
        </member>
    </members>
</doc>
