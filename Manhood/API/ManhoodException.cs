using System;

namespace Manhood
{
    /// <summary>
    /// Contains error information generated by the Manhood interpreter.
    /// </summary>
    public sealed class ManhoodException : Exception
    {
        private readonly int _index;

        internal ManhoodException(string message, int index = 0) : base(message)
        {
            _index = index;
        }

        /// <summary>
        /// The position in the code at which the error occurred.
        /// </summary>
        public int Index
        {
            get { return _index; }
        }

        internal static ManhoodException MissingToken(string token, int index = 0)
        {
            return new ManhoodException(String.Concat("Missing '", token, "'"), index);
        }

        internal static ManhoodException MissingTerminator(string subject, int index = 0)
        {
            return new ManhoodException(String.Concat("Missing ", subject, " terminator"), index);
        }

        internal static ManhoodException UnexpectedToken(string token, int index = 0)
        {
            return new ManhoodException(String.Concat("Unexpected token '", token, "'"), index);
        }

        internal static ManhoodException InvalidExpression(string expression, string expectedFormat, int index = 0)
        {
            return new ManhoodException(String.Concat("Invalid expression '", expression, "': Expected ", expectedFormat), index);
        }

        internal static ManhoodException InvalidDirective(string directive, int index = 0)
        {
            return new ManhoodException(String.Concat("Invalid preprocessor directive '", directive, "'"), index);
        }

        internal static ManhoodException MissingSubtype(string listName, string subtype, int index = 0)
        {
            return new ManhoodException(String.Concat("Missing subtype '", subtype, "' in dictionary '", listName, "'"), index);
        }
    }
}