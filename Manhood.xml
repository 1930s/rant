<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Manhood</name>
    </assembly>
    <members>
        <member name="T:Manhood.Blueprints.Blueprint">
            <summary>
            Represents an outline for an action that is queued by a state object and executed immediately before parsing any tokens in the state.
            </summary>
        </member>
        <member name="F:Manhood.Compiler.BracketPairs.All">
            <summary>
            Used everywhere except for reading constant literals.
            </summary>
        </member>
        <member name="T:Manhood.Engine">
            <summary>
            The central class of the Manhood engine that allows the execution of patterns.
            </summary>
        </member>
        <member name="F:Manhood.Engine.DefaultNsfwFilter">
            <summary>
            The default NSFW filtering option to apply when creating Engine objects that load vocabulary from a directory.
            </summary>
        </member>
        <member name="F:Manhood.Engine.MaxStackSize">
            <summary>
            The maximum stack size allowed for a pattern.
            </summary>
        </member>
        <member name="M:Manhood.Engine.#ctor">
            <summary>
            Creates a new Engine instance with no vocabulary.
            </summary>
        </member>
        <member name="M:Manhood.Engine.#ctor(System.String)">
            <summary>
            Creates a new Engine instance that loads vocabulary from the specified path.
            </summary>
            <param name="vocabularyPath">The path to the vocabulary files.</param>
        </member>
        <member name="M:Manhood.Engine.#ctor(System.String,Manhood.NsfwFilter)">
            <summary>
            Creates a new Engine instance that loads vocabulary from a path according to the specified filtering option.
            </summary>
            <param name="vocabularyPath">The path to the vocabulary files.</param>
            <param name="filter">The filtering option to apply when loading the files.</param>
        </member>
        <member name="M:Manhood.Engine.Do(System.String)">
            <summary>
            Executes the specified string and returns the resulting output.
            </summary>
            <param name="input">The input string to execute.</param>
            <returns></returns>
        </member>
        <member name="T:Manhood.Interpreter.State">
            <summary>
            Maintains state information for a single stream of tokens.
            </summary>
        </member>
        <member name="M:Manhood.Interpreter.State.Create(Manhood.Compiler.Source,Manhood.Interpreter)">
            <summary>
            Creates a state object that reads tokens from the specified source.
            </summary>
            <param name="source">The source from which to read tokens.</param>
            <param name="interpreter">The interpreter that will read the tokens.</param>
            <returns></returns>
        </member>
        <member name="M:Manhood.Interpreter.State.CreateDerivedShared(Manhood.Compiler.Source,System.Collections.Generic.IEnumerable{Stringes.Tokens.Token{Manhood.Compiler.TokenType}},Manhood.Interpreter)">
            <summary>
            Creates a state object that reads tokens from a custom collection that is associated with the specified source. Associates with the main output.
            </summary>
            <param name="derivedSource">The source with which to associate the tokens.</param>
            <param name="tokens">The tokens to read.</param>
            <param name="interpreter">The interpreter that will read the tokens.</param>
            <returns></returns>
        </member>
        <member name="M:Manhood.Interpreter.State.CreateDerivedDistinct(Manhood.Compiler.Source,System.Collections.Generic.IEnumerable{Stringes.Tokens.Token{Manhood.Compiler.TokenType}},Manhood.Interpreter,Manhood.ChannelStack)">
            <summary>
            Creates a state object that reads tokens from a custom collection that is associated with the specified source. Specifying an output that is distinct from the one below it in the stack will cause the output to be pushed to the result stack when finished.
            </summary>
            <param name="derivedSource">The source with which to associate the tokens.</param>
            <param name="tokens">The tokens to read.</param>
            <param name="interpreter">The interpreter that will read the tokens.</param>
            <param name="output">The output of the state. Excluding this will create a new output.</param>
            <returns></returns>
        </member>
        <member name="T:Manhood.ManhoodException">
            <summary>
            Represents runtime errors raised by the Manhood engine.
            </summary>
        </member>
        <member name="P:Manhood.ManhoodException.Line">
            <summary>
            The line on which the error occurred.
            </summary>
        </member>
        <member name="P:Manhood.ManhoodException.Column">
            <summary>
            The column on which the error occurred.
            </summary>
        </member>
        <member name="P:Manhood.ManhoodException.Index">
            <summary>
            The character index on which the error occurred.
            </summary>
        </member>
        <member name="P:Manhood.ManhoodException.SourceCode">
            <summary>
            The source of the error.
            </summary>
        </member>
        <member name="T:Manhood.NsfwFilter">
            <summary>
            Used to instruct the dictionary loader if entries marked as NSFW should be loaded.
            </summary>
        </member>
        <member name="F:Manhood.NsfwFilter.Allow">
            <summary>
            Allow NSFW entries.
            </summary>
        </member>
        <member name="F:Manhood.NsfwFilter.Disallow">
            <summary>
            Disallow NSFW entries.
            </summary>
        </member>
        <member name="T:Manhood.Channel">
            <summary>
            Stores output from a pattern channel.
            </summary>
        </member>
        <member name="M:Manhood.Channel.ToString">
            <summary>
            Returns a string representation of the channel.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Manhood.Channel.Name">
            <summary>
            The name of the channel.
            </summary>
        </member>
        <member name="P:Manhood.Channel.Visiblity">
            <summary>
            The visibility of the channel.
            </summary>
        </member>
        <member name="P:Manhood.Channel.Output">
            <summary>
            The output stored in the channel.
            </summary>
        </member>
        <member name="T:Manhood.ChannelSet">
            <summary>
            Contains a set of outputs returned from Manhood.
            </summary>
        </member>
        <member name="M:Manhood.ChannelSet.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the ChannelSet.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Manhood.ChannelSet.ToString">
            <summary>
            Returns the output from the "main" channel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Manhood.ChannelSet.op_Implicit(Manhood.ChannelSet)~System.String">
            <summary>
            Returns the output from the "main" channel.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Manhood.ChannelSet.Item(System.String)">
            <summary>
            Retrieves the channel with the specified name.
            </summary>
            <param name="index">The name of the channel.</param>
            <returns></returns>
        </member>
        <member name="P:Manhood.ChannelSet.MainOutput">
            <summary>
            The main output channel.
            </summary>
        </member>
        <member name="T:Manhood.ChannelVisibility">
            <summary>
            Provides visibility settings for output channels.
            </summary>
        </member>
        <member name="F:Manhood.ChannelVisibility.Public">
            <summary>
            Channel outputs to itself and 'main'.
            </summary>
        </member>
        <member name="F:Manhood.ChannelVisibility.Private">
            <summary>
            Channel outputs only to itself.
            </summary>
        </member>
        <member name="F:Manhood.ChannelVisibility.Internal">
            <summary>
            Channel outputs only to itself and any parent channels also set to Internal.
            </summary>
        </member>
        <member name="T:Manhood.RNG">
            <summary>
            Manhood's non-linear random number generator.
            </summary>
        </member>
        <member name="M:Manhood.RNG.#ctor(System.Int64)">
            <summary>
            Creates a new ManRandom instance with the specified seed.
            </summary>
            <param name="seed">The seed for the generator.</param>
        </member>
        <member name="M:Manhood.RNG.#ctor(System.Int64,System.Int64)">
            <summary>
            Creates a new ManRandom instance with the specified seed and generation.
            </summary>
            <param name="seed">The seed for the generator.</param>
            <param name="generation">The generation to start at.</param>
        </member>
        <member name="M:Manhood.RNG.#ctor">
            <summary>
            Creates a new ManRandom instance seeded with the system tick count.
            </summary>
        </member>
        <member name="M:Manhood.RNG.GetRaw(System.Int64,System.Int64)">
            <summary>
            Calculates the raw 64-bit value for a given seed/generation pair.
            </summary>
            <param name="s">The seed.</param>
            <param name="g">The generation.</param>
            <returns></returns>
        </member>
        <member name="M:Manhood.RNG.NextRaw">
            <summary>
            Calculates the raw 64-bit value for the next generation, and increases the current generation by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Manhood.RNG.PrevRaw">
            <summary>
            Calculates the raw 64-bit value for the previous generation, and decreases the current generation by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Manhood.RNG.Reset">
            <summary>
            Sets the current generation to zero.
            </summary>
        </member>
        <member name="M:Manhood.RNG.Reset(System.Int64)">
            <summary>
            Sets the seed to the specified value and the current generation to zero.
            </summary>
            <param name="newSeed">The new seed to apply to the generator.</param>
        </member>
        <member name="M:Manhood.RNG.Branch(System.Int64)">
            <summary>
            Creates a new branch at the specified generation.
            </summary>
            <param name="generation">The generation to branch from.</param>
        </member>
        <member name="M:Manhood.RNG.Merge">
            <summary>
            Removes the topmost branch and resumes generation on the next one down.
            </summary>
        </member>
        <member name="M:Manhood.RNG.Peek">
            <summary>
            Calculates a 32-bit, non-negative integer for the current generation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Manhood.RNG.PeekAt(System.Int64)">
            <summary>
            Calculates the 32-bitnon-negative integer for the specified generation.
            </summary>
            <param name="generation">The generation to peek at.</param>
            <returns></returns>
        </member>
        <member name="M:Manhood.RNG.NextDouble">
            <summary>
            Returns a double-precision floating point number between 0 and 1, and advances the generation by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Manhood.RNG.Next">
            <summary>
            Calculates a 32-bit, non-negative integer from the next generation and increases the current generation by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Manhood.RNG.Prev">
            <summary>
            Calculates a 32-bit, non-negative integer from the previous generation and decreases the current generation by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Manhood.RNG.Next(System.Int32)">
            <summary>
            Calculates a 32-bit integer between 0 and a specified upper bound for the current generation and increases the current generation by 1.
            </summary>
            <param name="max">The exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Manhood.RNG.Prev(System.Int32)">
            <summary>
            Calculates a 32-bit integer between 0 and a specified upper bound from the previous generation and decreases the current generation by 1.
            </summary>
            <param name="max">The exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Manhood.RNG.Peek(System.Int32)">
            <summary>
            Calculates a 32-bit integer between 0 and a specified upper bound for the current generation.
            </summary>
            <param name="max">The exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Manhood.RNG.PeekAt(System.Int64,System.Int32)">
            <summary>
            Calculates a 32-bit integer between 0 and a specified upper bound for the specified generation.
            </summary>
            <param name="generation">The generation whose value to calculate.</param>
            <param name="max">The exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Manhood.RNG.Next(System.Int32,System.Int32)">
            <summary>
            Calculates a 32-bit integer between the specified minimum and maximum values for the current generation, and increases the current generation by 1.
            </summary>
            <param name="min">The inclusive minimum value.</param>
            <param name="max">The exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Manhood.RNG.Prev(System.Int32,System.Int32)">
            <summary>
            Calculates a 32-bit integer between the specified minimum and maximum values for the previous generation, and decreases the current generation by 1.
            </summary>
            <param name="min">The inclusive minimum value.</param>
            <param name="max">The exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Manhood.RNG.Peek(System.Int32,System.Int32)">
            <summary>
            Calculates a 32-bit integer between the specified minimum and maximum values for the current generation.
            </summary>
            <param name="min">The inclusive minimum value.</param>
            <param name="max">The exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Manhood.RNG.PeekAt(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates a 32-bit integer between the specified minimum and maximum values for the specified generation.
            </summary>
            <param name="min">The inclusive minimum value.</param>
            <param name="max">The exclusive maximum value.</param>
            <param name="generation">The generation whose value to calculate.</param>
            <returns></returns>
        </member>
        <member name="P:Manhood.RNG.Seed">
            <summary>
            The current seed.
            </summary>
        </member>
        <member name="P:Manhood.RNG.Generation">
            <summary>
            The current generation.
            </summary>
        </member>
        <member name="P:Manhood.RNG.Item(System.Int32)">
            <summary>
            Calculates the raw 64-bit value for a given generation.
            </summary>
            <param name="g">The generation.</param>
            <returns></returns>
        </member>
        <member name="P:Manhood.RNG.Depth">
            <summary>
            The current branching depth of the generator.
            </summary>
        </member>
        <member name="T:Manhood.DictionaryEntry">
            <summary>
            Stores information about a dictionary entry.
            </summary>
        </member>
        <member name="M:Manhood.DictionaryEntry.#ctor(System.String[],System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Creates a new Word object from the specified data.
            </summary>
            <param name="entries">The values of the entry.</param>
            <param name="classes">The classes associated with the entry.</param>
            <param name="weight">The weight of the entry.</param>
        </member>
        <member name="P:Manhood.DictionaryEntry.Values">
            <summary>
            The values of the entry.
            </summary>
        </member>
        <member name="P:Manhood.DictionaryEntry.Classes">
            <summary>
            The classes associated with the entry.
            </summary>
        </member>
        <member name="P:Manhood.DictionaryEntry.Weight">
            <summary>
            The weight of the entry.
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.Text">
            <summary>
            Regular text with no special function.
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.Identifier">
            <summary>
            An alphanumeric identifier string with no spaces, but can contain underscores.
            <para>
            Used by: Tags (names), Queries (list IDs, subtypes, classes)
            </para>
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.EscapeSequence">
            <summary>
            A format string used to output a reserved or random character.
            Used by: Plaintext, arguments
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.LeftSquare">
            <summary>
            [
            <para>
            Used by: Tags (opening)
            </para>
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.RightSquare">
            <summary>
            ]
            <para>
            Used by: Tags (closure)
            </para>
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.LeftCurly">
            <summary>
            {
            <para>
            Used by: Blocks (opening)
            </para>
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.RightCurly">
            <summary>
            }
            <para>
            Used by: Blocks (closure)
            </para>
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.LeftAngle">
            <summary>
            &lt;
            <para>
            Used by: Queries (opening)
            </para>
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.RightAngle">
            <summary>
            &gt;
            <para>
            Used by: Queries (closure)
            </para>
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.LeftParen">
            <summary>
            (
            <para>
            Used by: Arithmetic (opening)
            </para>
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.RightParen">
            <summary>
            )
            <para>
            Used by: Arithmetic (closure)
            </para>
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.Pipe">
            <summary>
            |
            <para>
            Used by: Blocks (item separator)
            </para>
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.Colon">
            <summary>
            :
            <para>
            Used by: Tags (follows name)
            </para>
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.Semicolon">
            <summary>
            ;
            <para>
            Used by: Tags (argument separator)
            </para>
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.DoubleColon">
            <summary>
            ::
            <para>
            Used by: Queries (carrier operator)
            </para>
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.At">
            <summary>
            @
            <para>
            Used by: Tags (constant arg notation), Arithmetic (statement modifier)
            </para>
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.Question">
            <summary>
            ?
            <para>
            Used by: Tags (metapatterns), Queries (whitelist regex)
            </para>
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.ForwardSlash">
            <summary>
            /
            <para>
            Used by: Queries (regex filters)
            </para>
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.Exclamation">
            <summary>
            !
            <para>
            Used by: Queries ('not' class constraint modifier)
            </para>
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.Dollar">
            <summary>
            $
            <para>
            Used by: Queries ('only' modifier)
            </para>
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.Hyphen">
            <summary>
            -
            <para>
            Used by: Queries (class constraint)
            </para>
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.Comma">
            <summary>
            ,
            <para>
            Used by: Queries (subtype prefix)
            </para>
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.Without">
            <summary>
            ?!
            <para>
            Used by: Queries (blacklist regex)
            </para>
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.Regex">
            <summary>
            Javascript-style regular expression.
            <para>
            Used by: Queries (blacklist/whitelist)
            </para>
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.Ignore">
            <summary>
            Comments, whitespace, etc.
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.ConstantLiteral">
            <summary>
            " ... "
            Used by: Tags
            </summary>
        </member>
        <member name="F:Manhood.Compiler.TokenType.EOF">
            <summary>
            End of file.
            </summary>
        </member>
        <member name="T:Manhood.Compiler.Source">
            <summary>
            Represents a compiled source that can be executed by the engine.
            </summary>
        </member>
        <member name="M:Manhood.Compiler.Source.FromString(System.String)">
            <summary>
            Compiles a Source object from the specified string.
            </summary>
            <param name="code">The code to compile.</param>
            <returns></returns>
        </member>
        <member name="M:Manhood.Compiler.Source.FromString(System.String,System.String)">
            <summary>
            Compiles a Source object from a string with the specified name.
            </summary>
            <param name="name">The name to give the source.</param>
            <param name="code">The code to compile.</param>
            <returns></returns>
        </member>
        <member name="M:Manhood.Compiler.Source.FromFile(System.String)">
            <summary>
            Loads the file located at the specified path and creates a Source object from its contents.
            </summary>
            <param name="path">The path to the file to load.</param>
            <returns></returns>
        </member>
        <member name="M:Manhood.Compiler.Source.ToString">
            <summary>
            Returns a string describing the source.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Manhood.Compiler.Source.Name">
            <summary>
            The name of the source code.
            </summary>
        </member>
        <member name="P:Manhood.Compiler.Source.Type">
            <summary>
            Describes the origin of the source.
            </summary>
        </member>
        <member name="P:Manhood.Compiler.Source.Code">
            <summary>
            The code contained in the source.
            </summary>
        </member>
        <member name="T:Manhood.Compiler.SourceType">
            <summary>
            Indicates the manner in which a referenced code source was created.
            </summary>
        </member>
        <member name="F:Manhood.Compiler.SourceType.File">
            <summary>
            Source was loaded from a file.
            </summary>
        </member>
        <member name="F:Manhood.Compiler.SourceType.String">
            <summary>
            Source was loaded from a string.
            </summary>
        </member>
        <member name="F:Manhood.Compiler.SourceType.Metapattern">
            <summary>
            Source was generated from a metapattern.
            </summary>
        </member>
        <member name="F:Manhood.Compiler.SourceType.SelfGenerated">
            <summary>
            Source was generated from an interpreted subroutine definition.
            </summary>
        </member>
        <member name="F:Manhood.TagArgType.Result">
            <summary>
            Argument is a string generated from the provided tokens.
            </summary>
        </member>
        <member name="F:Manhood.TagArgType.Tokens">
            <summary>
            Argument is a series of tokens.
            </summary>
        </member>
        <member name="T:Manhood.Dictionary">
            <summary>
            Stores a Manhood dictionary.
            </summary>
        </member>
        <member name="M:Manhood.Dictionary.#ctor(System.String,System.String[],Manhood.DictionaryEntry[])">
            <summary>
            Creates a new WordList from the specified data.
            </summary>
            <param name="name">the name of the list.</param>
            <param name="subtypes">The subtype names.</param>
            <param name="words">The words to add to the list.</param>
        </member>
        <member name="M:Manhood.Dictionary.FromFile(System.String,Manhood.NsfwFilter)">
            <summary>
            Loads a WordList from the file at the specified path.
            </summary>
            <param name="path">The path to the file to load.</param>
            <param name="nsfwFilter">Specifies whether to allow or disallow NSFW entries.</param>
            <returns></returns>
        </member>
        <member name="P:Manhood.Dictionary.Name">
            <summary>
            The name of the dictionary.
            </summary>
        </member>
    </members>
</doc>
